{"version":3,"sources":["webpack://@platform/[name]/webpack/universalModuleDefinition","webpack://@platform/[name]/webpack/bootstrap","webpack://@platform/[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://@platform/[name]/external \"@platform/api/index\"","webpack://@platform/[name]/external \"@platform/template/index\"","webpack://@platform/[name]/./src/platform/components/Table/appTable/EditTable/store.js","webpack://@platform/[name]/./src/platform/components/Table/appTable/EditTable/components/SideBox/index.js","webpack://@platform/[name]/./src/platform/components/Table/appTable/EditTable/components/SideBox/hoc.js","webpack://@platform/[name]/./src/platform/components/Table/appTable/EditTable/index.js","webpack://@platform/[name]/external \"@platform/base/index\"","webpack://@platform/[name]/external \"@platform/form/index\"","webpack://@platform/[name]/external \"@platform/table-core/index\""],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__11__","__WEBPACK_EXTERNAL_MODULE__42__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","uuidv4","utils","isWrong","getPageSizeStorage","MetaStore","props","getActiveCell","getStore","setActiveCell","param","shouldForceUpdate","setStore","getHooks","getTableHooks","getPageInfo","setPageInfo","setTableData","setTableStatus","deleteTableRows","setTableProps","uuid","store","allpks","alltss","sideBoxConfig","show","record","operateType","pageInfo","pageIndex","total","totalPage","activeCell","meta","id","this","status","getTableProps","isUpdateMetaStatus","callback","tableStatusIsUpdate","prePageSize","pageSize","prevPageInfo","data","isCache","isTop","rows","length","Array","isArray","thorough","rowKeyValues","rowIndexs","delItems","visibleRows","getViewData","checkInfo","getCheckInfo","indeterminate","some","item","selected","checkedAll","every","setCheckInfo","EditTableStore","hookFactory","isFunction","isObject","isBoolean","TableSideBox","state","index","buttonDisabled","formStore","Form","useForm","columns","renderItems","filter","column","render","itemtype","renderStatus","items","moduletype","code","isunfold","setMeta","replaceItem","formValue","values","setStatus","setAllFormValue","console","log","nextProps","langJson","onClose","fieldid","onCancel","onSure","onAdd","tableId","onBeforeEvent","onAfterEvent","animation","model","origin","pageScope","scale","tableScope","modelIndex","diabled","edittable_dom","usual","mask","dialog","className","getSysFieldid","onClick","e","config","Component","ROW_STATUS","CONFIG","formatColumn","lib","hotkey","pagination","selectRow","indexCol","checkCol","errorCol","selectable","excel","columnSort","contextMenu","excelPackageData","isString","isEmptyValue","polymerizeComponents","isUndefined","warningOnce","getMetaIsTotal","setPageSizeStorage","MetaTable","Table","error","prams","attrcode","curMetaItem","oldValue","allValue","componentValue","high_sidebox","rowKey","setCache","batchChangeIndex","batchChangeKey","batchChangeValue","batchChangeDisplay","display","rowKeyValue","getRowProps","setRowProps","edit","setRows","rowIndex","isTriggerModal","moudleId","event","selectedChange","arrColumns","onCloseModel","tableModelConfirm","oldLen","getSelectedRows","newLen","getCache","updateTableDataByIndexs","document","getElementsByTagName","style","overflow","warn","removeEmptyRows","keys","addIndex","getVisibleRows","addTableRow","type","user","EditTable","pageInfoChange","onPageInfoChange","pkname","crossPageSelect","pks","splitPks","Number","size","start","push","onAllCheckChange","onSelectedAll","setRowsSelected","getData","setCrossPage","onCheckChange","isUnique","onSelected","getTrueRowIndex","crossPageSelectIndex","clear","changeCrossSelect","_setSelect","undefined","Set","forEach","pk","has","add","sortChange","sortParam","sortData","sortObj","getViewMeta","field","handleSortcolumns","invisibleData","setData","getColSettiongParam","getMeta","currentMeta","getConfig","appcode","pageTo","getAppCode","pagecode","getPageCode","templateCode","pageid","areaCode","areaId","oid","noColSetClass","colSetCallback","hiddenLeftItem","updateColumnAfterSetting","newColumn","finalColumn","sortIndexArr","sortObjArr","map","newItem","oldItem","width","islock","visible","sort","a","b","setState","contextMenuClick","btnCode","execCommandCopy","insertNum","isHotKey","rightMenuClick","onBatchChange","getRowOldValue","insertRowsAfterIndex","editCode","copyCode","includes","fill","activeHeads","arrayMeta","getArrayMeta","activedCells","selectedRows","getRows","isEllipsis","afterLangload","getMultiLang","json","forceUpdate","nextState","editTableComponentUpdate","onBatchSelected","row","saga_status","editType","autoAddRow","bodyDisplayInRow","lazyload","rowClassName","hideBrowseCheckbox","showCheck","showIndex","high_filter","handleFilterCallBack","handleResetCallBack","high_selectable","showPagination","onRowClick","onChange","onRowDoubleClick","onCellHyperlinkTo","showTotal","noTotalRows","noTotalCol","allowTotalRows","cancelCustomRightMenu","addBlankCol","showWidthAndHeightConfig","multipleRowCell","otherAreaHeight","focusIndex","foldCacheId","hideRightMenu","isSort","others","setSelectedIndex","getRowKeyValue","hasSelected","getCellProps","setCellProps","setCellValue","getCellValue","enable","filterData","customColData","metaName","backSort","isTotal","colSettingParam","isBatchSelect","selectCell","data-uuid","cardType","params","triggerType","format","isMultiSelectedEnabled","maxlength","target","isFlag","addEventListener","defaultValue","loginCode","getLangCode","loginIndex","languageMeta","find","languageCode","loginValue","current","trim","open","isEdit","next","saveRowOldValue","viewLen","isSwitch_browseDisabled","disabled","validValue","isEmpty","tableStatus","enabled","isAutoAddRow","onCellStatusChange","cell","oldColumn","onCellMouseDown","currentCls","reduce","ctrlKey","shiftKey","metaKey","isSelected","pattern","checkColConfig","totalConfig","numberPd","indexColConfig","alloweFilter","panelTitle","isReset","filteredRow","filteredRowKeyValues","columnStatus","filterItemList","afterFilterItemList","afterFilterFactors","setColumn","filterIndex","viewData","onHide","onSelect","activeSpecialCells","isBatch","pervActivedCells","showDrag","actived","leftLine","rightLine","topLine","bottomLine","query","oldActiveSpecialCells","unitActive","linkObjMeta","result","arr","prev","prevRowValues","nextRowValues","prevCol","nextCol","refresh","onDeSelect","deActiveCells","prevActiveCells","prevActiveCellsObj","prevActiveCellsArr","getPrevSelector","prevSelector","onClearData","activeCells","getColumn","pasteContent","activeCellValue","isDisplay","fieldDisplayed","high_hotkey","excelConfig","foldingRowChange","contextMenuConfig","showBusinessBtn","showPasteBtn","autoAffixScroll","colsSettingParam","updateColumnHandle","BaseComponent","displayName","useEditTable"],"mappings":"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","file":"edit-table/index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"@platform/table-core/index\"), require(\"@platform/template/index\"), require(\"@platform/form/index\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"@platform/api/index\", \"@platform/base/index\", \"@platform/table-core/index\", \"@platform/template/index\", \"@platform/form/index\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@platform/edit-table/index\"] = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"@platform/table-core/index\"), require(\"@platform/template/index\"), require(\"@platform/form/index\"));\n\telse\n\t\troot[\"@platform/edit-table/index\"] = factory(root[\"React\"], root[\"@platform/api/index\"], root[\"@platform/base/index\"], root[\"@platform/table-core/index\"], root[\"@platform/template/index\"], root[\"@platform/form/index\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__8__, __WEBPACK_EXTERNAL_MODULE__11__, __WEBPACK_EXTERNAL_MODULE__42__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../platform/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1899);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","/*\r\n * @Descripttion: 数据源  状态\r\n * @version: \r\n * @Author: bbq\r\n * @Date: 2020-05-29 10:59:26\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2021-01-29 12:29:15\r\n */\r\n\r\nimport { hookFactory } from '@platform/template';\r\nimport { utils, EditTableStore } from '@platform/table-core';\r\nconst { uuidv4, isWrong, getPageSizeStorage } = utils;\r\n\r\nclass MetaStore extends EditTableStore {\r\n    constructor(props) {\r\n        super(props);\r\n        this.uuid = uuidv4();\r\n        // this.name = 'EditTableStore';\r\n        // 合并一下属性  不然会导致  get 方法取不到值 by bbqin\r\n        this.store = {\r\n            ...this.store,\r\n            allpks: [],\r\n            alltss: [],\r\n            sideBoxConfig: {\r\n                show: false,\r\n                // 就是行的record\r\n                record: {},\r\n                operateType: 'add',\r\n            },\r\n            pageInfo: {\r\n                //pageSize: '10',\r\n                pageIndex: '1',\r\n                total: '0',\r\n                totalPage: '1',\r\n            },\r\n            activeCell: null,\r\n        };\r\n    }\r\n\r\n    /*-------------列-------------*/\r\n    /**\r\n    * @description: 设置所有meta\r\n    * @param {type} \r\n    * @return: \r\n    */\r\n    setMeta(meta, id, shouldForceUpdate = true) {\r\n        id = id || this.getStore('name');\r\n        let status = this.getTableProps('status');\r\n\r\n        // meta上的状态值更新一次 后面都用内部的状态 但是这样也是有BUG的\r\n        if (meta[id] && meta[id].status && !this.isUpdateMetaStatus) {\r\n            status = meta[id].status || status || 'borwse';\r\n            this.isUpdateMetaStatus = true;\r\n        }\r\n\r\n        this.setTableProps('status', status, false);\r\n        // console.log('setMeta');\r\n        super.setMeta(meta, id, shouldForceUpdate);\r\n    }\r\n\r\n    setTableProps(key, value, shouldForceUpdate = true, callback) {\r\n        // 如果meta上的状态  还没有设置  setTableProps 已经执行  则设置已经更新\r\n        if (key === 'status' && !this.isUpdateMetaStatus) {\r\n            this.tableStatusIsUpdate = true;\r\n        }\r\n        // 拦截处理下特殊情况\r\n        super.setTableProps(key, value, shouldForceUpdate, callback);\r\n    }\r\n\r\n    /*-------------缓存-------------*/\r\n    /*-------------私有-------------*/\r\n    /*-------------列-------------*/\r\n    /*-------------单元格-------------*/\r\n    /*-------------行-------------*/\r\n    /*-------------表格-------------*/\r\n    /*-------------高阶组件-------------*/\r\n\r\n    /**\r\n     * @description: 获取分页信息\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    getPageInfo() {\r\n        // console.log(this.get(['pageInfo']));\r\n        let prePageSize = getPageSizeStorage(this.getStore(['meta']), this.getStore('name'));\r\n        let pageInfo = this.getStore(['pageInfo']);\r\n        if (!pageInfo.pageSize) {\r\n            pageInfo.pageSize = prePageSize;\r\n        }\r\n        return pageInfo;\r\n    }\r\n\r\n    /**\r\n     * @description: 設置分页信息\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    setPageInfo({ shouldForceUpdate = true, pageInfo = {} }) {\r\n        let prevPageInfo = this.get(['pageInfo']) || {};\r\n        prevPageInfo = { ...prevPageInfo, ...pageInfo }\r\n        // console.log(prevPageInfo);\r\n        return this.setStore(['pageInfo'], prevPageInfo, shouldForceUpdate);\r\n    }\r\n\r\n    /**\r\n     * @description: 设置表格数据\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    setTableData(data = {}, { isCache = true, isTop = false, shouldForceUpdate = true } = {}) {\r\n        let prePageSize = getPageSizeStorage(this.getStore(['meta']), this.getStore('name'));\r\n        // TODO pageInfo\r\n        let allpks = this.getStore(['allpks']);\r\n        let alltss = this.getStore(['alltss'])\r\n        // 设置分页相关数据\r\n        if (data.hasOwnProperty('pageInfo') && !isWrong(data.pageInfo)) {\r\n            // 前端重置后端返回的页码，初次为0，应该改为1，有问题在看看\r\n            data.pageInfo.pageIndex === '0' ? (data.pageInfo.pageIndex = '1') : '';\r\n        } else if (data.rows.length === 0) {\r\n            data.pageInfo = {\r\n                pageSize: prePageSize,\r\n                pageIndex: '1',\r\n                total: '0',\r\n                totalPage: '1',\r\n            };\r\n        } else {\r\n\r\n            if (this && Array.isArray(allpks) && allpks.length > 0) {\r\n                data.pageInfo = this.getPageInfo();\r\n            } else {\r\n                data.pageInfo = {\r\n                    pageSize: prePageSize,\r\n                    pageIndex: '1',\r\n                };\r\n            }\r\n        }\r\n\r\n        // 设置分页\r\n        this.setPageInfo({ shouldForceUpdate: false, pageInfo: data.pageInfo })\r\n\r\n        // 设置分页的allpks\r\n        if (data.hasOwnProperty('allpks')) {\r\n            this.setStore(['allpks'], data.allpks || allpks || [], false);\r\n        } else if (data.rows.length === 0) {\r\n            this.setStore(['allpks'], [], false);\r\n        } else {\r\n            this.setStore(['allpks'], allpks || [], false);\r\n        }\r\n\r\n        if (data.hasOwnProperty('alltss')) {\r\n            this.setStore(['alltss'], data.alltss || alltss || [], false);\r\n        } else if (data.rows.length === 0) {\r\n            this.setStore(['alltss'], [], false);\r\n        } else {\r\n            this.setStore(['alltss'], alltss || [], false);\r\n        }\r\n\r\n        data = super.setTableData(data, { isCache, isTop, shouldForceUpdate });\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @description: 设置表格状态\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    setTableStatus(status, { shouldForceUpdate = true } = {}) {\r\n        super.setTableStatus(status, { shouldForceUpdate });\r\n    }\r\n\r\n    /**\r\n     * @description: 删除表格行\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    deleteTableRows({ rowKeyValues, rowIndexs }, thorough, shouldForceUpdate) {\r\n        let delItems = super.deleteTableRows({ rowKeyValues, rowIndexs }, thorough, shouldForceUpdate);\r\n        let pageInfo = this.getPageInfo();\r\n        // 这里为了过滤delete之后\r\n        pageInfo && (pageInfo.total -= delItems.length);\r\n        this.setPageInfo({ shouldForceUpdate: false, pageInfo });\r\n        // 处理删除后的勾选逻辑\r\n        let visibleRows = this.getViewData();\r\n        let checkInfo = this.getCheckInfo() || {};\r\n        if (!visibleRows.length) {\r\n            checkInfo.checkedAll = false;\r\n            checkInfo.indeterminate = false;\r\n        } else {\r\n            checkInfo.indeterminate = visibleRows.some(item => !!item.selected);\r\n            checkInfo.checkedAll = visibleRows.every(item => !!item.selected);\r\n        }\r\n\r\n        // 更新\r\n        this.setCheckInfo({ checkInfo, shouldForceUpdate });\r\n\r\n        return delItems;\r\n    }\r\n    // liumings\r\n    getActiveCell = () => {\r\n        return this.getStore(['activeCell']);\r\n    }\r\n    //liumings\r\n    setActiveCell = (param, shouldForceUpdate = false) => {\r\n        this.setStore(['activeCell'], param, shouldForceUpdate);\r\n\r\n    }\r\n    /**\r\n     * @description: 钩子\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    getHooks = () => {\r\n        // console.log(this, super.getHooks());\r\n        // console.log(this);\r\n\r\n        return {\r\n            ...this.getTableHooks(),\r\n            getPageInfo: this.getPageInfo.bind(this),\r\n            setPageInfo: this.setPageInfo.bind(this),\r\n            setTableData: this.setTableData.bind(this),\r\n            setTableStatus: this.setTableStatus.bind(this),\r\n            deleteTableRows: this.deleteTableRows.bind(this),\r\n            getActiveCell: this.getActiveCell.bind(this),\r\n            setActiveCell: this.setActiveCell.bind(this),\r\n            setTableProps: this.setTableProps.bind(this),\r\n            // TODO\r\n        };\r\n    };\r\n}\r\n\r\nexport default hookFactory(MetaStore);","import React, { Component } from 'react';\r\nimport { Button } from '@platform/base';\r\nimport { getSysFieldid } from '@platform/api';\r\nimport { utils } from '@platform/table-core';\r\nimport Form from '@platform/form';\r\nconst { isFunction, isArray, isObject, isBoolean, uuidv4 } = utils;\r\nrequire('./index.less');\r\n\r\nexport default class TableSideBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.uuid = uuidv4() || 'editTableSideBox';\r\n        this.state = {\r\n            index: this.props.index,\r\n            buttonDisabled: [],\r\n        };\r\n        this.formStore = Form.useForm();\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { columns = [], operateType, record, renderItems = {} } = this.props;\r\n        columns = columns.filter(column => {\r\n            // 默认设置下renderStatus\r\n            if (column.render && column.itemtype !== 'customer') {\r\n                column.renderStatus = column.renderStatus || 'edit';\r\n            }\r\n            return column.itemtype !== 'customer';\r\n        })\r\n        // console.log(columns);\r\n        const meta = {\r\n            [this.uuid]: {\r\n                status: operateType === 'edit' || operateType === 'add' ? 'edit' : 'browse',\r\n                items: columns,\r\n                moduletype: \"form\",\r\n                //\"status\":\"edit\",\r\n                code: \"head\",\r\n                name: \"侧拉表单\",\r\n                isunfold: false,\r\n            },\r\n        }\r\n        this.formStore.setMeta(meta, this.uuid);\r\n\r\n        for (const key in renderItems) {\r\n            this.formStore.replaceItem(key, renderItems[key]);\r\n        }\r\n\r\n        let formValue = record.values || {};\r\n        this.formStore.setStatus(operateType === 'edit' || operateType === 'add' ? 'edit' : 'browse');\r\n        this.formStore.setAllFormValue(formValue);\r\n        console.log(this.formStore, renderItems, formValue);\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        let { operateType, record } = nextProps;\r\n\r\n        let formValue = record.values || {};\r\n        this.formStore.setStatus(operateType === 'edit' || operateType === 'add' ? 'edit' : 'browse');\r\n        this.formStore.setAllFormValue(formValue);\r\n        console.log(this.formStore, formValue);\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            langJson = {},\r\n            onClose,\r\n            status = false,\r\n            fieldid,\r\n            operateType,\r\n            onCancel,\r\n            onSure,\r\n            onAdd,\r\n            tableId,\r\n            record,\r\n            onBeforeEvent,\r\n            onAfterEvent,\r\n\r\n            model,\r\n            origin,\r\n            renderItems,\r\n            pageScope,\r\n\r\n            value,\r\n            scale,\r\n            tableScope = {},\r\n            modelIndex,\r\n            diabled,\r\n\r\n            edittable_dom,\r\n        } = this.props;\r\n\r\n        const animation = (status => {\r\n            let usual = {\r\n                mask: 'edit-table-modal-mask ',\r\n                dialog: 'edit-table-modal-dialog ',\r\n            };\r\n            switch (status) {\r\n                case 'origin':\r\n                    return usual;\r\n                case 'open':\r\n                    usual.mask += ' fadeIn';\r\n                    usual.dialog += ' slideInRight';\r\n                    break;\r\n                case 'close':\r\n                    usual.mask += ' fadeOut';\r\n                    usual.dialog += ' slideOutRight';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return usual;\r\n        })(status);\r\n\r\n        const mask = animation.mask;\r\n        const dialog = animation.dialog;\r\n\r\n        return (<section className=\"edit-table-modal disabled-bg-btn\" fieldid={getSysFieldid(`${fieldid || tableId}_modal-area`)}>\r\n            <div\r\n                className={mask}\r\n                onClick={e => {\r\n                    onClose && onClose(e);\r\n                }}\r\n            />\r\n            <div className={dialog}>\r\n                <div className=\"edit-table-modal-header cf disabled-bg-btn\">\r\n                    <div\r\n                        className=\"fl u-modal-title\"\r\n                        fieldid={getSysFieldid(`${operateType === 'add' ? langJson['table_add'] : langJson['table_change']}_title`)}\r\n                    >\r\n                        {' '}\r\n                        {operateType === 'add' ? langJson['table_add'] : langJson['table_change']}\r\n                    </div>\r\n                    <span\r\n                        className=\"icon iconfont icon-you icon-celashouqi fr\"\r\n                        onClick={e => {\r\n                            onClose && onClose(e);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"edit-table-modal-body\" fieldid={getSysFieldid(`${fieldid || tableId}_form-area`)} id=\"tableModal\">\r\n                    {/* 使用表单创建侧拉表头 */}\r\n                    <div fieldid={getSysFieldid(`${tableId}_form-area`)}>\r\n                        <Form\r\n                            // meta={this.formMeta}\r\n                            name={this.uuid}\r\n                            //status={status}\r\n                            config={{\r\n                                onAfterEvent,\r\n                                onBeforeEvent,\r\n                            }}\r\n                            store={this.formStore}\r\n                        //init={}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"edit-table-modal-footer cf\" fieldid={getSysFieldid('bottom-area')}>\r\n                    <Button\r\n                        className=\" fr\"\r\n                        onClick={e => {\r\n                            onCancel && onCancel(e);\r\n                        }}\r\n                    // shape=\"border\"\r\n                    >\r\n                        {langJson['table_cancel']}\r\n                    </Button>\r\n                    <Button\r\n                        className=\"u-button-primary fr\"\r\n                        onClick={e => {\r\n                            onSure && onSure(e);\r\n                        }}\r\n                    >\r\n                        {langJson['table_ok']}\r\n                    </Button>\r\n                    {operateType === 'add' && (\r\n                        <Button\r\n                            className=\"u-button-primary fr\"\r\n                            onClick={(e) => {\r\n                                onAdd && onAdd(e);\r\n                            }}\r\n                        >\r\n                            {langJson['table_save_add']}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </section>);\r\n    }\r\n}\r\n","/*\r\n * @Descripttion: 侧拉弹窗\r\n * @version: \r\n * @Author: bbq\r\n * @Date: 2020-09-15 16:32:08\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2020-12-02 16:55:24\r\n */\r\n\r\nimport React, { Component, Fragment } from 'react';\r\n\r\nimport { utils, CONFIG } from '@platform/table-core';\r\nconst { isFunction } = utils;\r\n\r\nimport SideBox from './index';\r\nconst { ROW_STATUS } = CONFIG;\r\n\r\n/**\r\n* 弹窗逻辑处理\r\n* @param {*} Table \r\n*/\r\nexport default function hotkey(Table) {\r\n    if (!Table) {\r\n        console.error('缺少Table组件');\r\n    }\r\n    return class MetaTable extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n            // this.state = { show: false };\r\n        }\r\n\r\n        //表单编辑后，保存表单数据到子表行\r\n        onAfterEvent = prams => {\r\n            let { attrcode, curMetaItem, value, oldValue, allValue, componentValue } = prams;\r\n\r\n            let { high_sidebox, onAfterEvent, tableId, rowKey } = this.props;\r\n\r\n            let { store } = high_sidebox;\r\n            let sideBoxConfig = store.getStore('sideBoxConfig') || {};\r\n            let { index, record = {} } = sideBoxConfig;\r\n\r\n            record.values = allValue;\r\n\r\n            sideBoxConfig = { ...sideBoxConfig };\r\n            store.setStore('sideBoxConfig', sideBoxConfig, false);\r\n\r\n            // 更新下行状态\r\n            if (curMetaItem.itemtype !== 'residtxt') {\r\n                // let isMulti = curMetaItem.isMultiSelectedEnabled;\r\n                store.setCache('oldBatchData', {\r\n                    // TODO  转换为过滤后的index\r\n                    // 在onchange时缓存列数据的key 和value  用于批量更改   zhanghengh 18/6/29\r\n                    batchChangeIndex: sideBoxConfig.index,\r\n                    batchChangeKey: curMetaItem.attrcode,\r\n                    batchChangeValue: value.value,\r\n                    batchChangeDisplay: value.display,\r\n                    // batchChangeValue: isMulti ? theValue : theValue.value,\r\n                    // batchChangeDisplay: isMulti ? null : theValue.display\r\n                });\r\n            } else {\r\n                // 多语批改\r\n                store.setCache('oldBatchData', {\r\n                    batchChangeIndex: sideBoxConfig.index,\r\n                    batchChangeKey: curMetaItem.attrcode,\r\n                    batchChangeValue: value.value,\r\n                    batchChangeDisplay: null,\r\n                });\r\n            }\r\n\r\n            // 编辑关联项  放在 onAfterEvent 中\r\n\r\n            // 把status置为1，标识修改     状态不为1的不动 (比如用户自己set但是状态为2的)\r\n            let rowKeyValue = record[rowKey];\r\n            let rowStatus = store.getRowProps({ rowKeyValue }, 'status');\r\n            if (rowStatus == ROW_STATUS.origin) {\r\n                store.setRowProps({ rowKeyValue }, { status: ROW_STATUS.edit }, false);\r\n            }\r\n\r\n            // 根据rowid 更新表格数据\r\n            store.setRows({ rows: [record] });\r\n\r\n            isFunction(onAfterEvent) &&\r\n                onAfterEvent({\r\n                    tableId: tableId,\r\n                    record: record,\r\n                    rowKey,\r\n                    rowKeyValue,\r\n                    rowIndex: index,\r\n                    attrcode: attrcode,\r\n                    value: value,\r\n                    oldValue: oldValue,\r\n                    componentValue: componentValue,\r\n                    //event,\r\n                    column: curMetaItem,\r\n                    //triggerType\r\n                    isTriggerModal: true,\r\n                }, store);\r\n        };\r\n\r\n        onBeforeEvent = async (moudleId, attrcode, value, values, column, event) => {\r\n            let { high_sidebox, tableId, onBeforeEvent, rowKey } = this.props;\r\n\r\n            let { store } = high_sidebox;\r\n            let sideBoxConfig = store.getStore('sideBoxConfig') || {};\r\n            let { index, record = {} } = sideBoxConfig;\r\n\r\n            // 越过hotkey 组件里的逻辑\r\n            // event.target.ncExecuteFocus = true;\r\n\r\n            if (isFunction(onBeforeEvent)) {\r\n                // console.log(\"record\", record)\r\n                return (await onBeforeEvent({\r\n                    tableId: tableId,\r\n                    record: record,\r\n                    rowKey,\r\n                    rowKeyValue: record[rowKey],\r\n                    rowIndex: index,\r\n                    attrcode: attrcode,\r\n                    value: value,\r\n                    event,\r\n                    column,\r\n                    //triggerType\r\n                    isTriggerModal: true,\r\n                })) !== false;\r\n            } else {\r\n                return true;\r\n            }\r\n        };\r\n\r\n        render() {\r\n            let { high_sidebox, selectedChange, rowKey, renderItems } = this.props;\r\n            let {\r\n                langJson, sideBoxConfig = {}, tableId, arrColumns,\r\n                fieldid, onCloseModel, tableModelConfirm, store,\r\n            } = high_sidebox;\r\n            let { index, operateType, record, show = false } = sideBoxConfig;\r\n\r\n            // console.log(sideBoxConfig);\r\n\r\n            return <Fragment>\r\n                {\r\n                    show && <SideBox\r\n                        langJson={langJson}\r\n                        rowKey={rowKey}\r\n                        fieldid={fieldid}\r\n                        columns={arrColumns}\r\n                        renderItems={renderItems}\r\n                        tableId={tableId}\r\n                        onBeforeEvent={this.onBeforeEvent}\r\n                        onAfterEvent={this.onAfterEvent}\r\n                        onClose={(e) => {\r\n                            // console.log('close');\r\n                            let sideBoxConfig = store.getStore('sideBoxConfig') || {};\r\n                            sideBoxConfig = { ...sideBoxConfig, show: false };\r\n                            store.setStore('sideBoxConfig', sideBoxConfig);\r\n                        }}\r\n                        onCancel={(e) => {\r\n                            if (operateType === 'add') {\r\n                                const oldLen = store.getSelectedRows().length;\r\n                                store.deleteTableRows({ rowIndexs: index });\r\n                                const newLen = store.getSelectedRows().length;\r\n                                isFunction(selectedChange) && selectedChange(tableId, newLen, oldLen)\r\n                            } else if (operateType === 'edit') {\r\n                                const data = store.getCache(['beforeEdit']) || { rows: [] };\r\n                                const record = data.rows[index] || {};\r\n                                store.updateTableDataByIndexs([{ index, data: record }]);\r\n                            }\r\n\r\n                            // 关闭弹窗\r\n                            let sideBoxConfig = store.getStore('sideBoxConfig') || {};\r\n                            sideBoxConfig = { ...sideBoxConfig, show: false, status: 'close' };\r\n                            store.setStore('sideBoxConfig', sideBoxConfig);\r\n\r\n                            //弹出之后，禁止后面的滚动事件\r\n                            let html = document.getElementsByTagName('html');\r\n                            html[0].style.overflow = '';\r\n\r\n                            // record 就是record\r\n                            isFunction(onCloseModel) ? onCloseModel(record) : function () {\r\n                                console.warn('请传入关闭窗口函数');\r\n                                return false;\r\n                            };\r\n                        }}\r\n                        onSure={(e) => {\r\n                            // 关闭弹窗\r\n                            let sideBoxConfig = store.getStore('sideBoxConfig') || {};\r\n                            sideBoxConfig = { ...sideBoxConfig, show: false, status: 'close' };\r\n                            store.setStore('sideBoxConfig', sideBoxConfig);\r\n\r\n                            //弹出之后，禁止后面的滚动事件\r\n                            let html = document.getElementsByTagName('html');\r\n                            html[0].style.overflow = '';\r\n\r\n                            // record 就是record\r\n                            isFunction(tableModelConfirm) ? tableModelConfirm(record) : console.warn('请传入关闭窗口函数');\r\n                        }}\r\n                        onAdd={(e) => {\r\n                            store.removeEmptyRows({ keys: [] });\r\n                            let sideBoxConfig = store.getStore('sideBoxConfig') || {};\r\n                            sideBoxConfig = { ...sideBoxConfig, show: true };\r\n\r\n                            sideBoxConfig.operateType = 'add';\r\n                            sideBoxConfig.status = 'open';\r\n                            let addIndex = store.getVisibleRows(false, false).length;\r\n                            let record = store.addTableRow(addIndex, {}, false);\r\n                            sideBoxConfig.record = record;\r\n\r\n                            //         // 自动聚焦\r\n                            //         if (autoFocus == true) {\r\n                            //             let items = this.state.meta[tableId].items;\r\n                            //             for (let i = 0; i < items.length; i++) {\r\n                            //                 if (\r\n                            //                     items[i].attrcode != 'numberindex' &&\r\n                            //                     (typeof items[i].disabled == 'undefined' || items[i].disabled == false) &&\r\n                            //                     (typeof items[i].visible != 'undefined' && items[i].visible == true)\r\n                            //                 ) {\r\n                            //                     rows[addIndex].values[items[i].attrcode].isEdit = true;\r\n                            //                     break;\r\n                            //                 }\r\n                            //             }\r\n                            //         }\r\n\r\n                            store.setStore('sideBoxConfig', sideBoxConfig);\r\n                        }}\r\n                        {...sideBoxConfig}\r\n                    />\r\n                }\r\n                <Table\r\n                    {...this.props}\r\n                />\r\n            </Fragment>\r\n        }\r\n    }\r\n}","/*\r\n * @Descripttion: \r\n * @version: 0.0\r\n * @Author: bbq\r\n * @Date: 2020-05-29 11:00:29\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2021-03-05 13:58:48\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport { utils, CONFIG, lib, handleSortcolumns } from '@platform/table-core';\r\nimport { BaseComponent } from '@platform/template';\r\nimport useEditTable from './store';\r\nimport { getSysFieldid, getLangCode, getMultiLang, pageTo } from \"@platform/api\";\r\nimport { Table } from '@platform/base';\r\nimport sidebox from './components/SideBox/hoc';\r\n\r\nconst { formatColumn, hotkey, pagination, selectRow, indexCol, checkCol, errorCol, filter, selectable, excel, total, columnSort, contextMenu } = lib;\r\nconst { uuidv4, excelPackageData, isString, isFunction, isArray, isObject, isEmptyValue, polymerizeComponents, isUndefined, warningOnce, getMetaIsTotal, setPageSizeStorage } = utils;\r\nconst { ROW_STATUS } = CONFIG;\r\n// selectRow(pagination(formatColumn(Table)))\r\nconst MetaTable = polymerizeComponents(\r\n    Table,\r\n    // 高阶组件是有顺序的\r\n    [\r\n        columnSort,\r\n        formatColumn,\r\n        // 不然操作列  checkbox 列会显示在侧拉内部\r\n        sidebox,\r\n        total,\r\n        pagination,\r\n        selectRow,\r\n        errorCol,\r\n        checkCol,\r\n        indexCol,\r\n        filter,\r\n        selectable,\r\n        excel,\r\n        hotkey,\r\n        contextMenu,\r\n\r\n    ],\r\n    {\r\n        name: 'editTable',\r\n        type: 'hoc',\r\n        user: 'platform',\r\n    });\r\n\r\nrequire('./index.less');\r\n\r\nexport default class EditTable extends BaseComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let { store, tableId, rowKey = 'rowid', status } = props;\r\n        this.state = { isEllipsis: true, key: 1 };\r\n        // 设置一些属性\r\n        store.setTableProps('rowKey', rowKey, false);\r\n        // rowKey 更新之后要更新  数据不然会导致数据报错\r\n        // store.setData(store.getData(), false);\r\n        store.setTableProps('status', status || store.getTableProps('status') || 'browse', false);\r\n        store.setStore('name', tableId, false);\r\n\r\n        this.uuid = uuidv4();\r\n        typeof window === 'object' && (window[this.uuid] = store);\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        let { store, afterLangload } = this.props;\r\n\r\n        let { setCache } = store;\r\n\r\n        //加载多语\r\n        let callback = json => {\r\n            // this.setState({ json });\r\n            setCache('langJson', json || {});\r\n            // console.log(store.getCache('langJson'))\r\n            // 备份一份到全局\r\n            afterLangload && afterLangload(json, store);\r\n\r\n            // 强制更新一次\r\n            this.forceUpdate();\r\n        };\r\n        getMultiLang({ moduleId: \"page_table\", callback });\r\n    }\r\n\r\n    componentDidUpdate(nextProps, nextState) {\r\n        let { editTableComponentUpdate } = this.props;\r\n        editTableComponentUpdate && editTableComponentUpdate(this.props);\r\n    }\r\n\r\n    pageInfoChange = value => {\r\n        const { onPageInfoChange, store, pkname, crossPageSelect, tableId } = this.props\r\n        let pageInfo = store.getPageInfo();\r\n        pageInfo = { ...pageInfo, ...(value || {}) }\r\n        let allpks = store.getStore(['allpks']);\r\n\r\n        setPageSizeStorage(store.getStore(['meta']), tableId, pageInfo.pageSize);\r\n\r\n        store.setPageInfo({ pageInfo });\r\n        let pks = this.splitPks(allpks, pageInfo.pageIndex, pageInfo.pageSize);\r\n        console.log(pks, value);\r\n        isFunction(onPageInfoChange) && onPageInfoChange(pks, pageInfo.total)\r\n    }\r\n\r\n    // 分割分页id\r\n    splitPks = (data, pageIndex, pageSize) => {\r\n        if (data.length <= pageSize) {\r\n            // 这里暂时解决问题，后续在进行优化\r\n            return data;\r\n        }\r\n        let pks = [];\r\n        let index = Number(pageIndex);\r\n        let size = Number(pageSize);\r\n        let start = (index - 1) * size;\r\n        for (let i = start; i < start + size; i++) {\r\n            if (data[i]) {\r\n                pks.push(data[i]);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return pks;\r\n    }\r\n\r\n    onAllCheckChange = value => {\r\n        let { store, selectedChange, onSelectedAll, tableId, crossPageSelect, pkname } = this.props;\r\n        let { setRowsSelected, getSelectedRows, getCheckInfo, getData, setCrossPage } = store;\r\n        let { checkedAll } = getCheckInfo() || {};\r\n        let oldLen = getSelectedRows().length;\r\n        checkedAll = !checkedAll;\r\n\r\n        setRowsSelected({}, checkedAll, true);\r\n        // 跨页全选\r\n        if (crossPageSelect && pkname) {\r\n            let rows = getData()\r\n            setCrossPage(rows, pkname, value)\r\n        }\r\n        let newLen = getSelectedRows().length;\r\n\r\n        isFunction(onSelectedAll) && onSelectedAll(tableId, checkedAll, getData().length);\r\n        isFunction(selectedChange) && selectedChange(tableId, newLen, oldLen)\r\n    }\r\n\r\n    // 框选等操作\r\n    onBatchSelected(rows = [], hotkey) {\r\n        let { onBatchSelected, store, crossPageSelect, pkname } = this.props\r\n        let { getTableProps, setRowsSelected, getRowProps, getSelectedRows, setTableProps, getTrueRowIndex, setCrossPage } = store;\r\n        let rowKey = getTableProps('rowKey');\r\n\r\n        // 清空所有\r\n        setRowsSelected({}, false, false);\r\n\r\n        rows.forEach(row => {\r\n            let rowKeyValue = row[rowKey];\r\n            let selected = !getRowProps({ rowKeyValue }, 'selected');\r\n\r\n            let values = row.values || row,\r\n                isSagaStatus = values && values.saga_status && values.saga_status.value === '1';\r\n            // 错误行禁用\r\n            if (isSagaStatus) {\r\n                return;\r\n            }\r\n\r\n            // 跨页全选\r\n            if (crossPageSelect && pkname) {\r\n                setCrossPage(row, pkname, selected);\r\n            }\r\n\r\n            setRowsSelected({ rowKeyValues: rowKeyValue }, selected, false);\r\n\r\n            // setTableProps('currentIndex', getTrueRowIndex({ rowKeyValue }), false);\r\n        });\r\n        // 更新\r\n        this.forceUpdate && this.forceUpdate();\r\n        // console.log(rows);\r\n        onBatchSelected && onBatchSelected(rows)\r\n    }\r\n\r\n    onCheckChange = (record, index, isUnique = false) => {\r\n        let { selectedChange, onSelected, tableId, store, crossPageSelect, pkname } = this.props\r\n        let { getTableProps, setRowsSelected, getRowProps, getSelectedRows, setTableProps, getTrueRowIndex, setCrossPage, getStore } = store;\r\n        const { checkInfo } = getStore()\r\n        let { crossPageSelectIndex } = checkInfo\r\n        let rowKey = getTableProps('rowKey');\r\n        let rowKeyValue = record[rowKey];\r\n        let selected = !getRowProps({ rowKeyValue }, 'selected');\r\n        let oldLen = getSelectedRows().length;\r\n        // 跨页全选\r\n        if (crossPageSelect && pkname) {\r\n            if (isUnique) {\r\n                crossPageSelectIndex.clear()\r\n            }\r\n            setCrossPage(record, pkname, selected)\r\n        }\r\n\r\n        if (isUnique) { // 清理所有\r\n            setRowsSelected({}, false, false);\r\n            // 跨页全选会影响这里 TODO\r\n        }\r\n\r\n        // 特殊情况 如果当前选择 选择行时 依然选中\r\n        if (!selected && isUnique && oldLen > 1) {\r\n            selected = true;\r\n        }\r\n\r\n        setRowsSelected({ rowKeyValues: rowKeyValue }, selected);\r\n\r\n        setTableProps('currentIndex', selected ? getTrueRowIndex({ rowIndex: index }) : -1, false);\r\n\r\n        let newLen = getSelectedRows().length;\r\n        // 选中选项的回调函数\r\n        isFunction(onSelected) && onSelected(tableId, record, selected, index, isUnique);\r\n        isFunction(selectedChange) && selectedChange(tableId, newLen, oldLen)\r\n    }\r\n\r\n    changeCrossSelect = value => {\r\n        const { store, pkname, selectedChange, tableId } = this.props;\r\n        const { getStore, setStore, getData, _setSelect, setCrossPage } = store\r\n        const { checkInfo, allpks } = getStore()\r\n        let { crossPageSelectIndex } = checkInfo\r\n        if (!pkname) { warningOnce(false, `请配置pkname`); return }\r\n        let oldLen = crossPageSelectIndex.size\r\n        let rows = getData()\r\n        switch (value) {\r\n            case 'current':\r\n                _setSelect(undefined, 'all')\r\n                crossPageSelectIndex.clear()\r\n                setCrossPage(rows, pkname, true)\r\n                break;\r\n            case 'all':\r\n                _setSelect(undefined, 'allpage')\r\n                crossPageSelectIndex = new Set(allpks)\r\n                break;\r\n            case 'reverse':\r\n                _setSelect(undefined, 'reverse')\r\n                allpks.forEach(pk => {\r\n                    if (crossPageSelectIndex.has(pk)) {\r\n                        crossPageSelectIndex.delete(pk)\r\n                    } else {\r\n                        crossPageSelectIndex.add(pk)\r\n                    }\r\n                })\r\n        }\r\n        setStore(['checkInfo', 'crossPageSelectIndex'], crossPageSelectIndex)\r\n        let newLen = crossPageSelectIndex.size\r\n        isFunction(selectedChange) && selectedChange(tableId, newLen, oldLen)\r\n    }\r\n\r\n    sortChange = (sortParam, sortData) => {\r\n        let sortObj = {};\r\n        let { store, tableId } = this.props;\r\n        let { setStore, getViewMeta } = store;\r\n        /**\r\n         * 每次排序都存储新的排序信息\r\n         * 这是产品李聪慧让加的, 为了解决单据打印时，列表对中字段排序产生的问题\r\n         */\r\n        setStore(['sortParam'], {\r\n            mode: \"single\",\r\n            sortParam,\r\n        }, false);\r\n        sortParam.forEach(item => {\r\n            sortObj[item.field] = item;\r\n        });\r\n        // 处理排序多表头\r\n        handleSortcolumns({\r\n            columns: getViewMeta(tableId),\r\n            sortObj,\r\n        });\r\n\r\n        let invisibleData = store.getViewData('invisible') || [];\r\n\r\n        // console.log(invisibleData, 'invisibleDatainvisibleDatainvisibleDatainvisibleDatainvisibleDatainvisibleDatainvisibleData');\r\n\r\n        store.setData({ data: [...sortData, ...invisibleData] });\r\n    }\r\n    getColSettiongParam = () => {\r\n        let { store, tableId } = this.props\r\n        let meta = store.getMeta()\r\n        if (meta && meta[tableId]) {\r\n            let currentMeta = meta[tableId]\r\n            let config = store.getConfig()\r\n            return {\r\n                appcode: currentMeta.appcode || pageTo.getAppCode(),\r\n                pagecode: currentMeta.pagecode || pageTo.getPageCode(),\r\n                code: currentMeta.templateCode || meta.code,\r\n                pageid: currentMeta.pageid || meta.pageid,\r\n                areaCode: tableId,\r\n                areaId: currentMeta.oid,\r\n                noColSetClass: config.noColSetClass,\r\n                colSetCallback: config.colSetCallback,\r\n                hiddenLeftItem: config.hiddenLeftItem,\r\n            }\r\n        } else { return {} }\r\n    }\r\n    updateColumnAfterSetting = (newColumn, areaCode) => {\r\n        let { store } = this.props;\r\n        let { setMeta, getMeta } = store;\r\n        let meta = getMeta()\r\n        if (newColumn.length && areaCode) {\r\n            let finalColumn = [...meta[areaCode].items];\r\n\r\n            let sortIndexArr = [];\r\n            let sortObjArr = [];\r\n            newColumn.map(newItem => {\r\n                meta[areaCode].items.map((oldItem, index) => {\r\n                    if (newItem.attrcode === oldItem.attrcode) {\r\n                        oldItem.width = newItem.width;\r\n                        oldItem.islock = newItem.islock;\r\n                        oldItem.visible = newItem.visible;\r\n                        sortIndexArr.push(index);\r\n                        sortObjArr.push(oldItem);\r\n                    }\r\n                });\r\n            });\r\n            sortIndexArr.sort((a, b) => a - b);\r\n            sortIndexArr.map((item, index) => {\r\n                finalColumn[item] = sortObjArr[index];\r\n            });\r\n            meta[areaCode].items = finalColumn;\r\n            setMeta(meta, areaCode)\r\n            this.setState({ key: this.state.key + 1 })\r\n        }\r\n    }\r\n\r\n    //右键菜单点击函数\r\n    contextMenuClick = (btnCode, execCommandCopy, param, insertNum, rowIndex, isHotKey = false) => {\r\n        let { store, rightMenuClick, onBatchChange, langJson, tableId } = this.props;\r\n        let { getData, getRowOldValue, insertRowsAfterIndex, deleteTableRows } = store;\r\n        let editCode = [\"delete\", 'insert_up', 'insert_down'];\r\n        let copyCode = [\"copy\", \"copy-row\", \"copy-column\"]\r\n        switch (true) {\r\n            case editCode.includes(btnCode):\r\n                if (isFunction(rightMenuClick)) {\r\n                    //删行、插行、插行并粘贴等右键按钮需要业务适配\r\n                    if (btnCode === 'insert_up') {\r\n                        let rows = Array(insertNum).fill({ values: {} });\r\n                        insertRowsAfterIndex(rows, rowIndex - 1);\r\n                    }\r\n                    if (btnCode === 'insert_down') {\r\n                        let rows = Array(insertNum).fill({ values: {} });\r\n                        insertRowsAfterIndex(rows, rowIndex);\r\n                    }\r\n                    if (btnCode === 'delete') {\r\n                        deleteTableRows({ rowIndexs: rowIndex })\r\n                    }\r\n                    rightMenuClick(btnCode, insertNum, rowIndex);\r\n                }\r\n                break;\r\n            case copyCode.includes(btnCode):\r\n                //选中表头\r\n                let activeHeads = store.getCache('activeSpecialCells');\r\n                console.log(\"表头选中信息：\", activeHeads)\r\n                let arrayMeta = store.getArrayMeta(tableId);\r\n                let currentMeta = store.getViewMeta(tableId)\r\n                let activedCells = store.getCache(\"activedCells\");\r\n\r\n                // console.log(activedCells, activeHeads);\r\n                if (isHotKey && !activedCells && !activeHeads) {\r\n                    return;\r\n                }\r\n\r\n                let selectedRows = [];\r\n                if (btnCode === 'copy' || btnCode === 'copy-row') {\r\n                    selectedRows = store.getRows({ rowKeyValues: Object.keys(activedCells) });\r\n                } else if (btnCode === 'copy-column') {\r\n                    selectedRows = store.getData([ROW_STATUS.delete, ROW_STATUS.filter]);\r\n                }\r\n\r\n                isFunction(execCommandCopy) && execCommandCopy(activeHeads, currentMeta, activedCells, selectedRows, arrayMeta);\r\n                break;\r\n            case btnCode === \"paste\":\r\n                //调用复制粘贴回调事件\r\n                if (isFunction(onBatchChange)) {\r\n                    param = {\r\n                        ...param,\r\n                        langJson: langJson,\r\n                        rows: getData(),\r\n                        getRowOldValue: getRowOldValue,\r\n                        tableId: tableId,\r\n                    }\r\n                    let data = excelPackageData(param);\r\n                    onBatchChange(data);\r\n                }\r\n                break;\r\n            case btnCode === \"insert_paste\":\r\n                //插行并粘贴\r\n                if (isFunction(onBatchChange)) {\r\n                    let rows = Array(insertNum).fill({ values: {} });\r\n                    insertRowsAfterIndex(rows, rowIndex);\r\n                    //插入空行\r\n                    param = {\r\n                        ...param,\r\n                        langJson: this.props.langJson,\r\n                        rows: getData(),\r\n                        getRowOldValue: getRowOldValue,\r\n                        tableId: tableId,\r\n                    }\r\n                    let data = excelPackageData(param);\r\n                    onBatchChange(data);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let {\r\n            // 表格UE'\r\n            rowKey,\r\n            store,\r\n            status,\r\n            editType,\r\n            langJson = {},\r\n            autoAddRow = {},\r\n            tableId,\r\n            // tinper底层\r\n            bodyDisplayInRow,\r\n            lazyload = true,\r\n            columns,\r\n            rowClassName,\r\n            // 高阶组件\r\n            hideBrowseCheckbox,\r\n            showCheck, showIndex,\r\n            crossPageSelect,\r\n            high_filter = {},\r\n            handleFilterCallBack,\r\n            handleResetCallBack,\r\n            high_selectable = {},\r\n            onBatchSelected,\r\n            showPagination,\r\n            // 常见回调\r\n            onRowClick, onBeforeEvent, onAfterEvent, onChange, onRowDoubleClick,\r\n            // 弹窗\r\n            onCloseModel, fieldid, tableModelConfirm,\r\n            onCellHyperlinkTo,\r\n            showTotal, noTotalRows, noTotalCol, allowTotalRows, //合计行配置\r\n            onBatchChange,\r\n            noColSetClass, colSetCallback, cancelCustomRightMenu = false, //列设置\r\n            addBlankCol,\r\n            showWidthAndHeightConfig = true,\r\n            multipleRowCell, //折行\r\n            otherAreaHeight = 0, //高度自适应参数\r\n            rightMenuClick,\r\n            focusIndex,\r\n            foldCacheId, //对于没有appcode，pagecode..的表格，做折行缓存的标志\r\n            hideRightMenu = false,\r\n            isSort = true, \r\n            ...others\r\n        } = this.props;\r\n\r\n        const {\r\n            getMeta, getViewMeta,\r\n            getCache, getStore,\r\n            getData, getTableProps,\r\n            getViewData,\r\n            setTableProps,\r\n            getTrueRowIndex,\r\n            getRowKeyValue, setSelectedIndex, hasSelected,\r\n            getCellProps, setCellProps, setCellValue, getCellValue,\r\n            getPageInfo,\r\n            getCheckInfo,\r\n            getActiveCell, setActiveCell,\r\n        } = store;\r\n\r\n        if (hideRightMenu) {\r\n            cancelCustomRightMenu = true;\r\n            high_selectable.enable = false;\r\n            showWidthAndHeightConfig = false;\r\n        }\r\n\r\n        // 表格状态\r\n        status = getTableProps('status');\r\n        // 多语\r\n        langJson = getCache('langJson');\r\n        // console.log(langJson, 'langJsonlangJsonlangJsonlangJsonlangJson');\r\n        // rowKey\r\n        rowKey = getTableProps('rowKey');\r\n        // columns\r\n        columns = getViewMeta(tableId) || columns;\r\n        if (!columns || !columns.length) {\r\n            return null;\r\n        }\r\n        // arrcolumns\r\n        let arrColumns = store.getArrayMeta(tableId);\r\n        // data\r\n        let data = getData([ROW_STATUS.delete, ROW_STATUS.filter]);\r\n        // filterData\r\n        let filterData = getViewData('filter');\r\n        // \r\n        let customColData = getCache('customColData');\r\n        // metaName\r\n        let metaName = getStore(['meta', tableId, 'name']);\r\n        // console.log(metaName, getCheckInfo());\r\n        let backSort = store.getConfig().sort;\r\n        // console.log(getTableProps('rowKey'))\r\n        // 合计\r\n        let isTotal = showTotal || getMetaIsTotal(arrColumns);\r\n        // 列设置参数\r\n        let colSettingParam = this.getColSettiongParam();\r\n        // sidebox\r\n        const sideBoxConfig = getStore('sideBoxConfig') || {};\r\n        // focusInex\r\n        focusIndex = focusIndex || getTableProps('focusIndex');\r\n\r\n        // 默认开启 框选 high_selectable.enable\r\n        //high_selectable.enable = high_selectable.enable || true;\r\n\r\n        // 默认启用快捷键选中 只有快捷键选中行\r\n        if (isUndefined(high_selectable.enable)) {\r\n            high_selectable.enable = true;\r\n            // high_selectable.disabled = isUndefined(high_selectable.disabled) ? 'slide' :\r\n            //     (isArray(high_selectable.disabled) ? high_selectable.disabled : [high_selectable.disabled]);\r\n            // high_selectable.single = high_selectable.single || false;\r\n            // // 不开启\r\n            // high_selectable.selectCell = isUndefined(high_selectable.selectCell) ? false : high_selectable.selectCell;\r\n        }\r\n        // console.log(high_selectable);\r\n        // 是否框选(批选)\r\n        const isBatchSelect = isUndefined(high_selectable.selectCell) ? true : high_selectable.selectCell;\r\n\r\n        return <div\r\n            className=\"meta-table-wrapper edittable lightapp-component-editTable\"\r\n            data-uuid={this.uuid}\r\n        // fieldid={getSysFieldid(`${fieldid || tableId}_table`)}\r\n        // ref=\"table\"\r\n        >\r\n            <MetaTable\r\n                lazyload={lazyload}\r\n                focusIndex={focusIndex}\r\n                rowKey={rowKey}\r\n                status={status}\r\n                editType={editType}\r\n                columns={columns}\r\n                fieldid={fieldid}\r\n                bodyDisplayInRow={isUndefined(multipleRowCell) ? this.state.isEllipsis : !multipleRowCell}\r\n                // 单元格是否多行显示\r\n                data={data}\r\n                store={store}\r\n                isTotal={isTotal}\r\n                getCellValue={getCellValue}\r\n                showPagination={status !== 'edit' && showPagination}\r\n                otherAreaHeight={(showPagination && status !== 'edit') ? 42 + otherAreaHeight : otherAreaHeight}\r\n                cardType=\"edit\"\r\n                onCellHyperlinkTo={(record, attrcode, value) => {\r\n                    onCellHyperlinkTo && onCellHyperlinkTo(record, attrcode, value, tableId);\r\n                }}\r\n                //是否需要排序\r\n                isSort={isSort}\r\n                backSort={backSort}\r\n                sortChange={(sortParam, sortData) => this.sortChange(sortParam, sortData)} //排序的回调\r\n                setCellValue={params => {\r\n                    let {\r\n                        rowKey, rowKeyValue, rowIndex,\r\n                        attrcode, column, value = {},\r\n                        triggerType, // onChange || onSelect ...\r\n                    } = params;\r\n\r\n                    // 因为timepicker的value特殊，所以特殊转换一下start，有问题在看一下\r\n                    if (column.itemtype === 'timepicker') {\r\n                        if (value.value && value.value.format) {\r\n                            value.value = value.value.format('hh:mm:ss');\r\n                        }\r\n                    }\r\n\r\n                    // 适配多语 //这是最新适配的多语  也可以放在 setCellValue 里  TODO\r\n                    setCellValue({ rowKey, rowKeyValue, rowIndex, attrcode, value }); // 这里就是onChange 和 onBlur 的集合\r\n\r\n                    let next = isFunction(onChange) && (onChange(params) !== false);\r\n                    if (!next) { return; }\r\n\r\n                    // 数值类型的实时校验 TODO 需要找轩轩进行适配\r\n                    // let flag = isInputType\r\n                    //     ? item.itemtype !== 'number'\r\n                    //         ? foolValue.target\r\n                    //             ? foolValue.target.isFlag\r\n                    //             : false\r\n                    //         : false\r\n                    //     : false;\r\n                    // if (!flag && item.maxlength && isInputType && valueChange && foolValue) {\r\n\r\n                    //     if (!flag && valueChange.length > item.maxlength) {\r\n                    //         valueChange = rows[index].values[item.attrcode].value;\r\n                    //         toast({\r\n                    //             color: 'danger',\r\n                    //             title: `${json && json['table_tips']}`,\r\n                    //             // content: `${json && json['table_tips_content']}${item.maxlength / 2}${json && json['table_maxlength_unit']}`\r\n                    //             content: `${json && json['table_tips_content']}${item.maxlength}${json && json['table_maxlength_unit']}`\r\n                    //         });\r\n                    //         foolValue.target && foolValue.target.blur();\r\n                    //     }\r\n\r\n                    //     rows[index].values[item.attrcode].value = valueChange;\r\n                    // }\r\n\r\n                    // 老版的批改 TODO  分为多语和非多语两种情况\r\n                    // 处理单元格变化的数据zhnghengh\r\n                    // let theValue = handleChangeData(item.itemtype === 'refer', foolValue, valueChange, item);\r\n                    if (column.itemtype !== 'residtxt') {\r\n                        let isMulti = column.isMultiSelectedEnabled;\r\n                        store.setCache('oldBatchData', {\r\n                            // TODO  转换为过滤后的index\r\n                            // 在onchange时缓存列数据的key 和value  用于批量更改   zhanghengh 18/6/29\r\n                            batchChangeIndex: rowIndex,\r\n                            batchChangeKey: column.attrcode,\r\n                            batchChangeValue: value.value,\r\n                            batchChangeDisplay: value.display,\r\n                            // batchChangeValue: isMulti ? theValue : theValue.value,\r\n                            // batchChangeDisplay: isMulti ? null : theValue.display\r\n                        });\r\n                    } else {\r\n                        // 多语批改\r\n                        store.setCache('oldBatchData', {\r\n                            batchChangeIndex: rowIndex,\r\n                            batchChangeKey: column.attrcode,\r\n                            batchChangeValue: value.value,\r\n                            batchChangeDisplay: null,\r\n                        });\r\n                    }\r\n\r\n                    // 编辑关联项  放在 onAfterEvent 中\r\n\r\n                    // 把status置为1，标识修改     状态不为1的不动 (比如用户自己set但是状态为2的)\r\n                    let rowStatus = store.getRowProps({ rowKeyValue }, 'status');\r\n                    if (rowStatus == ROW_STATUS.origin) {\r\n                        store.setRowProps({ rowKeyValue }, { status: ROW_STATUS.edit })\r\n                    }\r\n                }}\r\n                getCellProps={({ rowKey, rowKeyValue, rowIndex, attrcode }) => {\r\n                    return getCellProps({ rowKey, rowKeyValue, rowIndex, attrcode });\r\n                }}\r\n                // 给自动话用以及给底层cell快捷键等组件用\r\n                name={tableId}\r\n                tableId={tableId}\r\n                onBeforeEvent={async params => {\r\n                    let {\r\n                        record, rowKey, rowKeyValue, rowIndex,\r\n                        attrcode, column, value = {},\r\n                        event,\r\n                        triggerType, // onClick || onFocus\r\n                    } = params;\r\n\r\n                    // 用于解决点击前赋值不上的问题\r\n                    setTableProps(\"currentIndex\", getTrueRowIndex({ rowIndex }), false);\r\n                    setTableProps(\"currentInfo\", { record, index: rowIndex }, false);\r\n\r\n                    // 检验输入字符长度\r\n                    if (triggerType === 'onFocus' && column.maxlength) {\r\n                        event.target.isFlag = false;\r\n                        event.target.addEventListener(\r\n                            'compositionstart',\r\n                            e => {\r\n                                e.target.isFlag = true;\r\n                            },\r\n                            false,\r\n                        );\r\n                        event.target.addEventListener(\r\n                            'compositionend',\r\n                            e => {\r\n                                e.target.isFlag = false;\r\n                                let flag = e.target.isFlag;\r\n                                let val = e.target.defaultValue;\r\n                                // if (!flag && val.length > item.maxlength) {\r\n                                //     // val = val.substring(0, count);\r\n                                //     val = val.substring(0, item.maxlength);\r\n                                //     rows[index].values[item.attrcode].value = val;\r\n                                //     toast({\r\n                                //         color: 'danger',\r\n                                //         title: `${json && json['table_tips']}`,\r\n                                //         // content: `${json && json['table_tips_content']}${item.maxlength / 2}${json && json['table_maxlength_unit']}`\r\n                                //         content: `${json && json['table_tips_content']}${item.maxlength}${json && json['table_maxlength_unit']}`\r\n                                //     });\r\n                                //     e.target && e.target.blur();\r\n                                // }\r\n                            },\r\n                            false,\r\n                        );\r\n                        // TODO this.setState({ table: this.state.table });\r\n                    }\r\n                    // 多语控件都不走这里\r\n                    if (column.itemtype !== 'residtxt') {\r\n                        // onFocus 和value  用于批量更改   zhanghengh 18/6/29 先注释，以后可能有用\r\n\r\n                        store.setCache('oldBatchData', {\r\n                            // TODO  转换为过滤后的index\r\n                            // 在onchange时缓存列数据的key 和value  用于批量更改   zhanghengh 18/6/29\r\n                            batchChangeIndex: rowIndex,\r\n                            batchChangeKey: column.attrcode,\r\n                            batchChangeValue: value.value,\r\n                            batchChangeDisplay: value.display,\r\n                            // batchChangeValue: isMulti ? theValue : theValue.value,\r\n                            // batchChangeDisplay: isMulti ? null : theValue.display\r\n                        });\r\n                    } else {\r\n                        // 这里批改多语存值可能没用，之后在看一下，先留着\r\n                        // 多语批改\r\n                        // 这里是多语文本的编辑显示逻辑\r\n                        // attrcode字段对应的value是主语言\r\n                        // 显示规则是有登陆语言显示登陆语言，登陆语言通过getLangCode获得，没有登陆语言显示主语言，attrcode字段对应的value，主语言语言在没有，就什么也不显示\r\n                        // index为1比较特殊 取value[attrcode]\r\n                        let loginCode = getLangCode(),\r\n                            loginIndex = column.languageMeta.find(e => e.languageCode === loginCode)?.index || '',\r\n                            loginValue = value[attrcode + loginIndex] || value[attrcode] || value;\r\n                        store.setCache('oldBatchData', {\r\n                            batchChangeIndex: rowIndex,\r\n                            batchChangeKey: column.attrcode,\r\n                            batchChangeValue: loginValue.value,\r\n                            batchChangeDisplay: null,\r\n                        });\r\n                    }\r\n\r\n                    // 有一些操作要放在这里处理 设置行状态等等\r\n                    if (isFunction(onBeforeEvent)) {\r\n                        // setActiveCell(params)\r\n                        return (await onBeforeEvent(params)) !== false;\r\n                    }\r\n                    return true;\r\n                }}\r\n                onAfterEvent={params => {\r\n                    let {\r\n                        record, rowKey, rowKeyValue, rowIndex,\r\n                        attrcode, column, value = {},\r\n                        oldValue = {},\r\n                        componentValue,\r\n                        event,\r\n                        triggerType = 'onChange', // onChange || onBlur\r\n                        isTriggerModal = false,\r\n                    } = params;\r\n\r\n                    // console.log('onAfterEvent trigger')\r\n                    // 多语 获取当前的code\r\n                    if (column.itemtype === 'residtxt' && isObject(componentValue)) {\r\n                        for (let key in componentValue) {\r\n                            if (componentValue[key].current) {\r\n                                // value.value = componentValue[key];\r\n                                // oldValue.value = store.getRowOldValue(record[rowKey], key);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // 新旧值\r\n                    oldValue.value = oldValue.value || store.getRowOldValue(record[rowKey], attrcode);\r\n\r\n                    if (triggerType === 'onBlur') {\r\n                        /*\r\n                        * onBlur编辑后 和 切换控件状态\r\n                        * 1、input类型    line   编辑后 + 切状态\r\n                        *                model  编辑后\r\n                        * 2、uninput类型  line   切状态\r\n                        *                model  无编辑后  无切状态\r\n                        */\r\n\r\n                        // 这一段可以考虑去除  输入 类型\r\n                        if (isString(value.value)) {\r\n                            value.value = value.value.trim();\r\n                        }\r\n\r\n                        // 当数值类型只输入一个'-'的时候就将它赋值成0\r\n                        if (column.itemtype === 'number' && value.value === '-') {\r\n                            value.value = 0;\r\n                            store.setCellValue({ rowKeyValue, attrcode, value });\r\n                        }\r\n\r\n                        // 侧拉里面的状态\r\n                        if (column.itemtype === 'select' && isTriggerModal) {\r\n                            store.setCellProps(rowKeyValue, attrcode, { open: false });\r\n                        }\r\n\r\n                        if (column.itemtype === 'residtxt') {\r\n                            if (isTriggerModal) {\r\n                                // 当侧拉的情况下\r\n                                // 多语  登陆语言值 赋值给主语言\r\n                                // tableModeldata.values[item.attrcode] = {\r\n                                //     ...tableModeldata.values[item.attrcode],\r\n                                //     value: val[item.attrcode].value\r\n                                // };\r\n                            } else {\r\n                                // 当表体的情况下\r\n\r\n                            }\r\n                            // 多语  登陆语言值 赋值给主语言\r\n                            // 主语言没值时，取登录语言的值\r\n                            if (!record.values[attrcode]?.value) {\r\n                                let loginCode = getLangCode(),\r\n                                    loginIndex = column.languageMeta.find(e => e.languageCode === loginCode)?.index || '',\r\n                                    loginValue = componentValue[attrcode + loginIndex] || componentValue[attrcode];\r\n                                setCellValue({ rowKey, rowKeyValue, rowIndex, attrcode, value: loginValue });\r\n                            }\r\n                        }\r\n\r\n                        // 多语控件都不走这里\r\n                        if (column.itemtype !== 'residtxt') {\r\n                            // 在onblur时缓存列数据的key 和value  用于批量更改   zhanghengh 18/6/29\r\n                            // pageScope.batchData[moduleId] = {\r\n                            //     batchChangeIndex: outputIndex,\r\n                            //     batchChangeKey: item.attrcode,\r\n                            //     batchChangeValue: record.values[item.attrcode] ? record.values[item.attrcode].value : '',\r\n                            //     batchChangeDisplay: record.values[item.attrcode] ? record.values[item.attrcode].display : ''\r\n                            // };\r\n                        } else {\r\n                            // 多语批改\r\n                            // 这里是多语文本的编辑显示逻辑\r\n                            // attrcode字段对应的value是主语言\r\n                            // 显示规则是有登陆语言显示登陆语言，登陆语言通过getLangCode获得，没有登陆语言显示主语言，attrcode字段对应的value，主语言语言在没有，就什么也不显示\r\n                            // const cellData = record.values[item.attrcode];\r\n                            // let value = isObj(cellData) ? (cellData.value ? cellData.value : null) : null;\r\n                            // const LangCode = getLangCode();\r\n                            // const loginLang = item.languageMeta.filter(i => i.languageCode == LangCode);\r\n                            // if (loginLang.length > 0) {\r\n                            //     loginLang[0].index === '1' ? (loginLang[0].index = '') : '';\r\n                            //     if (\r\n                            //         record.values[item.attrcode + loginLang[0].index] &&\r\n                            //         record.values[item.attrcode + loginLang[0].index].value\r\n                            //     ) {\r\n                            //         value = record.values[item.attrcode + loginLang[0].index].value;\r\n                            //     }\r\n                            // }\r\n                            // pageScope.batchData[moduleId] = {\r\n                            //     batchChangeIndex: outputIndex,\r\n                            //     batchChangeKey: item.attrcode,\r\n                            //     batchChangeValue: value,\r\n                            //     batchChangeDisplay: null\r\n                            // };\r\n                        }\r\n                    }\r\n\r\n                    // 设置状态  放在  onAfterEvent 事件之前 避免onAfterEvent 修改record报错\r\n                    store.setCellProps(rowKeyValue, attrcode, { isEdit: false });\r\n\r\n                    // 有一些操作要放在这里处理 设置行状态等等\r\n                    let next = isFunction(onAfterEvent) && (onAfterEvent(params) !== false);\r\n\r\n                    // 多语 获取当前的code\r\n                    if (column.itemtype === 'residtxt' && isObject(componentValue)) {\r\n                        for (let key in componentValue) {\r\n                            store.saveRowOldValue(record[rowKey], key, componentValue[key].value);\r\n                        }\r\n                    } else {\r\n                        store.saveRowOldValue(record[rowKey], attrcode, value.value);\r\n                    }\r\n\r\n                    if (!next) {\r\n                        console.log('not next to run');\r\n                        return false;\r\n                    }\r\n\r\n                    /**\r\n                     * 自动增行\r\n                     * 增一行的条件：\r\n                     * 1、最后一行\r\n                     * 2、isAddRow 为true\r\n                     * 3、当前单元格值不为空\r\n                     */\r\n\r\n                    let viewLen = store.getVisibleRows(false, true).length;\r\n                    let isSwitch_browseDisabled = column.itemtype === 'switch_browse' && column.disabled; // 开关且不可编辑\r\n\r\n                    let validValue = column.itemtype === 'residtxt' ? value : value.value;\r\n                    validValue = column.itemtype === 'refer' ? componentValue : value;\r\n                    const isEmpty = isEmptyValue(validValue, column.itemtype);\r\n                    const tableStatus = getTableProps('status');\r\n                    if (\r\n                        viewLen == rowIndex + 1 &&\r\n                        autoAddRow.enabled &&\r\n                        !isSwitch_browseDisabled &&\r\n                        !isEmpty &&\r\n                        tableStatus === 'edit'\r\n                    ) {\r\n                        // 添加自动增行后的回调\r\n                        store.addTableRow(undefined, autoAddRow.defaultValue, true, {\r\n                            callback: autoAddRow.callback,\r\n                            isAutoAddRow: true,\r\n                        });\r\n                    }\r\n\r\n                }}\r\n                // 点击单元格，单元格的浏览态编辑态切换时的回调\r\n                onCellStatusChange={params => {\r\n                    let { isEdit, column } = params\r\n                    if (isEdit) {\r\n                        setActiveCell(params)\r\n                    } else {\r\n                        let cell = getActiveCell()\r\n                        if (cell) {\r\n                            let { oldColumn = {} } = cell\r\n                            if (column.attrcode === oldColumn.attrcode) {\r\n                                setActiveCell(null)\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n                onCellMouseDown={(record, rowIndex, attrcode, column) => {\r\n                    let booleanType = ['switch', 'checkbox_switch']\r\n                    if (status === 'edit' && booleanType.includes(attrcode)) {\r\n                        let params = { column, rowIndex, attrcode }\r\n                        setActiveCell(params)\r\n                    }\r\n                }}\r\n                rowClassName={(record, current) => {\r\n                    let currentCls = [];\r\n                    if (isArray(rowClassName)) {\r\n                        currentCls = rowClassName.filter(item => {\r\n                            if (!isArray(item.index)) {\r\n                                item.index = [item.index];\r\n                            }\r\n                            return item.index.includes(current);\r\n                        });\r\n                        rowClassName = currentCls.reduce((total, item) => { return total + ' ' + item.className }, '');\r\n                    }\r\n                    // console.log(currentCls);\r\n                    return isFunction(rowClassName) ? rowClassName(record, current) : rowClassName;\r\n                }}\r\n                hasSelected={({ rowKey, rowKeyValue, rowIndex }) => {\r\n                    return hasSelected(rowKeyValue);\r\n                }}\r\n                setSelectedIndex={({ record, rowKey, rowIndex }, e) => {\r\n                    // 为了避免和新开发的行框选点选区域选事件冲突\r\n                    if (high_selectable && high_selectable.enable && e && (e.ctrlKey || e.shiftKey || e.metaKey)) {\r\n                        return;\r\n                    }\r\n                    let rowKeyValue = record[rowKey];\r\n                    let values = record.values || record;\r\n                    // 错误行禁用\r\n                    if (values && values.saga_status && values.saga_status.value === '1') {\r\n                        return;\r\n                    }\r\n                    //点击行即勾选复选框\r\n                    if (status !== 'edit' && showCheck && !record.disabled) {\r\n                        this.onCheckChange(record, rowIndex, true);\r\n                    } else {\r\n                        let isSelected = hasSelected(rowKeyValue);\r\n                        !isSelected && setSelectedIndex([], 'clear', false);\r\n                        !isSelected && setSelectedIndex([{ rowKey, rowKeyValue, rowIndex, pattern: 'add' }]);\r\n                    }\r\n                }}\r\n                pageInfo={getPageInfo()}\r\n                pageInfoChange={this.pageInfoChange}\r\n                onRowClick={(record, index, e) => {\r\n                    // 为了避免和新开发的行框选点选区域选事件冲突\r\n                    if (high_selectable && high_selectable.enable && e && (e.ctrlKey || e.shiftKey || e.metaKey)) {\r\n                        return;\r\n                    }\r\n                    // 错误行禁用\r\n                    let values = record.values || record;\r\n                    if (\r\n                        !values ||\r\n                        !values.saga_status ||\r\n                        values.saga_status.value !== \"1\"\r\n                    ) {\r\n                        setTableProps(\"currentIndex\", getTrueRowIndex({ rowIndex: index }), false);\r\n                        setTableProps(\"currentInfo\", { record, index }, false);\r\n                    }\r\n\r\n                    // console.log(store);\r\n                    isFunction(onRowClick) && onRowClick(record, index, e);\r\n                }}\r\n                onRowDoubleClick={(record, index, e) => {\r\n                    // 兼容筛选\r\n                    // let outputIndex = index;\r\n                    // this.filterAllData && (outputIndex = this.filterAllData.findIndex(row => row.rowid === record.rowid));\r\n                    // 错误行禁用\r\n                    let values = record.values || record;\r\n                    if (\r\n                        !values ||\r\n                        !values.saga_status ||\r\n                        values.saga_status.value !== \"1\"\r\n                    ) {\r\n                        setTableProps(\"currentIndex\", getTrueRowIndex({ rowIndex: index }), false);\r\n                        setTableProps(\"currentInfo\", { record, index }, false);\r\n                    }\r\n                    // 行双击的方法 判断配置文件是否有，并且config.onRowDoubleClick是否是函数  zhanghengh 18/5/8\r\n                    isFunction(onRowDoubleClick) && onRowDoubleClick(record, index, e);\r\n\r\n                }}\r\n                checkColConfig={{\r\n                    showCheck: isUndefined(hideBrowseCheckbox) ? showCheck : (status === 'browse' ? !hideBrowseCheckbox : showCheck),\r\n                    crossPageSelect,\r\n                    changeCrossSelect: this.changeCrossSelect,\r\n                    langJson,\r\n                }}\r\n                totalConfig={{\r\n                    showTotal: showTotal,\r\n                    noTotalRows: noTotalRows,\r\n                    noTotalCol: noTotalCol,\r\n                    allowTotalRows: allowTotalRows,\r\n                    numberPd: 7,\r\n                }}\r\n                indexColConfig={{ showIndex: showIndex || false, langJson }}\r\n                onAllCheckChange={value => this.onAllCheckChange(value)}\r\n                onCheckChange={(record, index) => this.onCheckChange(record, index)}\r\n                checkInfo={getCheckInfo()}\r\n                langJson={langJson}\r\n                high_filter={{\r\n                    alloweFilter: true,\r\n                    langJson,\r\n                    panelTitle: metaName || '',\r\n                    filterData,\r\n                    customColData,\r\n                    rowKey,\r\n                    isReset: store.getStore('filterReset'),\r\n                    arrColumns,\r\n                    handleFilterCallBack: (params = {}) => {\r\n                        let {\r\n                            filteredRow,\r\n                            filteredRowKeyValues,\r\n                            columnStatus = {},\r\n                            // 原始过滤条件\r\n                            filterItemList,\r\n                            // 当前过滤条件\r\n                            afterFilterItemList,\r\n                            afterFilterFactors,\r\n                        } = params;\r\n\r\n                        // console.log(params);\r\n\r\n                        // 更新重置状态\r\n                        store.setStore('filterReset', false, false);\r\n\r\n                        // 设置列状态  设置表格筛选图标\r\n                        store.setColumn(tableId, columnStatus, false);\r\n\r\n                        // 设置行状态\r\n                        let data = store.getData() || [];\r\n                        data.forEach(row => {\r\n                            if (filteredRowKeyValues.includes(row[rowKey])) {\r\n                                row.filter = false;\r\n                            } else {\r\n                                row.filter = true;\r\n                            }\r\n                        });\r\n\r\n                        // 处理已选等逻辑\r\n                        let checkInfo = store.getCheckInfo();\r\n                        if (filteredRow && filteredRow.length) {\r\n                            checkInfo.indeterminate = filteredRow.some(item => {\r\n                                let values = item.values || item;\r\n                                let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                return unSaga && item.selected;\r\n                            });\r\n                            checkInfo.checkedAll = filteredRow.every(item => {\r\n                                let values = item.values || item;\r\n                                let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                return !unSaga || item.selected;\r\n                            });\r\n                        }\r\n                        store.setStore([\"checkInfo\"], checkInfo, false);\r\n\r\n                        // 更新 所有的更新放到弹窗关闭(onHide)时\r\n                        store.setData({ data, shouldForceUpdate: false });\r\n                        handleFilterCallBack && handleFilterCallBack();\r\n                    },\r\n                    handleResetCallBack: params => {\r\n                        let { filterItemList, columnStatus } = params;\r\n                        // 更新重置状态\r\n                        store.setStore('filterReset', false, false);\r\n                        // 设置行状态\r\n                        let data = store.getData() || [];\r\n                        data.forEach(row => {\r\n                            row.filter = false;\r\n                            delete row.filterIndex;\r\n                        });\r\n\r\n                        // 处理已选等逻辑\r\n                        let checkInfo = store.getCheckInfo();\r\n                        let viewData = store.getViewData();\r\n                        if (viewData && viewData.length) {\r\n                            checkInfo.indeterminate = viewData.some(item => {\r\n                                let values = item.values || item;\r\n                                let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                return unSaga && item.selected;\r\n                            });\r\n                            checkInfo.checkedAll = viewData.every(item => {\r\n                                let values = item.values || item;\r\n                                let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                return !unSaga || item.selected;\r\n                            });\r\n                        }\r\n                        store.setStore([\"checkInfo\"], checkInfo, false);\r\n\r\n                        // 更新 所有的更新放到弹窗关闭(onHide)时\r\n                        store.setData({ data, shouldForceUpdate: false });\r\n\r\n                        // 列状态\r\n                        store.setColumn(tableId, columnStatus, false);\r\n                        handleResetCallBack && handleResetCallBack();\r\n                    },\r\n                    onHide: params => {\r\n                        let { filterItemList, columnStatus } = params;\r\n                        store.setColumn(tableId, columnStatus, true);\r\n                        // console.log(params);\r\n                    },\r\n                    ...high_filter,\r\n                }}\r\n                high_selectable={{\r\n                    store,\r\n                    onSelect: (activedCells = {}, activeSpecialCells = [], hotkey, { current, isBatch }) => {\r\n                        // console.log(activedCells, hotkey, current);\r\n                        let pervActivedCells = store.getCache('activedCells') || {};\r\n                        for (let rowKeyValue in activedCells) {\r\n                            pervActivedCells[rowKeyValue] = pervActivedCells[rowKeyValue] || [];\r\n                            for (let attrcode of activedCells[rowKeyValue]) {\r\n                                pervActivedCells[rowKeyValue].push(attrcode);\r\n                                // 解决批改时边线样式不对的问题\r\n                                isBatchSelect && store.setCellProps(rowKeyValue, attrcode, {\r\n                                    showDrag: false,\r\n                                    actived: true,\r\n                                    leftLine: false,\r\n                                    rightLine: false,\r\n                                    topLine: false,\r\n                                    bottomLine: false,\r\n                                }, false)\r\n                            }\r\n                        }\r\n\r\n                        // 重新赋值\r\n                        activedCells = pervActivedCells;\r\n\r\n                        if (isBatch) {\r\n                            let rows = [];\r\n                            for (let rowKeyValue in activedCells) {\r\n                                let data = getStore('data');\r\n                                // TODO\r\n                                activedCells[rowKeyValue].length > 0 && rows.push(data.query(rowKeyValue));\r\n                            }\r\n                            if (onBatchSelected) {\r\n                                this.onBatchSelected(rows, hotkey)\r\n                            } else {\r\n                                setSelectedIndex([], 'clear', false);\r\n                                rows.forEach(row => {\r\n                                    let rowKeyValue = row[rowKey];\r\n                                    let values = row.values || row,\r\n                                        isSagaStatus = values && values.saga_status && values.saga_status.value === '1';\r\n                                    // 错误行禁用\r\n                                    if (isSagaStatus && row.disabled) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    let isSelected = hasSelected(rowKeyValue);\r\n\r\n                                    !isSelected && setSelectedIndex([{ rowKey, rowKeyValue, pattern: 'add' }], 'add', false);\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        hotkey === 'down' &&\r\n                            current &&\r\n                            current.rowKeyValue &&\r\n                            status == 'edit' &&\r\n                            store.setCellProps(current.rowKeyValue, current.attrcode, { showDrag: true }, false);\r\n\r\n                        // 缓存已选\r\n                        store.setCache('activedCells', activedCells);\r\n                        store.setCache('activedCell', current);\r\n\r\n                        // 没有选中单元格\r\n                        if (!isBatchSelect) {\r\n                            store.refresh();\r\n                            return;\r\n                        }\r\n\r\n                        // 选中表头\r\n                        let oldActiveSpecialCells = store.getCache('activeSpecialCells') || [];\r\n                        if (activeSpecialCells.length > 0 || (activeSpecialCells.length === 0 && oldActiveSpecialCells.length !== 0)) {\r\n                            oldActiveSpecialCells.forEach(item => {\r\n                                // 不能用actived 会有冲突\r\n                                store.setColumn(tableId, { [item.attrcode]: { unitActive: false } }, false);\r\n                            });\r\n                            activeSpecialCells.forEach(item => {\r\n                                // 不能用actived 会有冲突\r\n                                store.setColumn(tableId, { [item.attrcode]: { unitActive: true } }, false);\r\n                            });\r\n                            store.setCache('activeSpecialCells', activeSpecialCells);\r\n\r\n                            // console.log(store.getCache('activeSpecialCells'), 'sssssssssssactiveSpecialCells');\r\n                        }\r\n\r\n                        // 修正边框\r\n                        if (activedCells || activeSpecialCells) {\r\n                            let arrayMeta = store.getArrayMeta(tableId, true),\r\n                                arrayMetaLen = arrayMeta.length;\r\n                            let viewData = store.getViewData('filter');\r\n                            let linkObjMeta = arrayMeta.reduce((result, item, i, arr) => {\r\n                                let next = arr[i + 1] || {};\r\n                                let prev = arr[i - 1] || {};\r\n                                if (item.visible) {\r\n                                    result[item.attrcode] = {\r\n                                        prev: prev.attrcode,\r\n                                        current: item.attrcode,\r\n                                        next: next.attrcode,\r\n                                    }\r\n                                }\r\n                                return result;\r\n                            }, {});\r\n\r\n                            viewData.forEach((row, i) => {\r\n                                let values = row.values;\r\n                                let prevRowValues = (viewData[i - 1] || {}).values || {};\r\n                                let nextRowValues = (viewData[i + 1] || {}).values || {};\r\n\r\n                                for (let attrcode in values) {\r\n                                    let cell = values[attrcode];\r\n                                    if (cell['actived']) {\r\n                                        let prevCol = linkObjMeta[attrcode] && linkObjMeta[attrcode].prev;\r\n                                        let nextCol = linkObjMeta[attrcode] && linkObjMeta[attrcode].next;\r\n\r\n                                        cell['leftLine'] = !prevCol || !values[prevCol] || !values[prevCol]['actived'];\r\n\r\n                                        cell['rightLine'] = !nextCol || !values[nextCol] || !values[nextCol]['actived'];\r\n\r\n                                        cell['topLine'] = prevRowValues && (!prevRowValues[attrcode] || !prevRowValues[attrcode]['actived']);\r\n\r\n                                        cell['bottomLine'] = nextRowValues && (!nextRowValues[attrcode] || !nextRowValues[attrcode]['actived']);\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            // console.log(linkObjMeta, viewData);\r\n                        }\r\n                        // 更新表格\r\n                        store.refresh();\r\n                    },\r\n                    onDeSelect: (deActiveCells, hotkey) => {\r\n                        let prevActiveCells = store.getCache('activedCells') || {};\r\n                        let prevActiveCellsObj = {};\r\n                        let prevActiveCellsArr = {};\r\n                        // 转对象\r\n                        for (let rowKeyValue in prevActiveCells) {\r\n                            prevActiveCellsObj[rowKeyValue] = {};\r\n                            for (let attrcode of prevActiveCells[rowKeyValue]) {\r\n                                prevActiveCellsObj[rowKeyValue][attrcode] = true;\r\n                            }\r\n                        }\r\n\r\n                        // 清理数据\r\n                        for (let rowKeyValue in deActiveCells) {\r\n                            for (let attrcode of deActiveCells[rowKeyValue]) {\r\n                                if (prevActiveCellsObj[rowKeyValue][attrcode]) {\r\n                                    delete prevActiveCellsObj[rowKeyValue][attrcode];\r\n                                    // setCellProps(rowKeyValue, attrcode, { showDrag: false }, false);\r\n                                    setCellProps(rowKeyValue, attrcode, {\r\n                                        actived: false,\r\n                                        leftLine: false,\r\n                                        rightLine: false,\r\n                                        topLine: false,\r\n                                        bottomLine: false,\r\n                                    }, false);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // 转数组\r\n                        for (let rowKeyValue in prevActiveCellsObj) {\r\n                            prevActiveCellsArr[rowKeyValue] = [];\r\n                            for (let attrcode in prevActiveCellsObj[rowKeyValue]) {\r\n                                prevActiveCellsArr[rowKeyValue].push(attrcode);\r\n                            }\r\n                        }\r\n\r\n                        // 重新赋值\r\n                        store.setCache('activedCells', prevActiveCellsArr);\r\n                    },\r\n                    getPrevSelector: key => {\r\n                        const activedCells = store.getCache('activedCells') || {},\r\n                            prevSelector = {};\r\n                        for (let rowKeyValue in activedCells) {\r\n                            (activedCells[rowKeyValue] || []).forEach(attrcode => {\r\n                                prevSelector[`${rowKeyValue}@${attrcode}`] = true;\r\n                            });\r\n                        }\r\n                        // console.log(activedCells, prevSelector, 'prevSelector');\r\n                        return prevSelector;\r\n                    },\r\n                    onClearData: (shouldForceUpdate = false, hotkey) => {\r\n                        store.setCache('activedCells', {});\r\n                        store.setCache('activeSpecialCells', []);\r\n                        // 没有选中单元格\r\n                        if (!isBatchSelect) {\r\n                            return;\r\n                        }\r\n                        // 这个方法说不定比较频繁 后面优化下\r\n\r\n                        // let activedCells = store.getCache('activedCells') || {};\r\n                        // let activedCell = store.getCache('activedCell');\r\n                        let data = store.getData() || [];\r\n                        let rowKey = store.getTableProps('rowKey');\r\n                        data.forEach(row => {\r\n                            let values = row.values || row || {};\r\n                            let rowKeyValue = row[rowKey];\r\n                            for (let attrcode in values) {\r\n                                values[attrcode].showDrag &&\r\n                                    setCellProps(rowKeyValue, attrcode, { showDrag: false }, false);\r\n                                values[attrcode].actived &&\r\n                                    setCellProps(rowKeyValue, attrcode, {\r\n                                        actived: false,\r\n                                        leftLine: false,\r\n                                        rightLine: false,\r\n                                        topLine: false,\r\n                                        bottomLine: false,\r\n                                    }, false);\r\n                            }\r\n                        });\r\n\r\n                        const columns = store.getArrayMeta(tableId, false) || [];\r\n                        columns.forEach(item => {\r\n                            item.unitActive && store.setColumn(tableId, { [item.attrcode]: { unitActive: false } }, false);\r\n                        });\r\n\r\n                        shouldForceUpdate && store.refresh();\r\n                    },\r\n                    arrColumns: store.getArrayMeta(tableId, false),\r\n                    data,\r\n                    rowKey,\r\n                    onBatchChange: (activeCell = {}, activeCells = {}) => {\r\n                        // 没有选中单元格\r\n                        if (!isBatchSelect) {\r\n                            return;\r\n                        }\r\n                        // activeCell = {}, activeCells = {}\r\n                        // 开始  批改以下所有\r\n                        activeCell = {\r\n                            ...activeCell,\r\n                            rowIndex: store.getTrueRowIndex({ rowKeyValue: activeCell.rowKeyValue }),\r\n                            attrcode: activeCell.attrcode,\r\n                            column: store.getColumn(tableId, activeCell.attrcode),\r\n                        };\r\n\r\n                        setCellProps(activeCell.rowKeyValue, activeCell.attrcode, { showDrag: false }, true)\r\n\r\n                        // 表格数据  是否包含删除的数据 这里要斟酌下\r\n                        // let rows = store.getViewData('filter');\r\n                        let rows = store.getData();\r\n\r\n                        let pasteContent = [];\r\n                        let activeCellValue = getCellValue({ rowKeyValue: activeCell.rowKeyValue, attrcode: activeCell.attrcode }) || {};\r\n                        for (let rowKeyValue in activeCells) {\r\n                            let attrcode = activeCells[rowKeyValue][0];\r\n                            // 做过一次radio和checkkbox转换为select 这里可能会有问题 TODO测试\r\n                            let isDisplay = (activeCell.column.itemtype === 'refer' && activeCell.column.fieldDisplayed === 'refname') || activeCell.column.itemtype === 'select';\r\n                            attrcode && pasteContent.push(isDisplay ? activeCellValue.display : activeCellValue.value);\r\n                        }\r\n\r\n                        console.log('onBatchChange trigger', activeCell, activeCells);\r\n\r\n                        let param = {\r\n                            pasteContent,\r\n                            activeCell,\r\n                            langJson,\r\n                            rows,\r\n                            getRowOldValue: store.getRowOldValue,\r\n                            tableId,\r\n                        }\r\n                        let data = excelPackageData(param);\r\n                        onBatchChange && onBatchChange(data);\r\n                    },\r\n                    isBatchSelect,\r\n                    ...high_selectable,\r\n                }}\r\n                high_sidebox={{\r\n                    langJson,\r\n                    arrColumns,\r\n                    tableId,\r\n                    fieldid,\r\n                    onCloseModel,\r\n                    tableModelConfirm,\r\n                    store,\r\n                    sideBoxConfig,\r\n                }}\r\n                high_hotkey={{\r\n                    tableId,\r\n                    store,\r\n                    enable: true,\r\n                }}\r\n                excelConfig={{ tableId, onBatchChange, langJson }}\r\n                //折行回调\r\n                foldingRowChange={isEllipsis => {\r\n                    this.setState({ isEllipsis })\r\n                }}\r\n                foldCacheId={foldCacheId} //对于没有appcode，pagecode..的表格，做折行缓存的标志\r\n                //右键菜单配置参数\r\n                contextMenuConfig={{\r\n                    enable: isBatchSelect,\r\n                    status: status,\r\n                    contextMenuClick: this.contextMenuClick,\r\n                    showBusinessBtn: isFunction(rightMenuClick),\r\n                    showPasteBtn: isFunction(onBatchChange),\r\n                    langJson: langJson,\r\n                }}\r\n                //滚动条悬浮\r\n                autoAffixScroll\r\n                //——————————操作列————————————\r\n                colsSettingParam={colSettingParam}\r\n                cancelCustomRightMenu={cancelCustomRightMenu}\r\n                showWidthAndHeightConfig={showWidthAndHeightConfig}\r\n                updateColumnHandle={this.updateColumnAfterSetting}\r\n                key={this.state.key}\r\n                //——————————操作列end————————————\r\n                //空白列\r\n                addBlankCol={addBlankCol}\r\n                {...others}\r\n            />\r\n        </div>;\r\n    }\r\n}\r\n\r\nEditTable.displayName = 'EditTable';\r\nEditTable.useEditTable = useEditTable;\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__42__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;"],"sourceRoot":""}