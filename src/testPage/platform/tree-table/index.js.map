{"version":3,"sources":["webpack://@platform/[name]/webpack/universalModuleDefinition","webpack://@platform/[name]/webpack/bootstrap","webpack://@platform/[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://@platform/[name]/external \"@platform/api/index\"","webpack://@platform/[name]/external \"@platform/template/index\"","webpack://@platform/[name]/external \"@platform/base/index\"","webpack://@platform/[name]/./src/platform/components/TreeTable/Cell.js","webpack://@platform/[name]/./src/platform/components/TreeTable/containers.js","webpack://@platform/[name]/./src/platform/components/TreeTable/utils.js","webpack://@platform/[name]/./src/platform/components/TreeTable/store.js","webpack://@platform/[name]/./src/platform/components/TreeTable/treeTable.js","webpack://@platform/[name]/./src/platform/components/TreeTable/methods.js","webpack://@platform/[name]/./src/platform/components/TreeTable/treeTableManyCol.js","webpack://@platform/[name]/./src/platform/components/TreeTable/index.js","webpack://@platform/[name]/external \"@platform/form/index\"","webpack://@platform/[name]/./node_modules/classnames/index.js","webpack://@platform/[name]/external {\"root\":\"ReactDOM\",\"var\":\"ReactDOM\",\"commonjs\":\"react-dom\",\"commonjs2\":\"react-dom\",\"amd\":\"react-dom\"}"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__11__","__WEBPACK_EXTERNAL_MODULE__42__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Cell","props","handleMouseOver","cellDom","tipStatus","state","firstCol","parentNode","getAttribute","includes","tipNode","cellParent","realNode","querySelector","offsetWidth","clientWidth","setState","this","item","fixedStyle","context","multipleRowCell","searchValue","beforeStr","index","afterStr","record","onCellMouseDown","isEllipsis","fieldid","getSysFieldid","attrcode","className","classnames","fixed","style","ref","dom","ReactDOM","findDOMNode","onMouseOver","onMouseDown","e","placement","overlay","delay","inverse","Component","SAVE_MULTI","getVarType","v","toString","slice","isArray","param","Array","isUndefined","origin","getLists","source","lists","map","node","handleLists","push","children","countDeep","sunLists","length","saveCount","forEach","count","findFather","child","pid","Math","max","apply","stopCheckBoxChange","checkOnRowClick","target","td","el","parentElement","tagName","findParentTd","operationContainer","contains","document","getSelection","getChildren","data","parentKey","concat","Store","store","formStore","Form","useForm","fullDataObject","meta","async","rowId","isCheckedHasChild","expandedKeys","checkedKeys","indeterminateKeys","currentSelectedRow","currentRow","modalType","cache","cacheData","langJson","getMeta","getStore","getHooks","setMeta","setStore","getViewMeta","getCache","setCache","setData","getData","refresh","uuid","replace","getSafeRandom","paths","shouldForceUpdate","callback","res","forceUpdate","path","current","len","console","warn","some","id","items","formColumns","itemtype","nItem","JSON","parse","stringify","render","title","log","status","moduletype","isunfold","obj","_hasMeta","regexp","filter","BaseStore","hookFactory","defaultColor","TreeTable","setStateEve","checkDataType","field","find","createNewData","childKeyRecord","dataSource","rowIndex","values","childrenKeys","itemCheckBoxChange","showContextMenu","setChecked","setPidCheckedStatus","allChilrenList","allLength","checkedLength","x","selectAllChange","checked","checkBoxChange_radio","onCheckboxChangeChild","text","checkboxChange","checkedType","stopPropagation","isFunction","findItem","f","createNewCol","maxDeep","showCheckBox","oldSearchValue","multiYes","multiNo","newArr","visible","_width","width","color","label","dataIndex","langIndex","langAttrCode","LangCode","getLangCode","loginLang","languageMeta","languageCode","display","changeTime","formatDatetime","String","searchValueLow","toLocaleLowerCase","contextLow","indexOf","substr","height","undefined","alreadyAssignment","Irender","defaultColumns","indeterminate","onClick","resArr","oldFirstColRender","expendSwich","isLeaf","isleaf","zaiyihang","Number","onExpand","expandEve","collapandEve","modalContent","onAfterEvent","onBeforeEvent","config","delNodeEve","delNodeCallBack","beSureBtnClick","modal","addNodeCallBack","editNodeCallBack","isCheckNow","getAllFormValue","close","onRowDoubleClick","event","ncOnRowDoubleClick","onRowClick","row","onRowClickEve","ctrlKey","shiftKey","metaKey","rowClassName","createContextMenu","closeAllEve","hideExpandAll","expandAllEve","hideIncludeChild","extendRightMenu","getAllExpandKeys","onChange","getColSetConfig","appcode","code","pageTo","getAppCode","pagecode","getPageCode","areaCode","_","tableHeight","screenHeight","screen","getMultiLang","json","nextProps","scrollConfig","isDrag","adaptionHeight","otherAreaHeight","inModal","isLazyload","addBlankCol","showWidthAndHeightConfig","columns","treeData","canvas","selector","unitKey","disabled","userSelect","startItem","onSelect","selectedRowKeys","hotkey","currentKey","keys","selectedRecord","lazyload","expandedRowKeys","columnKey","onExpandedRowsChange","bodyDisplayInRow","foldingRowChange","scroll","y","bodyStyle","minHeight","cancelCustomRightMenu","colsSettingParam","createModal","content","backdrop","cancelBtnClick","size","userControl","BaseComponent","displayName","useTreeTable","MODALNAME","add","edit","existenceCheck","treeTableDataSource","setChildNodeEve","tableData","parent","clearExpandedKeys","addRowId","addChildren","editRow","newItem","addChildNode","syncAddNode","pk","error","addBrother","brother","splice","delRow","checkHasChildren","parentRowId","utilGetChildren","utilCountDeep","utilStopCheckBoxChange","isMultilingual","formId","TreeTableAPI","TreeTableManyCol","flag","that","treeTableCol","firstTime","thisTable","defTreeData","defCol","cloneObj","bool","LangData","multilingual","lang","formItem","use","form","formDataSource","fullDataArray","createNewDataRes","cp","createForm","rows","pageScope","others","initTreeTableData","defaultExpandAllRows","setChildNode","editRowEve","newData","addChildRowEve","runThis","kValue","addBrotherRow","delRowByPk","group","Map","set","makeDOM","refpk","addIsLeaf","getAllValue","getValueByRowId","getValueByRowIdEve","getExpandedRowKeys","showModal","formValues","emptyAllFormValue","setAllFormValue","show","emptyAllData","openRow","closeRow","findIndex","getSelectedRow","selectedRows","G","getSelectedRowEve","isCheckHasChild","searchTreeTable","filters","expanded","searchResult","findDataByValueFilters","expectData","needFilters","filtersLength","isMatch","expectItem","k","vi","updataDataSource","callBack","newDataSource","setCheckedKeys","merge","oldCheckedKeys","assign","setSelectedRow","updateChildRow","parentRow","newDataArr","loop","updateRowByRowId","treeTableCompatible","register","apiBindPage","simpleTableAPI","pop","component","unfinished","hasOwn","classNames","classes","arguments","arg","argType","inner","join","default"],"mappings":"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","file":"tree-table/index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"react-dom\"), require(\"@platform/template/index\"), require(\"@platform/form/index\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"@platform/api/index\", \"@platform/base/index\", \"react-dom\", \"@platform/template/index\", \"@platform/form/index\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@platform/tree-table/index\"] = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"react-dom\"), require(\"@platform/template/index\"), require(\"@platform/form/index\"));\n\telse\n\t\troot[\"@platform/tree-table/index\"] = factory(root[\"React\"], root[\"@platform/api/index\"], root[\"@platform/base/index\"], root[\"ReactDOM\"], root[\"@platform/template/index\"], root[\"@platform/form/index\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__6__, __WEBPACK_EXTERNAL_MODULE__11__, __WEBPACK_EXTERNAL_MODULE__42__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../platform/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 400);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport classnames from 'classnames';\r\nimport { Tooltip as NCTooltip } from '@platform/base';\r\nimport { getSysFieldid } from '@platform/api';\r\n\r\nclass Cell extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { tipStatus: false };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.cellDom = null;\r\n    }\r\n\r\n    handleMouseOver = () => {\r\n        if (this.cellDom) {\r\n            let { tipStatus } = this.state;\r\n            let firstCol = this.cellDom.parentNode.getAttribute('class').includes('first-col');\r\n            let tipNode = null;\r\n            let cellParent = this.cellDom.parentNode;\r\n            let realNode = this.cellDom.querySelector('.cell-context')\r\n            if (cellParent) {\r\n                tipNode = firstCol ? cellParent.parentNode && cellParent.parentNode.parentNode : cellParent;\r\n            }\r\n            if (tipNode) {\r\n                if (realNode.offsetWidth > tipNode.clientWidth && tipStatus === false) {\r\n                    this.setState({ tipStatus: true });\r\n                }\r\n                if (realNode.offsetWidth <= tipNode.clientWidth && tipStatus === true) {\r\n                    this.setState({ tipStatus: false });\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { item, fixedStyle, context, multipleRowCell, searchValue, beforeStr, index, afterStr, record, onCellMouseDown, isEllipsis } = this.props;\r\n        return (\r\n            <div\r\n                fieldid={getSysFieldid(item.attrcode)}\r\n                className={classnames('dobule-text', { 'dobule-text-fixed': !!(item.fixed && item.fixed === 'left') })}\r\n                style={fixedStyle}\r\n                ref={dom => {\r\n                    this.cellDom = ReactDOM.findDOMNode(dom);\r\n                }}\r\n                onMouseOver={this.handleMouseOver}\r\n                onMouseDown={e => {\r\n                    onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);\r\n                }}\r\n            >\r\n                <NCTooltip\r\n                    placement=\"top\"\r\n                    overlay={this.state.tipStatus ? context : ''}\r\n                    className=\"tooltip-word-color\"\r\n                    delay={1}\r\n                    inverse\r\n                >\r\n                    <div className={classnames({\r\n                        'single-line-and-ellipsis': !multipleRowCell && isEllipsis,\r\n                        'three-line-and-ellipsis': !isEllipsis,\r\n                    })}>\r\n                        {(beforeStr || afterStr || searchValue) ?\r\n                            <span className=\"cell-context\">\r\n                                {beforeStr}\r\n                                {index !== -1 && !!searchValue ?\r\n                                    < span className=\"u-table-searchable-filter\">{searchValue}</span> : ''}\r\n                                {afterStr}\r\n                            </span>\r\n                            : <span className=\"cell-context\">&nbsp;</span>}  {/* 单元格无数据时，显示空格，为了自动化测试可以点击到该单元格*/}\r\n                    </div>\r\n                </NCTooltip>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cell;\r\n","export const SAVE_MULTI = {};\r\nexport const STOP_CHECK_ELEMENT = 'stop-check-element';\r\nexport const STOP_CHECK_OPERATION_ELEMENT = 'stop-check-operation-element';\r\n","\r\nimport {\r\n    STOP_CHECK_ELEMENT,\r\n    STOP_CHECK_OPERATION_ELEMENT,\r\n} from \"./containers\";\r\n\r\nimport { getSafeRandom } from '@platform/api'\r\n/*\r\n * @Descripttion:\r\n * @version:\r\n * @Author: bbq\r\n * @Date: 2020-12-08 16:04:10\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2020-12-11 14:38:00\r\n */\r\nconst getVarType = function (v) {\r\n    return Object.prototype.toString.call(v).slice(8, -1);\r\n};\r\n\r\n/**\r\n * 判断是否为对象\r\n * @param {*object} obj \r\n */\r\nexport function isObject(obj) {\r\n    return getVarType(obj) === 'Object';\r\n}\r\n\r\n/* 检测类型是否为数组 */\r\nexport function isArray(param) {\r\n    return getVarType(param) === 'Array' || Array.isArray(param);\r\n}\r\n\r\n/* 检测类型是否为字符串 */\r\nexport function isString(param) {\r\n    return getVarType(param) === 'String';\r\n}\r\n\r\n/* 检测类型是否为方法 */\r\nexport function isFunction(param) {\r\n    return getVarType(param) === 'Function';\r\n}\r\n\r\n/* 检测类型是否为Promise对象 */\r\nexport function isPromise(param) {\r\n    return getVarType(param) === 'Promise';\r\n}\r\n\r\n/* 检测类型是否为数字 */\r\nexport function isNumber(param) {\r\n    return getVarType(param) === 'Number' && !Number.isNaN(param);\r\n}\r\n\r\n/*\r\n * @method   检测是否是需要是boolean类型\r\n */\r\nexport function isBoolean(param) {\r\n    return getVarType(param) === 'Boolean';\r\n}\r\n\r\n/*\r\n * @method   是否是undefined\r\n */\r\nexport function isUndefined(origin) {\r\n    return typeof origin === 'undefined' || origin === void 0;\r\n}\r\n\r\n/*\r\n * @method   if条件下为false   除去NaN、0、-0、false   剩余undefined、null、\"\"\r\n */\r\nexport function isWrong(param) {\r\n    return typeof param === 'undefined' || param === null || param === '';\r\n}\r\n\r\nexport function isNullOrVoid(param) {\r\n    return typeof param === 'undefined' || param === null;\r\n}\r\n\r\n/*\r\n * @method   if条件下为false   除去NaN、0、-0、false   剩余undefined、null、\"\"\r\n */\r\nexport function isWrongFalse(param) {\r\n    return typeof param === 'undefined' || param === null || param === '' || param === false;\r\n}\r\n\r\n/**\r\n * 生成唯一标识\r\n */\r\nexport function uuidv4() {\r\n    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (getSafeRandom() * 16) | 0,\r\n            v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport function getLists(source) {\r\n    const lists = [];\r\n\r\n    const handleLists = node => {\r\n        lists.push(node);\r\n        if (node.children) {\r\n            node.children.map((n, i) => {\r\n                handleLists(n);\r\n            });\r\n        } else {\r\n            return;\r\n        }\r\n    };\r\n\r\n    source.map(node => handleLists(node));\r\n\r\n    return lists;\r\n}\r\n\r\n//   获取最深树层级 数\r\nexport function countDeep(source) {\r\n    if (!source) return;\r\n    // 铺平数据\r\n    const lists = getLists(source);\r\n\r\n    // 找到孙子  没有自己的儿子的都是孙子  所以我要加油找女朋友\r\n    const sunLists = [];\r\n    lists.map((v, i) => {\r\n        if (!v.children || v.children.length == 0) sunLists.push(v);\r\n    });\r\n\r\n    // 现在查找孙子的层级\r\n    const count = node => {\r\n        let count = 0;\r\n        const findFather = child => {\r\n            count++;\r\n            lists.map(node => {\r\n                if (node.key === child.pid) {\r\n                    findFather(node);\r\n                } else {\r\n                    return;\r\n                }\r\n            });\r\n        };\r\n        findFather(node);\r\n        return count;\r\n    };\r\n\r\n    const saveCount = [];\r\n\r\n    sunLists.forEach(node => {\r\n        saveCount.push(count(node));\r\n    });\r\n\r\n    // 获取数组最大值 得到最深树层数\r\n    if (saveCount.length === 0) {\r\n        return 0;\r\n    } else {\r\n        return Math.max.apply(null, saveCount);\r\n    }\r\n}\r\n\r\nfunction findParentTd(el) {\r\n    while (el.parentElement) {\r\n        el = el.parentElement;\r\n        if (el.tagName === \"TD\") {\r\n            return el;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @desc 如果点击的是操作列，展开图标，文本夹图标就不执行选中事件。 选中文本时也不执行\r\n * @param e {object} 事件源\r\n * @param checkOnRowClick {boolean} 配置是否需要勾选功能\r\n */\r\nexport function stopCheckBoxChange(e, checkOnRowClick) {\r\n    //业务组配置不需要勾选功能\r\n    if (checkOnRowClick === false) {\r\n        return true;\r\n    }\r\n\r\n    //点击的是展开图标\r\n    if (e.target.className.includes(\"u-table-row-expand-icon\")) {\r\n        return true;\r\n    }\r\n\r\n    //点击阻止选中按钮元素（文本夹图）\r\n    if (e.target.className.includes(STOP_CHECK_ELEMENT)) {\r\n        return true;\r\n    }\r\n\r\n    //点击操作列元素\r\n    let td = findParentTd(e.target);\r\n\r\n    if (td) {\r\n        let operationContainer = td.querySelector(\r\n            `.${STOP_CHECK_OPERATION_ELEMENT}`,\r\n        );\r\n\r\n        if (operationContainer && operationContainer.contains(e.target)) {\r\n            td = operationContainer = null;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //选中文本后触发click事件\r\n    if (document.getSelection().toString()) {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function getChildren(data, parentKey) {\r\n    if (data == null || data.length == 0) return false;\r\n    let children = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n        if (data[i].key == parentKey) {\r\n            return data[i].children;\r\n        } else if (Array.isArray(data[i].children) && data[i].children.length > 0) {\r\n            children = children.concat(data[i].children);\r\n        }\r\n    }\r\n    return getChildren(children, parentKey);\r\n}\r\n","/*\r\n * @Descripttion:\r\n * @version:\r\n * @Author: bbq\r\n * @Date: 2020-12-08 14:51:21\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2020-12-24 15:08:59\r\n */\r\nimport { BaseStore, hookFactory } from \"@platform/template\";\r\nimport { isArray, isUndefined, isNullOrVoid, isObject, uuidv4, isFunction } from './utils';\r\nimport Form from '@platform/form';\r\n\r\nclass Store extends BaseStore {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.name = \"treeTableStore\";\r\n        this.refresh = this.refresh.bind(this);\r\n        this.uuid = this.store.uuid = uuidv4();\r\n    }\r\n\r\n    // 数据源\r\n    store = {\r\n        // 表单组件对象\r\n        formStore: Form.useForm(),\r\n        // 表格数据\r\n        data: [],\r\n\r\n        // 对象模式数据\r\n        fullDataObject: {},\r\n\r\n        // 列模板\r\n        meta: {},\r\n\r\n        // 表格属性\r\n        async: false,\r\n\r\n        rowId: 'rowId',\r\n\r\n        // 是否子\r\n        isCheckedHasChild: false,\r\n\r\n        // 展开项\r\n        expandedKeys: [],\r\n\r\n        // 选中项\r\n        checkedKeys: {},\r\n        // 半选\r\n        indeterminateKeys: {},\r\n\r\n        currentSelectedRow: null,\r\n        currentRow: null,\r\n\r\n        // 弹窗类型\r\n        modalType: null,\r\n\r\n        // 折行\r\n        isEllipsis: true,\r\n\r\n        // 搜索结果\r\n        searchValue: '',\r\n    };\r\n\r\n    // 缓存\r\n    cache = {\r\n        cacheData: [],\r\n        langJson: {},\r\n    };\r\n\r\n    /**\r\n     * @description: 复写\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    getStore(paths) {\r\n        return super.get(paths);\r\n    }\r\n\r\n    /**\r\n     * @description: 复写\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    setStore(paths, value, shouldForceUpdate = true, callback) {\r\n        let res = super.set(paths, value);\r\n        shouldForceUpdate && this.forceUpdate(callback);\r\n        return res;\r\n    }\r\n\r\n    /*-------------缓存-------------*/\r\n\r\n    /**\r\n     * @description: 设置缓存\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    setCache(path, value) {\r\n        if (!path) {\r\n            console.warn(\"invalid params <path> to setting\");\r\n            return;\r\n        }\r\n        if (!isArray(path)) {\r\n            path = [path];\r\n        }\r\n        let current = this.cache;\r\n        let len = path.length;\r\n        path.forEach((item, index) => {\r\n            if (!current[item]) {\r\n                current[item] = {};\r\n            }\r\n            if (index === len - 1) {\r\n                current[item] = value;\r\n            } else {\r\n                current = current[item];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description: 获取缓存\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    getCache(paths) {\r\n        if (isUndefined(paths)) {\r\n            console.warn(\"invalid params <paths> to setting\");\r\n            return;\r\n        }\r\n        if (!isArray(paths)) {\r\n            paths = [paths];\r\n        }\r\n        let current = this.cache;\r\n        paths.some(item => {\r\n            if (isUndefined(item) || isNullOrVoid(current)) {\r\n                isUndefined(item) &&\r\n                    console.warn(\"paths has empty item[%s]\", paths);\r\n                return;\r\n            }\r\n            if (!current[item]) {\r\n                current = null;\r\n                return;\r\n            }\r\n            current = current[item];\r\n            return true;\r\n        });\r\n        // console.log(this.cache);\r\n        return current;\r\n    }\r\n\r\n    /*-------------私有-------------*/\r\n\r\n    /*-------------列-------------*/\r\n    /**\r\n     * @description: 设置所有meta\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    setMeta(meta, id, shouldForceUpdate = true) {\r\n        let name = this.getStore(\"name\");\r\n        id && this.setStore(\"name\", id || name, false);\r\n\r\n        // 我觉得这里应该 考虑page上的meta更新\r\n        this.setStore(\"meta\", meta, shouldForceUpdate);\r\n\r\n        // 更新表单的meta\r\n        let formStore = this.getStore('formStore');\r\n        if (formStore && meta[id] && isArray(meta[id].items)) {\r\n            let formColumns = [];\r\n            meta[id].items.map(item => {\r\n                if (item.itemtype !== 'customer') {\r\n                    // item 内部东西太复杂 直接给会导致一些问题\r\n                    let nItem = JSON.parse(\r\n                        JSON.stringify(item || {}, (key, value) => {\r\n                            if (key == 'render' || key == 'title') {\r\n                                // title 和 value 是react对象  会导致问题\r\n                                return undefined;\r\n                            }\r\n                            return value;\r\n                        }),\r\n                    );\r\n                    delete nItem.render;\r\n                    delete nItem.title;\r\n                    formColumns.push(nItem);\r\n                }\r\n            });\r\n\r\n            console.log(formColumns);\r\n\r\n            formStore.setMeta({\r\n                [this.uuid]: {\r\n                    status: 'edit',\r\n                    items: formColumns,\r\n                    moduletype: \"form\",\r\n                    isunfold: false,\r\n                },\r\n            }, this.uuid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 获取所有meta\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    getMeta = () => {\r\n        let meta = this.getStore(\"meta\");\r\n        return meta;\r\n    };\r\n\r\n    /**\r\n     * @description: 是否包含当前meta\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    _hasMeta(id) {\r\n        let meta = this.getStore(\"meta\") || {};\r\n        if (!id || !isObject(meta[id]) || !meta[id].items) {\r\n            console.warn('not find meta');\r\n            return [];\r\n        }\r\n        return meta[id].items;\r\n    }\r\n\r\n    /**\r\n     * @description: 获取id所在视图的meta\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    getViewMeta(id) {\r\n        let viewMeta = this._hasMeta(id);\r\n        return viewMeta;\r\n    }\r\n\r\n    /**\r\n     * @description: 设置数据\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    setData({ data = [], shouldForceUpdate = true, callback }) {\r\n        let res = isArray(data) ? data : this.getData();\r\n        // console.log(res);\r\n        // 格式化data\r\n        this.setStore([\"data\"], res, shouldForceUpdate, callback);\r\n    }\r\n\r\n    /**\r\n     * regexp 可以是方法 也可以是参数\r\n     * @description: 获取数据\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    // @infoLog\r\n    getData(regexp = []) {\r\n        let data = this.getStore(\"data\");\r\n        // console.log(data);\r\n        // 添加规则什么的  比如删除 \r\n\r\n        data = data.filter(item => {\r\n            return !regexp.includes(item.status);\r\n        });\r\n        return data || [];\r\n    }\r\n\r\n    // 刷新整个绑定对象\r\n    refresh(callback) {\r\n        this.forceUpdate && this.forceUpdate(callback);\r\n    }\r\n\r\n    getHooks = () => {\r\n        // 这样处理的一下 才能报错  方法内部的this 永远指向 实例  否则会指向下面的 {} 对象\r\n        this.getMeta = this.getMeta.bind(this);\r\n        this.setMeta = this.setMeta.bind(this);\r\n        return {\r\n            // 按路径索引 给内部使用\r\n            getStore: this.getStore.bind(this),\r\n            setStore: this.setStore.bind(this),\r\n            /*-------------------上面的部分------------------*/\r\n            //模板\r\n            getMeta: this.getMeta.bind(this),\r\n            setMeta: this.setMeta.bind(this),\r\n            getViewMeta: this.getViewMeta.bind(this),\r\n\r\n            // 缓存\r\n            getCache: this.getCache.bind(this),\r\n            setCache: this.setCache.bind(this),\r\n\r\n            //\r\n            setData: this.setData.bind(this),\r\n            getData: this.getData.bind(this),\r\n\r\n            // 刷新\r\n            refresh: this.refresh,\r\n        };\r\n    }\r\n}\r\n\r\nexport default hookFactory(Store);","/*\r\n * @Descripttion:树状表组件\r\n * @version:\r\n * @Author: bbq\r\n * @Date: 2020-12-07 17:01:56\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2021-02-26 14:01:42\r\n */\r\nimport React, { Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport classnames from 'classnames';\r\nimport { Table, Checkbox, Selectable as NCSelectable } from '@platform/base';\r\nimport { isUndefined, isFunction, isArray, getLangCode, getMultiLang, getSysFieldid, pageTo, changeTime, formatDatetime } from '@platform/api';\r\nimport Cell from './Cell';\r\nimport { STOP_CHECK_ELEMENT, STOP_CHECK_OPERATION_ELEMENT } from './containers';\r\nimport { BaseComponent } from '@platform/template';\r\nimport Form from '@platform/form';\r\nimport { getChildren, stopCheckBoxChange, countDeep, getLists } from './utils';\r\nimport useTreeTable from './store';\r\nrequire('./treeTableManyCol.less');\r\n\r\nconst defaultColor = ['#111111', '#555555', '#111', '#555'];\r\n\r\nclass TreeTable extends BaseComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            langJson: {},\r\n            _: '',\r\n        };\r\n        const { store, id, isCheckedHasChild, async } = props;\r\n        store.setStore('name', id, false);\r\n        // 表单\r\n        this.uuid = store.getStore('uuid');\r\n\r\n        // 计算主表表体高度\r\n        let tableHeight = 0;\r\n        const screenHeight = window.screen.width;\r\n        if (screenHeight <= 1919 > 1440) {\r\n            tableHeight = 48 * 10 + 'px';\r\n        } else if (screenHeight > 1919) {\r\n            tableHeight = 56 * 10 + 'px';\r\n        } else {\r\n            tableHeight = 40 * 10 + 'px';\r\n        }\r\n        store.setStore('tableHeight', tableHeight, false);\r\n\r\n        store.setStore('isCheckedHasChild', isCheckedHasChild, false);\r\n        store.setStore('async', async, false);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        const { store } = this.props;\r\n        const { setCache } = store;\r\n        //加载多语\r\n        const callback = json => {\r\n            // this.setState({ json });\r\n            setCache('langJson', json || {});\r\n            this.setState({ langJson: json });\r\n        };\r\n        getMultiLang({ moduleId: \"containers_insert_tree_table\", callback });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { store, isCheckedHasChild, async } = nextProps;\r\n        isUndefined(isCheckedHasChild) && store.setStore('isCheckedHasChild', isCheckedHasChild, false);\r\n        store.setStore('async', async, false);\r\n    }\r\n\r\n    componentWillUnMount() {\r\n    }\r\n\r\n    /* setState */\r\n    setStateEve = () => {\r\n        this.forceUpdate();\r\n    };\r\n\r\n    // 查找数据类型，并返回\r\n    checkDataType = field => {\r\n        const { store, id } = this.props;\r\n        const meta = store.getMeta();\r\n        const columns = meta[id];\r\n        let data = columns.items.find(item => item.attrcode === field);\r\n        if (data) {\r\n            return data.itemtype;\r\n        }\r\n    };\r\n\r\n    //  处理数据格式\r\n    createNewData = (data, fullDataObject = {}, childKeyRecord = []) => {\r\n        const dataSource = data.map((item, index) => {\r\n            item.key = item.rowId;\r\n            // 记录一下行顺序给 框选使用\r\n            item.rowIndex = index;\r\n            fullDataObject[item.key] = fullDataObject[item.key] || {};\r\n\r\n            if (item.values.pid) {\r\n                item.pid = item.values.pid.value;\r\n            }\r\n            if (Array.isArray(item.children)) {\r\n                let childrenKeys = [];\r\n                this.createNewData(item.children, fullDataObject, childrenKeys);\r\n                fullDataObject[item.key].childrenKeys = childrenKeys;\r\n            }\r\n            fullDataObject[item.key].item = item;\r\n            // 取值给父级\r\n            childKeyRecord.push(item.key);\r\n            return item;\r\n        });\r\n        return dataSource;\r\n    };\r\n\r\n    /* 复选框change事件(多选) */\r\n    itemCheckBoxChange = (data, key) => {\r\n        let { store, showContextMenu } = this.props;\r\n        let checkedKeys = store.getStore('checkedKeys');\r\n        let indeterminateKeys = store.getStore('indeterminateKeys');\r\n        checkedKeys[key] = !checkedKeys[key];\r\n        let isCheckedHasChild = store.getStore('isCheckedHasChild');\r\n\r\n        function setChecked(children) {\r\n            if (Array.isArray(children)) {\r\n                children.forEach(item => {\r\n                    checkedKeys[item.key] = checkedKeys[key];\r\n                    if (Array.isArray(item.children)) {\r\n                        setChecked(item.children);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        //包含下级时，全部选中\r\n        if (isCheckedHasChild && showContextMenu) {\r\n            let children = getChildren(data, key);\r\n            console.log(\"设置children选中:  children\", children)\r\n            setChecked(children);\r\n        }\r\n\r\n        //只有在勾选下级选中情况下才会设置半选状态\r\n        if (isCheckedHasChild) {\r\n            //设置半选状态\r\n            indeterminateKeys[key] = false;\r\n            const fullDataObject = store.getStore('fullDataObject') || {};\r\n            let pid = fullDataObject[key] && fullDataObject[key].item.pid;\r\n            function setPidCheckedStatus(pid) {\r\n                function getAllChilrenList() {\r\n                    let children = getChildren([fullDataObject[pid].item], pid);\r\n                    let treeToList = getLists(children);\r\n                    return treeToList;\r\n                }\r\n\r\n                let allChilrenList = getAllChilrenList();\r\n                let allLength = allChilrenList.length;\r\n                let checkedLength = allChilrenList.filter(x => checkedKeys[x.key]).length;\r\n                if (allLength === checkedLength) {\r\n                    checkedKeys[pid] = true;\r\n                    indeterminateKeys[pid] = false;\r\n                } else if (checkedLength) {\r\n                    checkedKeys[pid] = false;\r\n                    indeterminateKeys[pid] = true;\r\n                } else {\r\n                    checkedKeys[pid] = false;\r\n                    indeterminateKeys[pid] = false;\r\n                }\r\n            }\r\n            while (pid) {\r\n                //indeterminateKeys[pid] = true;\r\n                if (fullDataObject[pid] && fullDataObject[pid].item) {\r\n                    setPidCheckedStatus(pid);\r\n                }\r\n                pid = fullDataObject[pid] && fullDataObject[pid].item && fullDataObject[pid].item.pid;\r\n            }\r\n            /*  let OriginFullDataObj = {...fullDataObject};\r\n            delete OriginFullDataObj[\"all\"];\r\n            let OriginCheckedKeys = {...checkedKeys};\r\n            delete OriginCheckedKeys[\"all\"];\r\n            let allKeysCount = Object.keys(OriginFullDataObj).length;\r\n            let checkedCount = Object.values(OriginCheckedKeys).filter(x=>x).length;\r\n            if(allKeysCount === checkedCount){\r\n                checkedKeys[\"all\"] = true;\r\n                indeterminateKeys[\"all\"] = false;\r\n            }else if(checkedCount){\r\n                checkedKeys[\"all\"] = false;\r\n                indeterminateKeys[\"all\"] = true;\r\n            }else{\r\n                checkedKeys[\"all\"] = false;\r\n                indeterminateKeys[\"all\"] = false;\r\n            } */\r\n        }\r\n\r\n        store.setStore('checkedKeys', checkedKeys, false);\r\n        store.setStore('indeterminateKeys', indeterminateKeys, true);\r\n    };\r\n\r\n    /* 全选按钮change事件 */\r\n    selectAllChange = checked => {\r\n        /*  let { store } = this.props;\r\n        const fullDataObject = store.getStore('fullDataObject') || {};\r\n        let checkedKeys = store.getStore('checkedKeys');\r\n        let indeterminateKeys = store.getStore('indeterminateKeys');\r\n        let allKeys = Object.keys(fullDataObject);\r\n        checkedKeys[\"all\"] = checked;\r\n        indeterminateKeys[\"all\"] = false;\r\n        for (let key of allKeys) {\r\n            checkedKeys[key] = checked;\r\n            indeterminateKeys[key] = false;\r\n        }\r\n        store.setStore('checkedKeys', checkedKeys, false);\r\n        store.setStore('indeterminateKeys', indeterminateKeys, true); */\r\n    }\r\n\r\n    /* 复选框change事件(单选) */\r\n    checkBoxChange_radio = (data, key) => {\r\n        let { store } = this.props;\r\n        let checkedKeys = store.getStore('checkedKeys');\r\n\r\n        if (checkedKeys[key]) {\r\n            checkedKeys = {};\r\n        } else {\r\n            checkedKeys = { [key]: true };\r\n        }\r\n        store.setStore('checkedKeys', checkedKeys, false);\r\n    };\r\n\r\n    /* 复选框选中事件 */\r\n    onCheckboxChangeChild = (text, record, index, e) => {\r\n        let { store, checkboxChange, checkedType } = this.props;\r\n        let data = store.getData();\r\n\r\n        e.stopPropagation();\r\n        if (checkedType === 'radio') {\r\n            //单选\r\n            this.checkBoxChange_radio(data, record.key);\r\n        } else {\r\n            //多选\r\n            this.itemCheckBoxChange(data, record.key);\r\n        }\r\n\r\n        if (isFunction(checkboxChange)) {\r\n            checkboxChange(record, index, e);\r\n        }\r\n\r\n        // 更新\r\n        this.forceUpdate();\r\n    };\r\n\r\n    /* 查找对应的行数据 */\r\n    findItem = (data, key) => {\r\n        let res = null;\r\n        let f = data => {\r\n            data.map(item => {\r\n                if (item.rowId === key) {\r\n                    res = item;\r\n                    return true;\r\n                } else if (Array.isArray(item.values.children)) {\r\n                    let r = f(item.values.children);\r\n                    if (r) {\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        f(data);\r\n        return res;\r\n    };\r\n\r\n    // 处理模板\r\n    createNewCol = (data, maxDeep) => {\r\n        let { showCheckBox, onCellMouseDown, store, multipleRowCell } = this.props;\r\n        let { langJson } = this.state;\r\n        let expandedKeys = store.getStore('expandedKeys');\r\n        let checkedKeys = store.getStore('checkedKeys');\r\n        let indeterminateKeys = store.getStore('indeterminateKeys');\r\n        let oldSearchValue = store.getStore('searchValue');\r\n        const multiYes = langJson && langJson['insert-tree-table-009'];\r\n        const multiNo = langJson && langJson['insert-tree-table-010'];\r\n        let newArr = [];\r\n\r\n        if (!isArray(data) || data.length < 1) {\r\n            return [];\r\n        }\r\n\r\n        data.forEach(item => {\r\n            if (item.visible) {\r\n                item._width = item._width || item.width || 120;\r\n                item.width = item.width || 120;\r\n                item.title = (\r\n                    <span\r\n                        fieldid={getSysFieldid(item.attrcode || 'opr')}\r\n                        style={{ color: defaultColor.includes(item.color) ? '' : item.color }}\r\n                    >\r\n                        {' '}\r\n                        {item.label}{' '}\r\n                    </span>\r\n                );\r\n                item.dataIndex = item.attrcode;\r\n                if (item.itemtype !== 'customer' && item.itemtype !== 'numberindex') {\r\n                    if (!item.hasOwnProperty('render')) {\r\n                        item.render = (text, record, index) => {\r\n                            if (record && record.values.hasOwnProperty(item.attrcode)) {\r\n                                if (item.itemtype === 'switch') {\r\n                                    return (\r\n                                        <span fieldid={getSysFieldid(item.attrcode)}\r\n                                            onMouseDown={e => {\r\n                                                onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);\r\n                                            }}\r\n                                        >\r\n                                            {record.values[item.attrcode].value ? multiYes : multiNo}\r\n                                        </span>\r\n                                    );\r\n                                } else {\r\n                                    let langIndex;\r\n                                    let langAttrCode;\r\n                                    let context = '';\r\n                                    if (item.itemtype === 'residtxt') {\r\n                                        let LangCode = getLangCode();\r\n                                        let loginLang = item.languageMeta.filter(i => i.languageCode == LangCode);\r\n                                        if (loginLang[0]) {\r\n                                            langIndex = loginLang[0].index == '1' ? '' : loginLang[0].index;\r\n                                            langAttrCode = item.attrcode + langIndex;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (\r\n                                        langAttrCode && record.values[langAttrCode] &&\r\n                                        (record.values[langAttrCode].display || record.values[langAttrCode].value)\r\n                                    ) {\r\n                                        context =\r\n                                            record.values[langAttrCode].display ||\r\n                                            record.values[langAttrCode].value ||\r\n                                            '';\r\n                                    } else {\r\n                                        context =\r\n                                            record.values[item.attrcode].display ||\r\n                                            record.values[item.attrcode].value ||\r\n                                            '';\r\n                                    }\r\n\r\n                                     //格式化时间格式\r\n                                     switch (item.itemtype) {\r\n                                        case 'datetimepicker':\r\n                                        case 'NCTZDatePickClientTime':\r\n                                            context = changeTime(context , 'YYYY-MM-DD HH:mm:ss');\r\n                                            break;\r\n                                        case 'NCTZDatePickerStart':\r\n                                        case 'NCTZDatePickerEnd':\r\n                                        case 'NCTZDatePickClientHourTime':\r\n                                        case 'datepicker':\r\n                                            context = changeTime(context , 'YYYY-MM-DD');\r\n                                            break;\r\n                                    }\r\n                                    switch (item.itemtype) {\r\n                                        case 'NCTZDatePickerStart':\r\n                                        case 'NCTZDatePickerEnd':\r\n                                        case 'NCTZDatePickClientHourTime':\r\n                                        case 'datePickerNoTimeZone':\r\n                                        case 'datepicker':\r\n                                            context = formatDatetime(context, 'date');\r\n                                            break;\r\n                                        case 'timepicker':\r\n                                            context = formatDatetime(context, 'time');\r\n                                            break;\r\n                                        case 'datetimepicker':\r\n                                        case 'NCTZDatePickClientTime':\r\n                                            context = formatDatetime(context, 'datetime');\r\n                                            break;\r\n                                    }\r\n\r\n\r\n                                    const fixedStyle = { display: '' };\r\n\r\n                                    if (item.fixed && item.fixed === 'left') {\r\n                                        if (item.width) {\r\n                                            let width = String(item.width).replace('px', '');\r\n                                            if (width != '120' && showCheckBox) {\r\n                                                fixedStyle.width = item.width;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (typeof context != 'string') {\r\n                                        context += '';\r\n                                    }\r\n                                    // 添加高亮 by bbqin\r\n                                    let searchValue = oldSearchValue || '';\r\n                                    const searchValueLow = searchValue.toLocaleLowerCase();\r\n                                    const contextLow = context.toLocaleLowerCase();\r\n                                    let beforeStr = '';\r\n                                    let afterStr = context;\r\n                                    const index = contextLow.indexOf(searchValueLow);\r\n                                    if (searchValue && index !== -1) {\r\n                                        beforeStr = context.substr(0, index);\r\n                                        afterStr = context.substr(index + searchValue.length);\r\n                                        searchValue = context.substr(index, searchValue.length);\r\n                                    }\r\n                                    let isEllipsis = this.props.store.getStore('isEllipsis');\r\n                                    return (\r\n                                        <Cell\r\n                                            item={item}\r\n                                            beforeStr={beforeStr}\r\n                                            afterStr={afterStr}\r\n                                            searchValue={searchValue}\r\n                                            fixedStyle={fixedStyle}\r\n                                            context={context}\r\n                                            isEllipsis={isEllipsis}\r\n                                            multipleRowCell={multipleRowCell}\r\n                                            index={index}\r\n                                            record={record}\r\n                                            onCellMouseDown={onCellMouseDown}\r\n                                        />\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                return <span\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        height: '100%',\r\n                                        display: 'inline-block',\r\n                                    }}\r\n                                    onMouseDown={e => {\r\n                                        onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);\r\n                                    }}\r\n                                ></span>;\r\n                            }\r\n                        };\r\n                    }\r\n                } else if (\r\n                    item.itemtype === 'customer' &&\r\n                    item.hasOwnProperty('render') &&\r\n                    item.alreadyAssignment === undefined\r\n                ) {\r\n                    let Irender = item.render;\r\n                    item.alreadyAssignment = true;\r\n                    item.render = (text, record, index) => {\r\n                        return (\r\n                            <span fieldid={getSysFieldid('opr')} className={STOP_CHECK_OPERATION_ELEMENT}\r\n                                onMouseDown={e => {\r\n                                    onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);\r\n                                }}\r\n                            >\r\n                                {Irender(text, record, index)}\r\n                            </span>\r\n                        );\r\n                    };\r\n                }\r\n                newArr.push(item);\r\n            }\r\n        });\r\n        let defaultColumns = [\r\n            {\r\n                title: <span fieldid={getSysFieldid('firstcol')} />,\r\n                /*   title: showCheckBox ? (<Checkbox className=\"table-checkbox\" fieldid={getSysFieldid('firstcol')}\r\n                    onChange={this.selectAllChange} checked={checkedKeys[\"all\"]}\r\n                    indeterminate={indeterminateKeys[\"all\"]} />) : <span fieldid={getSysFieldid('firstcol')} />, */\r\n                attrcode: 'checkbox',\r\n                dataIndex: 'checkbox',\r\n                itemtype: 'customer',\r\n                width: '100px',\r\n                _width: '100px',\r\n                render: (text, record, index) => {\r\n                    // console.log(record, index);\r\n                    if (showCheckBox) {\r\n                        return (\r\n                            <Checkbox\r\n                                onMouseDown={e => {\r\n                                    onCellMouseDown && onCellMouseDown(record, index, 'checkbox', {\r\n                                        attrcode: 'checkbox',\r\n                                        itemtype: 'customer',\r\n                                    }, e);\r\n                                }}\r\n                                className=\"table-checkbox\"\r\n                                checked={checkedKeys[record.key]}\r\n                                indeterminate={indeterminateKeys[record.key]}\r\n                                onClick={this.onCheckboxChangeChild.bind(this, text, record, index)}\r\n                            />\r\n                        );\r\n                    }\r\n                },\r\n            },\r\n        ];\r\n\r\n        if (newArr[0].fixed && newArr[0].fixed == 'left') {\r\n            defaultColumns[0].fixed = 'left';\r\n        }\r\n\r\n        let resArr = showCheckBox ? defaultColumns.concat(newArr) : newArr;\r\n        // 给第一行增加图标\r\n        const oldFirstColRender = resArr[0].render;\r\n        resArr[0].render = null;\r\n        resArr[0].render = (text, record, index) => {\r\n            let expendSwich;\r\n            if ((Object.prototype.toString.call(record.isLeaf) == '[object Boolean]' && !record.isLeaf) ||\r\n                (Object.prototype.toString.call(record.isleaf) == '[object Boolean]' && !record.isleaf)) {\r\n                expendSwich = expandedKeys.includes(record.key) ? (\r\n                    <i\r\n                        className={`icon iconfont  icon-wenjianjiadakai tree-wenjian treeTableIcon ${STOP_CHECK_ELEMENT}`}\r\n                    />\r\n                ) : (<i className={`icon iconfont  icon-wenjianjia tree-wenjian treeTableIcon ${STOP_CHECK_ELEMENT}`} />);\r\n            } else {\r\n                expendSwich = <i className=\"dian\" style={{ display: 'none' }} />;\r\n            }\r\n            const res = oldFirstColRender(text, record, index);\r\n\r\n            if (\r\n                res &&\r\n                res.props &&\r\n                res.props.children &&\r\n                res.props.children[0] &&\r\n                res.props.children[0].props &&\r\n                res.props.children[0].props.className === 'expend-switch'\r\n            ) {\r\n                return res;\r\n            }\r\n\r\n            if (res && res.props && res.props.className === 'table-checkbox') {\r\n                return (\r\n                    <span fieldid={getSysFieldid('firstcol')}\r\n                        onMouseDown={e => {\r\n                            onCellMouseDown && onCellMouseDown(record, index, 'checkbox', {\r\n                                attrcode: 'checkbox',\r\n                                itemtype: 'customer',\r\n                            }, e);\r\n                        }}\r\n                    >\r\n                        <span className=\"first-col\">{res}</span>\r\n                        <span className=\"expend-switch\">{expendSwich}</span>\r\n                    </span>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <span\r\n                    fieldid={getSysFieldid('firstcol')}\r\n                    onMouseDown={e => {\r\n                        onCellMouseDown && onCellMouseDown(record, index, 'checkbox', {\r\n                            attrcode: 'checkbox',\r\n                            itemtype: 'customer',\r\n                        }, e);\r\n                    }}\r\n\r\n                    className={\r\n                        classnames({ zaiyihang: showCheckBox })\r\n                    }\r\n                >\r\n                    <span className=\"expend-switch\">{expendSwich}</span>\r\n                    <span className=\"first-col\">{res}</span>\r\n                </span >\r\n            );\r\n        };\r\n\r\n        // 给第一列追加宽度\r\n        let width = resArr[0]._width;\r\n        if (width) {\r\n            if (typeof width === 'string') {\r\n                if (width.includes('px')) {\r\n                    width = width.replace('px', '');\r\n                }\r\n                width = Number(width);\r\n            }\r\n            width += countDeep(maxDeep) * 16;\r\n        }\r\n        resArr[0].width = width;\r\n        return resArr;\r\n    };\r\n\r\n    //\t展开行\r\n    onExpand = (status, item, e) => {\r\n        let { store, expandEve, collapandEve } = this.props;\r\n        let isCheckedHasChild = store.getStore('isCheckedHasChild')\r\n        if (status) {\r\n            if (expandEve && typeof expandEve === 'function') {\r\n                store.setStore('currentRow', item, false);\r\n                expandEve(item, isCheckedHasChild);\r\n            }\r\n        } else {\r\n            if (isFunction(collapandEve)) {\r\n                collapandEve(item);\r\n            }\r\n        }\r\n        // 更新\r\n        this.forceUpdate();\r\n    };\r\n\r\n    // 新增节点弹出框内容\r\n    modalContent = () => {\r\n        const { store, onAfterEvent, onBeforeEvent } = this.props;\r\n        let formStore = store.getStore('formStore');\r\n        // console.log(this.uuid);\r\n\r\n        return (\r\n            <div className=\"addModal\">\r\n                <Form\r\n                    name={this.uuid}\r\n                    config={{\r\n                        onAfterEvent,\r\n                        onBeforeEvent,\r\n                    }}\r\n                    store={formStore}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // 删除 事件回调\r\n    delNodeEve = () => {\r\n        let { delNodeCallBack } = this.props;\r\n        if (isFunction(delNodeCallBack)) {\r\n            delNodeCallBack(this.uuid);\r\n        }\r\n    };\r\n\r\n    // 模态框确定按钮事件\r\n    beSureBtnClick = () => {\r\n        let { modal, store, addNodeCallBack, editNodeCallBack } = this.props;\r\n        let modalType = store.getStore('modalType');\r\n        let currentRow = store.getStore('currentRow');\r\n        let formStore = store.getStore('formStore');\r\n        let isValid = formStore.isCheckNow();\r\n        // console.log(isValid); TODO\r\n        if (!isValid) {\r\n            return false;\r\n        }\r\n        let data = { values: JSON.parse(JSON.stringify(formStore.getAllFormValue())) };\r\n        if (modalType === 'add') {\r\n            data.status = 2;\r\n            if (isFunction(addNodeCallBack)) {\r\n                addNodeCallBack(data, currentRow);\r\n            }\r\n        } else if (modalType === 'edit') {\r\n            if (isFunction(editNodeCallBack)) {\r\n                editNodeCallBack(data, currentRow);\r\n            }\r\n        }\r\n        modal.close('treeTableManyColModal');\r\n    };\r\n\r\n    // 双击行\r\n    onRowDoubleClick = (record, index, event) => {\r\n        let { ncOnRowDoubleClick } = this.props;\r\n        if (isFunction(ncOnRowDoubleClick)) {\r\n            ncOnRowDoubleClick(record, index, event);\r\n        }\r\n    };\r\n\r\n    // 单击行\r\n    onRowClick = (row, index, e) => {\r\n        let { store, checkOnRowClick, showCheckBox, onRowClickEve } = this.props;\r\n        store.setStore('currentSelectedRow', row, false);\r\n        // 为了避免和新开发的行框选点选区域选事件冲突\r\n        if (e.ctrlKey || e.shiftKey || e.metaKey) {\r\n            return;\r\n        }\r\n        if (showCheckBox && stopCheckBoxChange(e, checkOnRowClick)) return;\r\n        if (isFunction(onRowClickEve)) {\r\n            onRowClickEve(row, index, e);\r\n        }\r\n        this.onCheckboxChangeChild(null, row, index, e);\r\n    };\r\n\r\n    // 行样式\r\n    rowClassName = (record, current) => {\r\n        let { store } = this.props;\r\n        let currentSelectedRow = store.getStore('currentSelectedRow');\r\n        if (currentSelectedRow && currentSelectedRow.key == record.key) {\r\n            return 'tree-table-col-selected';\r\n        } else {\r\n            return '';\r\n        }\r\n\r\n    };\r\n\r\n    // 菜单\r\n    createContextMenu = () => {\r\n        let { store, closeAllEve, hideExpandAll, expandAllEve, hideIncludeChild, extendRightMenu } = this.props;\r\n        let { langJson } = this.state;\r\n        let data = store.getData();\r\n        let isCheckedHasChild = store.getStore('isCheckedHasChild');\r\n\r\n        return <Fragment>\r\n            {\r\n                !hideExpandAll && <li\r\n                    className={\r\n                        classnames({ 'menu expand-all': true })\r\n                    }\r\n                    onClick={() => {\r\n                        let expandedKeys = [];\r\n                        function getAllExpandKeys(data) {\r\n                            data.forEach(item => {\r\n                                expandedKeys.push(item.key);\r\n                                if (Array.isArray(item.children)) {\r\n                                    getAllExpandKeys(item.children);\r\n                                }\r\n                            })\r\n                        }\r\n                        getAllExpandKeys(data)\r\n\r\n                        // 带更新\r\n                        store.setStore('expandedKeys', expandedKeys);\r\n\r\n                        //若为异步，调用业务全部展开回调\r\n                        isFunction(expandAllEve) && expandAllEve()\r\n                    }}\r\n                >\r\n                    {langJson['insert-tree-table-0013'] || '全部展开'}\r\n                </li>\r\n            }\r\n            <li\r\n                className={\r\n                    classnames({ 'menu close-all': true })\r\n                }\r\n                onClick={() => {\r\n                    // 更新\r\n                    store.setStore('expandedKeys', []);\r\n                    //业务全部收起的回调\r\n                    isFunction(closeAllEve) && closeAllEve();\r\n                }}\r\n            >\r\n                {langJson['insert-tree-table-0014'] || '全部收起'}\r\n            </li>\r\n\r\n            {\r\n                !hideIncludeChild && <li\r\n                    className={\r\n                        classnames({ 'menu include-child': true })\r\n                    }\r\n                    onClick={() => {\r\n                        // 带更新\r\n                        store.setStore('isCheckedHasChild', !isCheckedHasChild);\r\n                    }}\r\n                >\r\n                    <Checkbox\r\n                        className={'include-child-checkbox'}\r\n                        checked={isCheckedHasChild}\r\n                        onChange={() => {\r\n                            store.setStore('isCheckedHasChild', !isCheckedHasChild);\r\n                        }}\r\n                    />\r\n                    <span className={\r\n                        classnames({ 'include-child-selected': isCheckedHasChild })\r\n                    }> {langJson['insert-tree-table-0015'] || '包含下级'}</span>\r\n                </li>\r\n            }\r\n\r\n            {isFunction(extendRightMenu) && extendRightMenu()}\r\n        </Fragment>\r\n    }\r\n\r\n    getColSetConfig = () => { //---by liuxis 鼠标不做列设置\r\n        let { id, store } = this.props\r\n        const { getMeta } = store;\r\n        let meta = getMeta();\r\n        const appcode = meta.appcode || meta.code || pageTo.getAppCode();\r\n        const pagecode = meta.pagecode || pageTo.getPageCode();\r\n        const areaCode = id;\r\n        // return { appcode: '1', pagecode: '2', areaCode: '3' };\r\n        return { appcode, pagecode, areaCode };\r\n    };\r\n    render() {\r\n        let {\r\n            modal,\r\n            id,\r\n            store,\r\n            showCheckBox = false, // 是否需要复选框   默认false不显示\r\n            checkedType = 'checkbox', //勾选方式  多选/单选  checkbox/radio\r\n            checkboxChange,\r\n            scrollConfig,\r\n            isDrag = true,\r\n            adaptionHeight = true, //高度是否自适应\r\n            otherAreaHeight,\r\n            inModal = false,\r\n            fieldid,\r\n            isLazyload = true,\r\n            addBlankCol = true,\r\n            showContextMenu = false,\r\n            extendRightMenu,\r\n            showWidthAndHeightConfig = true,\r\n        } = this.props;\r\n\r\n        let { langJson } = this.state;\r\n\r\n        const { getStore, getViewMeta, getData, setStore } = store;\r\n        // 模板\r\n        let columns = getViewMeta(id);\r\n\r\n        // 全数据对象\r\n        let fullDataObject = {};\r\n        // 数据   this.createNewDataRes\r\n        let data = getData();\r\n\r\n        if (!columns || columns.length === 0 || !data) {\r\n            // 没有列模板就不渲染  避免特殊情况导致 操作列等列显示展开符号\r\n            return null;\r\n        }\r\n\r\n        let treeData = this.createNewData(data, fullDataObject);\r\n        // 记录下给 checkbox 渲染用 用于渲染checkbox 父子集关系\r\n        // console.log(fullDataObject);\r\n        store.setStore('fullDataObject', fullDataObject, false);\r\n        // 最大深度\r\n        const maxDeep = JSON.parse(JSON.stringify(treeData));\r\n        // 展开项\r\n        let expandedKeys = getStore('expandedKeys');\r\n        // 表格高度\r\n        let tableHeight = getStore('tableHeight');\r\n\r\n        // console.log(store, columns);\r\n\r\n        return (\r\n            <div id={id} className=\"treeTableManyCol\" fieldid={getSysFieldid(`${fieldid || id}_table`)}>\r\n                {showCheckBox && checkedType !== 'radio' && (\r\n                    <NCSelectable\r\n                        canvas={`#${id}`}\r\n                        // 注意可以加下前后空格\r\n                        selector=\" tbody tr \"\r\n                        unitKey=\"key\"\r\n                        disabled={checkedType === 'radio' || 'slide'} // 可选值 true false 'shift' 'ctrl' 'slide'\r\n                        userSelect={true} // 启用用户文字选中\r\n                        // unitsData={fullDataObject}  // 用dom做shift 操作 数据的问题是目前顺序不对 // 数组改为对象 给下面使用\r\n                        // 开始项  主要配合外部的 单选事件处理\r\n                        startItem=\"\"\r\n                        onSelect={(selectedRowKeys, hotkey, { currentKey }) => {\r\n                            // 树状数据不太好处理 需要一个拉平数据\r\n                            let rowLen = Object.keys(selectedRowKeys).length;\r\n                            if (rowLen > 0) {\r\n                                if (hotkey === 'ctrl') {\r\n                                    setStore(['checkedKeys', currentKey], selectedRowKeys[currentKey], true, () => {\r\n                                        let selectedRecord = fullDataObject[currentKey].item;\r\n                                        console.log(fullDataObject, currentKey, selectedRecord, '数据的问题处理');\r\n                                        if (isFunction(checkboxChange) && selectedRecord) {\r\n                                            checkboxChange(selectedRecord, selectedRecord.rowIndex, {});\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    setStore('checkedKeys', {});\r\n                                    for (const key in selectedRowKeys) {\r\n                                        if (selectedRowKeys.hasOwnProperty(key)) {\r\n                                            setStore(['checkedKeys', key], selectedRowKeys[key], false);\r\n                                        }\r\n                                    }\r\n\r\n                                    // 更新\r\n                                    store.refresh(() => {\r\n                                        // TODO 先使用循环调用时间 如果不行的话  后面需要单独加一个回调\r\n                                        for (const key in selectedRowKeys) {\r\n                                            if (selectedRowKeys.hasOwnProperty(key) && isFunction(checkboxChange)) {\r\n                                                let selectedRecord = fullDataObject[key];\r\n                                                selectedRowKeys[key] && checkboxChange(selectedRecord, selectedRecord.rowIndex, {});\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n                <Table\r\n                    lazyload={isLazyload}\r\n                    className={classnames(\"tree-table-manyCol-container\", { 'firstcol-ellipsis': this.props.store.getStore('isEllipsis') })}\r\n                    expandedRowKeys={expandedKeys} //搜索节点关键字后要展开的父节点\r\n                    columns={this.createNewCol(columns, maxDeep)}\r\n                    columnKey='attrcode'\r\n                    data={treeData}\r\n                    onExpand={this.onExpand}\r\n                    onExpandedRowsChange={expandedRowKeys => {\r\n                        // 更新\r\n                        store.setStore('expandedKeys', expandedRowKeys);\r\n                    }}\r\n                    bodyDisplayInRow={false}\r\n                    //折行回调\r\n                    foldingRowChange={isEllipsis => {\r\n                        store.setStore('isEllipsis', isEllipsis);\r\n                    }}\r\n                    scroll={scrollConfig || { y: tableHeight }}\r\n                    bodyStyle={{ minHeight: (scrollConfig && scrollConfig.y) ? scrollConfig.y : 60 }}\r\n                    onRowDoubleClick={this.onRowDoubleClick}\r\n                    adaptionHeight={adaptionHeight}\r\n                    otherAreaHeight={otherAreaHeight}\r\n                    inModal={inModal}\r\n                    onRowClick={this.onRowClick}\r\n                    isDrag={isDrag}\r\n                    ref={dom => {\r\n                        this.dom = ReactDOM.findDOMNode(dom);\r\n                    }}\r\n                    rowClassName={this.rowClassName}\r\n                    addBlankCol={addBlankCol}\r\n                    extendRightMenu={\r\n                        showContextMenu ? this.createContextMenu() :\r\n                            isFunction(extendRightMenu) ? extendRightMenu() : null\r\n                    }\r\n                    cancelCustomRightMenu={true}\r\n                    colsSettingParam={this.getColSetConfig()}\r\n                    showWidthAndHeightConfig={showWidthAndHeightConfig}\r\n                />\r\n\r\n                {langJson ? (\r\n                    modal.createModal('delNode', {\r\n                        title: langJson['insert-tree-table-001'],\r\n                        content: langJson['insert-tree-table-002'],\r\n                        beSureBtnClick: this.delNodeEve.bind(this),\r\n                        backdrop: 'static',\r\n                    })\r\n                ) : null}\r\n\r\n                {modal.createModal('treeTableManyColModal', {\r\n                    content: this.modalContent.call(this),\r\n                    beSureBtnClick: this.beSureBtnClick.bind(this),\r\n                    cancelBtnClick: () => {\r\n                        modal.close('treeTableManyColModal');\r\n                    },\r\n                    size: 'lg',\r\n                    userControl: true,\r\n                    backdrop: 'static',\r\n                })}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTreeTable.displayName = 'TreeTable';\r\nTreeTable.useTreeTable = useTreeTable;\r\n\r\nexport default TreeTable;\r\n","/*\r\n *   create by wangshhj\r\n * */\r\nimport React from 'react';\r\nimport TreeTable from './treeTable';\r\nimport useTreeTable from './store';\r\nimport { getSafeRandom } from '@platform/api'\r\nimport { countDeep as utilCountDeep, stopCheckBoxChange as utilStopCheckBoxChange, getChildren as utilGetChildren } from './utils';\r\n\r\nconst MODALNAME = {\r\n    add: \"新增节点\",\r\n    edit: \"编辑节点\",\r\n};\r\n\r\n/**\r\n * @desc 保存列的宽度\r\n * @type {{\r\n *   'attrCode': Number\r\n * }}\r\n */\r\nlet cellWidth = {};\r\nconst PID = \"root\";\r\n\r\n/**\r\n * 检测组件对象是否存在 bbq\r\n * @param {*} id \r\n */\r\nconst existenceCheck = function (id) {\r\n    let store = this.treeTableDataSource[id]\r\n    if (!store) {\r\n        store = useTreeTable();\r\n        this.treeTableDataSource[id] = store;\r\n        // 同步模板\r\n        store.setMeta(this.meta.getMeta());\r\n        console.warn(`所操作的表格中无ID为${id}的数据`);\r\n        return;\r\n    }\r\n    return store;\r\n}\r\n\r\n// 创建组件\r\nexport function treeTableCol(moduleId, config = {}) {\r\n    // this.register(\"treeTable\"); // 生成 this.treeTableDataSource[id]\r\n    let pageScope = this,\r\n        store = pageScope.treeTableDataSource[moduleId];\r\n    if (!store) {\r\n        store = useTreeTable();\r\n        pageScope.treeTableDataSource[moduleId] = store;\r\n        // 同步模板\r\n        store.setMeta(pageScope.meta.getMeta(), moduleId, false);\r\n        console.log(pageScope);\r\n    }\r\n\r\n    let { async, ...others } = config;\r\n\r\n    return <TreeTable\r\n        async={async}\r\n        store={store}\r\n        id={moduleId}\r\n        modal={this.modal}\r\n        {...others}\r\n    />\r\n}\r\n\r\n/*\r\n *    插入子节点数据\r\n *    @ child 子表数据\r\n *    @ parent 当前行信息\r\n * */\r\nfunction setChildNodeEve(\r\n    tableData,\r\n    child,\r\n    parent,\r\n    checkedKeys = {},\r\n    expandedKeys,\r\n    isCheckedHasChild,\r\n) {\r\n    child = JSON.parse(JSON.stringify(child)); // 清理 并拷贝对象\r\n    let parentKey = parent.key;\r\n    let len = tableData.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let item = tableData[i];\r\n        if (item.rowId === parentKey) {\r\n\r\n            if (expandedKeys && expandedKeys.length) {\r\n                clearExpandedKeys(tableData[i].children, expandedKeys)\r\n            }\r\n\r\n            tableData[i].children = child;\r\n\r\n            //父级勾选 包含下级时，勾选所有子级\r\n            if (isCheckedHasChild && checkedKeys[item.rowId]) {\r\n                setChecked(child, checkedKeys)\r\n            }\r\n            return true;\r\n        } else if (Array.isArray(item.children)) {\r\n            let res = setChildNodeEve(item.children, child, parent, checkedKeys, expandedKeys, isCheckedHasChild);\r\n            if (res) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n *   添加rowId;\r\n *   field: rowId字段\r\n * */\r\nfunction addRowId(data, field, expandedKeys) {\r\n    if (!Array.isArray(data)) {\r\n        console.warn(\"addRowId方法，第一个参数应为数组\");\r\n        return false;\r\n    }\r\n    if (data.length > 0 && !data[0].values[field]) {\r\n        console.warn(`addRowId方法，没有找到参数${field}`);\r\n        return false;\r\n    }\r\n    data.forEach(item => {\r\n        item.key = item.rowId = item.values[field].value;\r\n        expandedKeys && expandedKeys.push(item.values[field].value);\r\n        if (Array.isArray(item.children)) {\r\n            addRowId(item.children, field, expandedKeys);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n/*\r\n *   根据isleaf 添加children\r\n * */\r\nfunction addChildren(data) {\r\n    data.forEach(item => {\r\n        if (item.hasOwnProperty(\"isleaf\") && !item.isleaf) {\r\n            item.children = item.children || [];\r\n        }\r\n    });\r\n}\r\n\r\n/*\r\n *   编辑行事件\r\n * */\r\nfunction editRow(tableData, newItem) {\r\n    newItem = JSON.parse(JSON.stringify(newItem));\r\n    let i = tableData.length;\r\n    while (i--) {\r\n        let item = tableData[i];\r\n        if (item.rowId === newItem.rowId) {\r\n            tableData[i] = { ...tableData[i], ...newItem };\r\n            return true;\r\n        } else {\r\n            if (Array.isArray(item.children)) {\r\n                let res = editRow(item.children, newItem);\r\n                if (res) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n *   增加子节点事件\r\n * */\r\nfunction addChildNode(tableData, newItem, parent, syncAddNode) {\r\n    newItem = JSON.parse(JSON.stringify(newItem)); // 清理 并拷贝对象\r\n    let pk = null;\r\n    if (!parent) {\r\n        if (!newItem.values.pid) {\r\n            console.error(\"树状表添加子节点的方法没找到pid\");\r\n            return false;\r\n        }\r\n        pk = newItem.values.pid.value;\r\n    } else {\r\n        pk = parent.key;\r\n    }\r\n    let i = tableData.length;\r\n    while (i--) {\r\n        let item = tableData[i];\r\n        if (item.rowId === pk) {\r\n            if (!newItem.values.pid) {\r\n                newItem.values.pid = { value: pk };\r\n            }\r\n\r\n            // addChildRowEve 补丁\r\n            if (tableData[i] && syncAddNode) tableData[i].isleaf = false;\r\n\r\n            if (Array.isArray(tableData[i].children)) {\r\n                tableData[i].children.push(newItem);\r\n            } else {\r\n                if (syncAddNode) tableData[i].isleaf = false;\r\n                tableData[i].children = [newItem];\r\n            }\r\n            return true;\r\n        } else {\r\n            if (Array.isArray(item.children)) {\r\n                let res = addChildNode(\r\n                    item.children,\r\n                    newItem,\r\n                    parent,\r\n                    syncAddNode,\r\n                );\r\n                if (res) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n *   增加兄弟节点事件\r\n * */\r\nfunction addBrother(tableData, newItem, brother) {\r\n    newItem = JSON.parse(JSON.stringify(newItem)); // 清理 并拷贝对象\r\n    let pk = brother.key;\r\n    let len = tableData.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let item = tableData[i];\r\n        if (item.rowId === pk) {\r\n            tableData.splice(i + 1, 0, newItem);\r\n            return true;\r\n        } else {\r\n            if (Array.isArray(item.children)) {\r\n                let res = addBrother(item.children, newItem, brother);\r\n                if (res) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n *   删除行\r\n * */\r\n\r\nfunction delRow(tableData, key) {\r\n    let len = tableData.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let item = tableData[i];\r\n        if (item.rowId === key) {\r\n            tableData.splice(i, 1);\r\n            return true;\r\n        } else {\r\n            if (Array.isArray(item.children)) {\r\n                let res = delRow(item.children, key);\r\n                if (res) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n *   删除后检测节点是否还有子节点，若没有，删除children 。 只检测删除行的父元素\r\n * */\r\nfunction checkHasChildren(tableData, parentRowId) {\r\n    let i = tableData.length;\r\n    while (i--) {\r\n        let item = tableData[i];\r\n        if (item.rowId === parentRowId) {\r\n            if (Array.isArray(item.children) && item.children.length === 0) {\r\n                delete item.children;\r\n            }\r\n            return true;\r\n        } else {\r\n            if (Array.isArray(item.children)) {\r\n                let res = checkHasChildren(item.children);\r\n                if (res) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 根据rowid获取当前行数据\r\n */\r\nfunction getValueByRowIdEve(tableData, rowId) {\r\n    let i = tableData.length;\r\n    while (i--) {\r\n        let item = tableData[i];\r\n        if (item.rowId === rowId) {\r\n            return item;\r\n        } else {\r\n            if (Array.isArray(item.children)) {\r\n                let res = getValueByRowIdEve(item.children, rowId);\r\n                if (res) {\r\n                    return res;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*  获取勾选项 */\r\nfunction getSelectedRowEve(data, store) {\r\n    let checkedKeys = store.getStore('checkedKeys');\r\n\r\n    let res = [];\r\n    const G = data => {\r\n        data.map(item => {\r\n            if (checkedKeys[item.key]) {\r\n                res.push(item);\r\n            }\r\n            if (Array.isArray(item.children)) {\r\n                G(item.children);\r\n            }\r\n        });\r\n    };\r\n    G(data);\r\n    return res;\r\n}\r\n\r\n/**\r\n * 设置勾选项\r\n * @param {*} moduleId\r\n * @param {*} checkedKeys\r\n * @param {*} merge\r\n */\r\nexport function setCheckedKeys(moduleId, checkedKeys, merge) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    let oldCheckedKeys = store.getStore('checkedKeys');\r\n\r\n    if (merge) {\r\n        checkedKeys = Object.assign(oldCheckedKeys, checkedKeys);\r\n    } else {\r\n        checkedKeys = Object.assign({}, checkedKeys);\r\n    }\r\n\r\n    store.setStore('checkedKeys', checkedKeys);\r\n}\r\n\r\n/**\r\n * 是否包含下级---未导出\r\n * @param {string} moduleId\r\n */\r\nexport function isCheckHasChild(moduleId) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    return store.getStore('isCheckedHasChild');\r\n}\r\n\r\n/**\r\n * 设置选中行\r\n * @param {*} moduleId\r\n * @param {*} record\r\n */\r\nexport function setSelectedRow(moduleId, record) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    store.setStore('currentSelectedRow', record);\r\n}\r\n\r\n/*==================================================================================*/\r\n\r\n/*\r\n *   初始化树状表数据\r\n *   @ data 数据\r\n *   @ rowId  表示行id的字段名\r\n *   @ 默认展开所有行 defaultExpandAllRows\r\n * */\r\nexport function initTreeTableData(\r\n    moduleId,\r\n    data,\r\n    rowId,\r\n    defaultExpandAllRows,\r\n    expandedRowKeys,\r\n) {\r\n    if (rowId === undefined) {\r\n        console.warn(\"树状表addRowId方法，第三个参数需要传表示行rowid 的字段\");\r\n        return false;\r\n    }\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let { async, isCheckedHasChild, checkedKeys } = store.getStore();\r\n    if (async) {\r\n        //异步时，需要添加children字段。\r\n        addChildren(data);\r\n    }\r\n    let res,\r\n        expandedKeys = [];\r\n    if (defaultExpandAllRows) {\r\n        res = addRowId(\r\n            data,\r\n            rowId,\r\n            expandedKeys,\r\n        );\r\n        if (isCheckedHasChild && checkedKeys) {\r\n            data.map(item => {\r\n                if (checkedKeys[item.key] && Array.isArray(item.children)) {\r\n                    setChecked(item.children, checkedKeys)\r\n                }\r\n            });\r\n        }\r\n    } else {\r\n        res = addRowId(data, rowId);\r\n        expandedRowKeys && (store.setStore('expandedKeys', expandedRowKeys, false));\r\n    }\r\n    if (res === false) {\r\n        console.warn(\r\n            `树状表addRowId方法，没有找到表示rowId的字段，请检查数据中是否存在${rowId}字段`,\r\n        );\r\n        return false;\r\n    }\r\n    store.setData({ data, shouldForceUpdate: false });\r\n    store.setStore('rowId', rowId, false);\r\n    isCheckedHasChild && (store.setStore('checkedKeys', checkedKeys, false));\r\n    defaultExpandAllRows && (store.setStore('expandedKeys', expandedKeys, false));\r\n    // 缓存数据以用于  前端查找 --bbqin\r\n    store.setCache('cacheData', JSON.parse(JSON.stringify(data)));\r\n    store.setStore('searchValue', null, true);\r\n}\r\n\r\n//设置子数据勾选\r\nfunction setChecked(children, checkedKeys) {\r\n    if (Array.isArray(children)) {\r\n        children.forEach(item => {\r\n            checkedKeys[item.key] = true;\r\n            if (Array.isArray(item.children)) {\r\n                setChecked(item.children);\r\n            }\r\n        });\r\n    }\r\n}\r\n//设置子数据勾选\r\nfunction clearExpandedKeys(children, expandedKeys) {\r\n    if (Array.isArray(children)) {\r\n        children.forEach(item => {\r\n            let index = expandedKeys.indexOf(item.key)\r\n            if (index !== -1) {\r\n                expandedKeys.splice(index, 1)\r\n            }\r\n            if (Array.isArray(item.children)) {\r\n                clearExpandedKeys(item.children, expandedKeys);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function updataDataSource(moduleId, callBack) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let data = store.getData();\r\n\r\n    if (callBack) {\r\n        const newDataSource = callBack(\r\n            JSON.parse(JSON.stringify(data)),\r\n        );\r\n        if (Array.isArray(newDataSource)) {\r\n            store.setCache('cacheData', newDataSource);\r\n            // 更新\r\n            store.setData({ data: newDataSource });\r\n        }\r\n    } else {\r\n        console.warn(\"请传回调参数，并且返回新的数据源\");\r\n    }\r\n}\r\n\r\n/**\r\n * 查询树表\r\n * @param {String} moduleId 模块Id\r\n * @param {String} searchValue 查詢字符串\r\n * @param {Array} filters 过滤关键字\r\n */\r\nexport function searchTreeTable({\r\n    moduleId,\r\n    searchValue,\r\n    filters = [],\r\n    expanded = true,\r\n    defaultExpandAllRows = false,\r\n}) {\r\n\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    if (Object.prototype.toString.call(filters) !== \"[object Array]\") {\r\n        // 如果不是数组\r\n        filters = [String(filters)];\r\n    }\r\n    // 确定是不是检索所有字段\r\n    let data = store.getCache('cacheData') || store.getData(),\r\n        expandedKeys = [],\r\n        expectData = [];\r\n    // 清空 数据\r\n    store.setStore('expandedKeys', [], false);\r\n\r\n    let searchResult = findDataByValueFilters({\r\n        data,\r\n        searchValue,\r\n        filters,\r\n        expandedKeys,\r\n        expanded,\r\n        defaultExpandAllRows,\r\n        expectData,\r\n    });\r\n\r\n    // 展开的键 expandedKeys 检索后是否展开 理论上被检索到的行应该展开\r\n    store.setData({\r\n        data: searchResult,\r\n        shouldForceUpdate: false\r\n    });\r\n    console.log(data);\r\n    // 记录一下关键字 用于做替换\r\n    store.setStore('searchValue', searchValue, false);\r\n    store.setStore('expandedKeys', expandedKeys, false);\r\n    store.refresh(() => {\r\n        // store.setStore('searchValue', null, false);\r\n    });\r\n}\r\n\r\n/**\r\n * 遍历  并且查询  符合要求的数据\r\n * @param {*} param0\r\n */\r\nfunction findDataByValueFilters({\r\n    data,\r\n    expandedKeys,\r\n    searchValue,\r\n    filters,\r\n    expanded,\r\n    defaultExpandAllRows,\r\n    expectData = [],\r\n}) {\r\n    if (!searchValue || data.length === 0) {\r\n        return data || [];\r\n    }\r\n    let needFilters = false,\r\n        filtersLength = filters.length;\r\n    // 不区分大小写\r\n    searchValue = searchValue.toLocaleLowerCase();\r\n    data.map(item => {\r\n        let isMatch = false,\r\n            values = item.values,\r\n            value;\r\n        let expectItem = JSON.parse(\r\n            JSON.stringify(item, function (k, v) {\r\n                if (\r\n                    k === \"children\" &&\r\n                    Object.prototype.toString.call(v) === \"[object Array]\"\r\n                ) {\r\n                    return null;\r\n                }\r\n                return v;\r\n            }),\r\n        ); // 数据拷贝\r\n        // console.log(expectItem);\r\n        for (let vi in values) {\r\n            // 该字段是否需要过滤\r\n            needFilters =\r\n                filtersLength === 0 ? true : filters.indexOf(vi) !== -1;\r\n            // 不区分大小写\r\n            value = String(\r\n                values[vi][\"display\"] || values[vi][\"value\"],\r\n            ).toLocaleLowerCase();\r\n            if (needFilters && value && value.indexOf(searchValue) !== -1) {\r\n                // 匹配到行\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n        if (Array.isArray(item.children)) {\r\n            // 子循环\r\n            expectItem.children = findDataByValueFilters({\r\n                data: item.children,\r\n                expandedKeys,\r\n                searchValue,\r\n                filters,\r\n                expanded,\r\n                defaultExpandAllRows,\r\n                expectData: [],\r\n            });\r\n            expectItem.children.length === 0 && (expectItem.children = null);\r\n        }\r\n        (isMatch || (expectItem.children && expectItem.children.length > 0)) &&\r\n            expectData.push(expectItem);\r\n        if (\r\n            (isMatch ||\r\n                (expectItem.children && expectItem.children.length > 0)) &&\r\n            (expanded || defaultExpandAllRows)\r\n        ) {\r\n            // 默认展开 或者全部展开\r\n            expandedKeys.push(item.key || item.rowId);\r\n        }\r\n    });\r\n    return expectData;\r\n}\r\n\r\n/*\r\n *   异步加载时，设置子表数据\r\n *    @ child 子表数据\r\n *    @ parent 点击的当前行数据\r\n * */\r\nexport function setChildNode(moduleId, child, parent, isCheckedHasChild) {\r\n    if (!moduleId || !child || !parent) {\r\n        console.warn(\"树状表setChildNode 方法参数不正确\");\r\n        return false;\r\n    }\r\n    if (!Array.isArray(child)) {\r\n        console.warn(\"树状表setChildNode 方法,第二个参数应为数组\");\r\n        return false;\r\n    }\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    let rowId = store.getStore('rowId');\r\n    let async = store.getStore('async');\r\n    let checkedKeys = store.getStore('checkedKeys');\r\n    let expandedKeys = store.getStore('expandedKeys');\r\n    let data = store.getData();\r\n    let cacheData = store.getCache('cacheData');\r\n\r\n    isCheckedHasChild = isCheckedHasChild || store.getStore('isCheckedHasChild');\r\n\r\n    if (async) {\r\n        addChildren(child);\r\n        addRowId(child, rowId);\r\n        setChildNodeEve(\r\n            data,\r\n            child,\r\n            parent,\r\n            checkedKeys,\r\n            expandedKeys,\r\n            isCheckedHasChild,\r\n        );\r\n        // 更新缓存数据以用于查找 by bbqin\r\n        setChildNodeEve(\r\n            cacheData,\r\n            child,\r\n            parent,\r\n            checkedKeys,\r\n            expandedKeys,\r\n            isCheckedHasChild,\r\n        );\r\n        // 更新\r\n        store.setStore('searchValue', null);\r\n    } else {\r\n        console.warn(\"setChildNode方法只能异步加载时调用\");\r\n    }\r\n}\r\n\r\nexport function getChildren(data, parentKey) {\r\n    return utilGetChildren(data, parentKey);\r\n}\r\n\r\n/*\r\n *   编辑行\r\n * */\r\nexport function editRowEve(moduleId, newData) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let rowId = store.getStore('rowId');\r\n    let data = store.getData();\r\n    let cacheData = store.getCache('cacheData');\r\n\r\n    if (!newData.values[rowId]) {\r\n        console.warn &&\r\n            console.warn(\r\n                `树状表editRowEve 方法,第二个参数中没有找到表示RowId的字段，请检查数据中是否有${rowId}字段`,\r\n            );\r\n        return false;\r\n    }\r\n    newData.rowId = newData.values[rowId].value;\r\n    addChildren([newData]);\r\n    editRow(data, newData);\r\n    // 更新缓存数据以用于查找 by bbqin\r\n    editRow(cacheData, newData);\r\n    // 更新\r\n    store.setStore('searchValue', null);\r\n}\r\n\r\n/*\r\n *   增加子节点\r\n * */\r\nexport function addChildRowEve(moduleId, newData) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let rowId = store.getStore('rowId');\r\n    let currentRow = store.getStore('currentRow');\r\n    let data = store.getData();\r\n    let cacheData = store.getCache('cacheData');\r\n\r\n    console.log(newData, currentRow, data, cacheData);\r\n\r\n    let runThis = item => {\r\n        let kValue = item.values[rowId];\r\n        item.values[rowId] =\r\n            kValue && kValue.value !== undefined && kValue.value !== null\r\n                ? kValue\r\n                : { value: getSafeRandom() };\r\n        // if (!item.values[rowId]) {\r\n        // \tconsole.warn(`树状表editRowEve 方法,第二个参数中没有找到表示RowId的字段，请检查数据中是否有${rowId}字段`);\r\n        // \treturn false;\r\n        // }\r\n        item.key = item.rowId = item.values[rowId].value;\r\n        addChildren([item]);\r\n\r\n        addChildNode(data, item, currentRow, true);\r\n        // 更新缓存数据以用于查找 by bbqin\r\n        addChildNode(cacheData, item, currentRow, true);\r\n\r\n        store.setStore('searchValue', null, false);\r\n    };\r\n    if (Array.isArray(newData)) {\r\n        newData.forEach(items => {\r\n            runThis(items);\r\n        });\r\n    } else {\r\n        runThis(newData);\r\n    }\r\n\r\n    // 更新\r\n    store.refresh();\r\n}\r\n/*\r\n *   更新全部子节点\r\n * */\r\nexport function updateChildRow(moduleId, newData, parentRow) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    let rowId = store.getStore('rowId');\r\n    let currentRow = store.getStore('currentRow');\r\n    let data = store.getData();\r\n\r\n    let newDataArr = []\r\n    let pk = \"root\"\r\n    if (currentRow) pk = currentRow.key\r\n    if (parentRow) pk = parentRow.key\r\n    if (Array.isArray(newData)) {\r\n        newDataArr = newData\r\n    } else {\r\n        newDataArr = [newDataArr]\r\n    }\r\n    const loop = (data, pk) => {\r\n        if (!data.length) return\r\n        data.map(item => {\r\n            let kValue = item.values[rowId];\r\n            item.values[rowId] = kValue && kValue.value !== undefined ? kValue : { value: getSafeRandom() };\r\n            item.key = item.rowId = item.values[rowId].value;\r\n            if (!item.values.pid) {\r\n                item.values.pid = { value: pk };\r\n            }\r\n            if (item.hasOwnProperty(\"isleaf\") && !item.isleaf) {\r\n                item.children = item.children || [];\r\n                loop(item.children, item.key)\r\n            }\r\n        })\r\n    }\r\n    const updateRowByRowId = (tableData, rowId) => {\r\n        let i = tableData.length;\r\n        while (i--) {\r\n            let item = tableData[i];\r\n            if (item.rowId === rowId) {\r\n                tableData[i].children = newDataArr\r\n                tableData[i].isleaf = false\r\n                return true\r\n            } else {\r\n                if (Array.isArray(item.children)) {\r\n                    let res = updateRowByRowId(item.children, rowId)\r\n                    if (res) return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    loop(newDataArr, pk) // 处理节点数据，检查key，rowId，children\r\n    if (!updateRowByRowId(data, pk)) {\r\n        data = newDataArr\r\n    }\r\n    // 更新\r\n    store.setStore('searchValue', null);\r\n}\r\n\r\n/*\r\n *   增加兄弟节点\r\n * */\r\nexport function addBrotherRow(moduleId, newData) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let rowId = store.getStore('rowId');\r\n    let currentRow = store.getStore('currentRow');\r\n    let data = store.getData();\r\n    let cacheData = store.getCache('cacheData');\r\n\r\n    if (!newData.values[rowId]) {\r\n        console.warn(\r\n            `树状表addBrotherRow 方法,第二个参数中没有找到表示RowId的字段，请检查数据中是否有${rowId}字段`,\r\n        );\r\n        return false;\r\n    }\r\n    newData.rowId = newData.values[rowId].value;\r\n    addChildren([newData]);\r\n    addBrother(data, newData, currentRow);\r\n    // 更新缓存数据以用于查找 by bbqin\r\n    addBrother(cacheData, newData, currentRow);\r\n    // 更新\r\n    store.setStore('searchValue', null);\r\n}\r\n\r\n/*\r\n *   删除节点\r\n * */\r\nexport function delRowByPk(moduleId, record) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    let data = store.getData();\r\n    let cacheData = store.getCache('cacheData');\r\n\r\n    let key = record.key;\r\n    delRow(data, key);\r\n    // 更新缓存数据以用于查找 by bbqin\r\n    delRow(cacheData, key);\r\n    if (record.pid) {\r\n        checkHasChildren(data, record.pid);\r\n        // 更新缓存数据以用于查找 by bbqin\r\n        checkHasChildren(cacheData, record.pid);\r\n    }\r\n\r\n    // 更新数据\r\n    store.setData({ data: data, shouldForceUpdate: false });\r\n    store.setCache('cacheData', cacheData);\r\n    // 更新\r\n    store.setStore('searchValue', null);\r\n}\r\n\r\n/*\r\n *   同步时，组装树状表所需要的数据结构\r\n * */\r\nexport function createNewData(data) {\r\n    if (!Array.isArray(data)) {\r\n        console.warn(\"createTreeData方法，参数应该为数组\");\r\n        return false;\r\n    }\r\n    let group = new Map();\r\n    data.forEach(e => {\r\n        if (!(e.values.pid && e.values.pid.value)) {\r\n            e.values.pid = { value: PID };\r\n        }\r\n        group.get(e.values.pid.value)\r\n            ? group.get(e.values.pid.value).push(e)\r\n            : group.set(e.values.pid.value, [e]);\r\n    });\r\n\r\n    function makeDOM(pid) {\r\n        if (group.get(pid)) {\r\n            return group.get(pid).map(e => {\r\n                e.children = makeDOM(e.values.refpk.value);\r\n                return e;\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    let newData = makeDOM(PID) || [];\r\n    /* 添加isleaf字段 */\r\n    const addIsLeaf = data => {\r\n        data.forEach(item => {\r\n            if (item.checked) {\r\n                item.checked = true;\r\n            } else {\r\n                item.checked = false;\r\n            }\r\n            if (Array.isArray(item.children)) {\r\n                item.isleaf = false;\r\n                addIsLeaf(item.children);\r\n            } else {\r\n                item.isleaf = true;\r\n            }\r\n        });\r\n    };\r\n\r\n    addIsLeaf(newData);\r\n\r\n    return newData;\r\n}\r\n\r\n/*\r\n *   获取当前表格所有数据\r\n * */\r\nexport function getAllValue(moduleId) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    return store.getData();\r\n}\r\n\r\nexport function getExpandedRowKeys(moduleId) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    return store.getStore('expandedKeys');\r\n}\r\n\r\n/*\r\n *   获取当前表格某行数据 byId\r\n * */\r\nexport function getValueByRowId(moduleId, rowId) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let data = store.getData();\r\n    return getValueByRowIdEve(data, rowId);\r\n}\r\n\r\n/*\r\n *   弹出框  (要改)\r\n * */\r\nexport function showModal(moduleId, record, modalType) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let langJson = store.getCache('langJson');\r\n    let formStore = store.getStore('formStore');\r\n    let uuid = store.getStore('uuid');\r\n\r\n    MODALNAME.add = langJson[\"insert-tree-table-012\"];\r\n    MODALNAME.edit = langJson[\"insert-tree-table-011\"];\r\n\r\n    store.setStore('currentRow', record, false);\r\n    // this.state.form[moduleId + 'form'] = modalType === 'edit' ? record.values : {};\r\n    const formValues = JSON.parse(JSON.stringify(modalType === \"edit\" ? record.values : {}));\r\n\r\n    console.log(formValues, formStore);\r\n    formStore.emptyAllFormValue();\r\n    formStore.setAllFormValue(formValues);\r\n\r\n    store.setStore('modalType', modalType, true);\r\n\r\n    this.modal.show(\"treeTableManyColModal\", { title: `${MODALNAME[modalType]}` });\r\n}\r\n\r\n/* 清空表格 */\r\nexport function emptyAllData(moduleId) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    store.setData({ data: [], shouldForceUpdate: false });\r\n    store.setCache('cacheData', []);\r\n    // 更新缓存数据以用于查找 by bbqin\r\n    store.setStore('searchValue', null);\r\n}\r\n\r\n/* 展开节点*/\r\nexport function openRow(moduleId, key) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    let expandedKeys = store.getStore('expandedKeys');\r\n\r\n    !expandedKeys.find(i => i === key) &&\r\n        expandedKeys.push(key);\r\n    store.refresh();\r\n}\r\n\r\n/* 收起节点*/\r\nexport function closeRow(moduleId, key) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n\r\n    let expandedKeys = store.getStore('expandedKeys');\r\n    let index = expandedKeys.findIndex(i => i === key);\r\n    expandedKeys.splice(index, 1);\r\n    store.refresh();\r\n}\r\n\r\n/* 获取选中行数据 */\r\nexport function getSelectedRow(moduleId) {\r\n    let store = existenceCheck.call(this, moduleId);\r\n    if (!store) {\r\n        return;\r\n    }\r\n    let data = store.getData();\r\n    let expandedKeys = store.getStore('expandedKeys');\r\n    let isCheckedHasChild = store.getStore('isCheckedHasChild');\r\n\r\n    const selectedRows = getSelectedRowEve(data, store);\r\n    let res = JSON.parse(JSON.stringify(selectedRows));\r\n\r\n    res = res.map(item => {\r\n        let { children, ...others } = item;\r\n        //勾选节点未展开, 且children不存在\r\n        if (\r\n            !expandedKeys.includes(item.key) &&\r\n            (!children || (Array.isArray(children) && children.length === 0))\r\n        ) {\r\n            //若勾选项不是叶子节点，且设置了isCheckHasChild:true\r\n            if (item.isleaf !== false && isCheckedHasChild) {\r\n                others.isCheckHasChild = true;\r\n            }\r\n        }\r\n        return others;\r\n    });\r\n    return res;\r\n}\r\n\r\n// /* 获取选中行数据 */\r\n// export function getSelectedRow(moduleId) {\r\n\r\n// }\r\n\r\n//   获取最深树层级 数\r\nexport function countDeep(source) {\r\n    return utilCountDeep(source);\r\n}\r\n\r\n/**\r\n * @desc 如果点击的是操作列，展开图标，文本夹图标就不执行选中事件。 选中文本时也不执行\r\n * @param e {object} 事件源\r\n * @param checkOnRowClick {boolean} 配置是否需要勾选功能\r\n */\r\nexport function stopCheckBoxChange(e, checkOnRowClick) {\r\n    return utilStopCheckBoxChange(e, checkOnRowClick);\r\n}\r\n\r\n\r\n/**\r\n * @desc 判断此单元格是否需要显示tooltip\r\n * @param cellDom {object} 单元格dom\r\n * @param attrCode {string}\r\n * @param fixed {string} 锁定列表\r\n * @return {boolean} true -> 显示tooltip, false -> 不显示\r\n */\r\nexport function perceptionTooltip({ cellDom, attrCode, fixed }) {\r\n    const PRE_FIX = \"nc_tree\";\r\n    let id = `${PRE_FIX}_${attrCode}`;\r\n    let cloneDom = document.getElementById(id);\r\n\r\n    if (cloneDom) {\r\n        cloneDom.innerText = cellDom.innerText;\r\n        return cloneDom.offsetWidth > cellWidth[attrCode];\r\n    } else if (fixed === \"left\") {\r\n        let fixedDom = document.querySelectorAll(\r\n            `.u-table-fixed-left span[fieldid=\"${attrCode}\"] span`,\r\n        )[0];\r\n\r\n        if (fixedDom === null) return false;\r\n\r\n        cloneDom = createCloneDomAndSetAttribute({\r\n            id,\r\n            attrCode,\r\n            cellWidth,\r\n            originDom: fixedDom,\r\n        });\r\n        return cloneDom.offsetWidth > fixedDom.offsetWidth;\r\n    } else {\r\n        cloneDom = createCloneDomAndSetAttribute({\r\n            id,\r\n            attrCode,\r\n            cellWidth,\r\n            originDom: cellDom,\r\n        });\r\n\r\n        return cloneDom.offsetWidth > cellDom.offsetWidthh;\r\n    }\r\n}\r\n\r\nfunction createCloneDomAndSetAttribute({ originDom, id, attrCode, cellWidth }) {\r\n    let cloneDom = originDom.cloneNode();\r\n    cloneDom.className = \"u-cell-hidden\";\r\n\r\n    cloneDom.id = id;\r\n    document.body.appendChild(cloneDom);\r\n    cloneDom.innerText = originDom.innerText;\r\n    cloneDom.height = \"0px\";\r\n    cellWidth[attrCode] = originDom.offsetWidth;\r\n    return cloneDom;\r\n}\r\n","/*\r\n * @Author: liyxt\r\n * @Date: 2019-10-21 14:15:59\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2020-08-07 14:28:12\r\n * @Description: file content\r\n */\r\n/*\r\n *  \t树状表组件\r\n * */\r\nimport React, { Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport classnames from 'classnames';\r\nimport { Table, Checkbox, Selectable as NCSelectable } from '@platform/base';\r\nimport Cell from './Cell';\r\nimport { isFunction, isArray, cloneObj, getLangCode, getMultiLang, getSysFieldid } from '@platform/api'\r\nimport { countDeep, stopCheckBoxChange } from './methods';\r\nimport { SAVE_MULTI, STOP_CHECK_ELEMENT, STOP_CHECK_OPERATION_ELEMENT } from './containers';\r\nimport { getChildren } from './methods';\r\nconst defaultColor = ['#111111', '#555555', '#111', '#555'];\r\n\r\nrequire('./treeTableManyCol.less');\r\n\r\nlet isMultilingual = false;\r\n// 计算主表表体高度\r\nlet tableHeight = 0;\r\nconst screenHeight = window.screen.width;\r\n\r\nif (screenHeight <= 1919 > 1440) {\r\n    tableHeight = 48 * 10 + 'px';\r\n} else if (screenHeight > 1919) {\r\n    tableHeight = 56 * 10 + 'px';\r\n} else {\r\n    tableHeight = 40 * 10 + 'px';\r\n}\r\n\r\nlet formId = null;\r\nfunction TreeTableManyCol(\r\n    id,\r\n    {\r\n        expandEve, //异步执行，点击加号展开子节点\r\n        collapandEve, //异步执行，点击收起\r\n        async, // 加载方式，同步或异步\r\n        editNodeCallBack, //编辑 回调\r\n        addNodeCallBack, //新增回调\r\n        delNodeCallBack, // 删除回调\r\n        onAfterEvent,\r\n        showCheckBox = false, // 是否需要复选框   默认false不显示\r\n        checkedType = 'checkbox', //勾选方式  多选/单选  checkbox/radio\r\n        checkboxChange,\r\n        scrollConfig,\r\n        ncOnRowDoubleClick,\r\n        isDrag = true,\r\n        multipleRowCell = false,\r\n        adaptionHeight = true, //高度是否自适应\r\n        inModal = false,\r\n        checkOnRowClick = true, //业务组配置点击行时勾选复选框\r\n        fieldid,\r\n        onRowClickEve, //单击行回调\r\n        isLazyload = true,\r\n        addBlankCol = true,\r\n        showContextMenu = false,\r\n        //全部展开回调\r\n        expandAllEve,\r\n        //收起全部\r\n        closeAllEve,\r\n        hideExpandAll = false,\r\n        hideIncludeChild = false,\r\n        onCellMouseDown,\r\n        extendRightMenu,\r\n        isCheckedHasChild = false,\r\n    } = {},\r\n) {\r\n    let flag = false;\r\n    let that = this;\r\n    if (!this.state.treeTableCol.hasOwnProperty(id)) {\r\n        this.state.treeTableCol[id] = {\r\n            firstTime: true,\r\n            async,\r\n            expandedKeys: [],\r\n            checkedKeys: {},\r\n            tableHeight,\r\n            isEllipsis: true,\r\n        };\r\n    }\r\n    let columns = this.state.meta[id];\r\n\r\n    if (!columns) {\r\n        return;\r\n    }\r\n    if (!this.state.treeTableCol[id].data) {\r\n        return;\r\n        // this.state.treeTableCol[id].data = [];\r\n    }\r\n\r\n    let thisTable = this.state.treeTableCol[id];\r\n\r\n    if(typeof thisTable.isCheckedHasChild === \"undefined\"){\r\n        thisTable.isCheckedHasChild = isCheckedHasChild;\r\n    }\r\n    \r\n    let treeData = thisTable.data;\r\n    let defTreeData = JSON.parse(JSON.stringify(treeData));\r\n    let defCol = cloneObj(columns);\r\n\r\n    //调用多语\r\n    const callback = (json, bool, LangData) => {\r\n        if (isMultilingual) return;\r\n        thisTable.multilingual = json;\r\n        SAVE_MULTI.lang = json;\r\n        that.setState(\r\n            { treeTableCol: that.state.treeTableCol },\r\n            () => {\r\n                isMultilingual = true;\r\n            },\r\n        );\r\n    };\r\n\r\n    getMultiLang({ moduleId: 'containers_insert_tree_table', callback });\r\n\r\n    //\t第一次渲染，处理数据，并设置编辑弹出模态框模板\r\n    if (thisTable.firstTime) {\r\n        formId = id + 'form';\r\n        let formItem = [];\r\n        if (!isArray(defCol.items)) {\r\n            console.error('树状表模板中，items应为数组,请参考文档');\r\n            return;\r\n        }\r\n        defCol.items.map(item => {\r\n            if (item.itemtype !== 'customer') {\r\n                // item 内部东西太复杂 直接给会导致一些问题\r\n                let nItem = JSON.parse(\r\n                    JSON.stringify(item || {}, (key, value) => {\r\n                        if (key == 'render' || key == 'title') {\r\n                            // title 和 value 是react对象  会导致问题\r\n                            return undefined;\r\n                        }\r\n                        return value;\r\n                    }),\r\n                );\r\n                delete nItem.render;\r\n                delete nItem.title;\r\n                formItem.push(nItem);\r\n            }\r\n        });\r\n        this.state.meta[formId] = {\r\n            moduletype: 'form',\r\n            items: formItem,\r\n            status: 'edit',\r\n        };\r\n        this.use.form(formId);\r\n        this.formDataSource[formId].setMeta(this.state.meta, formId);\r\n        thisTable.firstTime = false;\r\n    }\r\n\r\n    /* setState */\r\n    const setStateEve = () => {\r\n        this.setState({ treeTableCol: this.state.treeTableCol });\r\n    };\r\n\r\n    // 查找数据类型，并返回\r\n    const checkDataType = field => {\r\n        let data = columns.items.find(item => item.attrcode === field);\r\n        if (data) {\r\n            return data.itemtype;\r\n        }\r\n    };\r\n    // 设置一个拉平数据 给框选用  超大数据量时不知道有没有性能问题 by bbqin\r\n    // 由于框选需要数据顺序 现在取出来的顺序不对 后面再调整\r\n    let fullDataArray = {};\r\n\r\n    //  处理数据格式\r\n    const createNewData = data => {\r\n        const dataSource = data.map((item, index) => {\r\n            item.key = item.rowId;\r\n            // 记录一下行顺序给 框选使用\r\n            item.rowIndex = index;\r\n            if (item.values.pid) {\r\n                item.pid = item.values.pid.value;\r\n            }\r\n            if (Array.isArray(item.children)) {\r\n                createNewData(item.children);\r\n            }\r\n            fullDataArray[item.key] = item;\r\n            return item;\r\n        });\r\n        return dataSource;\r\n    };\r\n\r\n    const createNewDataRes = createNewData(defTreeData);\r\n    const cp = JSON.parse(JSON.stringify(createNewDataRes));\r\n\r\n    //   获取到最深层级\r\n    //   countDeep(cp)\r\n\r\n    /* 复选框change事件(多选) */\r\n    const itemCheckBoxChange = (data, key) => {\r\n        thisTable.checkedKeys[key] = !thisTable.checkedKeys[key];\r\n        //包含下级时，全部选中\r\n        if (thisTable.isCheckedHasChild && showContextMenu) {\r\n            let children = getChildren(data, key);\r\n            console.log(\"设置children选中:  children\", children)\r\n            setChecked(children);\r\n            function setChecked(children) {\r\n                if (Array.isArray(children)) {\r\n                    children.forEach(item => {\r\n                        thisTable.checkedKeys[item.key] = thisTable.checkedKeys[key];\r\n                        if (Array.isArray(item.children)) {\r\n                            setChecked(item.children);\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /* 复选框change事件(单选) */\r\n    const checkBoxChange_radio = (data, key) => {\r\n\r\n        if (thisTable.checkedKeys[key]) {\r\n            thisTable.checkedKeys = {};\r\n        } else {\r\n            thisTable.checkedKeys = { [key]: true };\r\n        }\r\n\r\n        // thisTable.isCheckedHasChild\r\n    };\r\n\r\n    /* 复选框选中事件 */\r\n    const onCheckboxChangeChild = (text, record, index, e) => {\r\n        e.stopPropagation();\r\n        if (checkedType === 'radio') {\r\n            //单选\r\n            checkBoxChange_radio(thisTable.data, record.key);\r\n        } else {\r\n            //多选\r\n            itemCheckBoxChange(thisTable.data, record.key);\r\n        }\r\n        if (isFunction(checkboxChange)) {\r\n            checkboxChange(record, index, e);\r\n        }\r\n\r\n        setStateEve();\r\n    };\r\n\r\n    /* 查找对应的行数据 */\r\n    const findItem = (data, key) => {\r\n        let res = null;\r\n        let f = data => {\r\n            data.map(item => {\r\n                if (item.rowId === key) {\r\n                    res = item;\r\n                    return true;\r\n                } else if (Array.isArray(item.values.children)) {\r\n                    let r = f(item.values.children);\r\n                    if (r) {\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        f(data);\r\n        return res;\r\n    };\r\n\r\n    // 处理模板\r\n    const createNewCol = data => {\r\n        const multiYes = thisTable.multilingual && thisTable.multilingual['insert-tree-table-009'];\r\n        const multiNo = thisTable.multilingual && thisTable.multilingual['insert-tree-table-010'];\r\n        let newArr = [];\r\n        data.forEach(item => {\r\n            if (item.visible) {\r\n                item._width = item._width || item.width || 120;\r\n                item.width = item.width || 120;\r\n                item.title = (\r\n                    <span\r\n                        fieldid={getSysFieldid(item.attrcode || 'opr')}\r\n                        style={{ color: defaultColor.includes(item.color) ? '' : item.color }}\r\n                    >\r\n                        {' '}\r\n                        {item.label}{' '}\r\n                    </span>\r\n                );\r\n                item.dataIndex = item.attrcode;\r\n                if (item.itemtype !== 'customer' && item.itemtype !== 'numberindex') {\r\n                    if (!item.hasOwnProperty('render')) {\r\n                        item.render = (text, record, index) => {\r\n                            if (record && record.values.hasOwnProperty(item.attrcode)) {\r\n                                if (item.itemtype === 'switch') {\r\n                                    return (\r\n                                        <span fieldid={getSysFieldid(item.attrcode)}\r\n                                            onMouseDown={e=>{\r\n                                                onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);  \r\n                                            }}\r\n                                        >\r\n                                            {record.values[item.attrcode].value ? multiYes : multiNo}\r\n                                        </span>\r\n                                    );\r\n                                } else {\r\n                                    let langIndex;\r\n                                    let langAttrCode;\r\n                                    let context = '';\r\n                                    if (item.itemtype === 'residtxt') {\r\n                                        let LangCode = getLangCode();\r\n                                        let loginLang = item.languageMeta.filter(i => i.languageCode == LangCode);\r\n                                        if (loginLang[0]) {\r\n                                            langIndex = loginLang[0].index == '1' ? '' : loginLang[0].index;\r\n                                            langAttrCode = item.attrcode + langIndex;\r\n                                        }\r\n                                    }\r\n                                    if (\r\n                                        langAttrCode &&\r\n                                        (record.values[langAttrCode].display || record.values[langAttrCode].value)\r\n                                    ) {\r\n                                        context =\r\n                                            record.values[langAttrCode].display ||\r\n                                            record.values[langAttrCode].value ||\r\n                                            '';\r\n                                    } else {\r\n                                        context =\r\n                                            record.values[item.attrcode].display ||\r\n                                            record.values[item.attrcode].value ||\r\n                                            '';\r\n                                    }\r\n\r\n                                    const fixedStyle = { display: '' };\r\n\r\n                                    if (item.fixed && item.fixed === 'left') {\r\n                                        if (item.width) {\r\n                                            let width = String(item.width).replace('px', '');\r\n                                            if (width != '120' && showCheckBox) {\r\n                                                fixedStyle.width = item.width;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (typeof context != 'string') {\r\n                                        context += '';\r\n                                    }\r\n                                    // 添加高亮 by bbqin\r\n                                    let searchValue = thisTable.searchValue || '';\r\n                                    const searchValueLow = searchValue.toLocaleLowerCase();\r\n                                    const contextLow = context.toLocaleLowerCase();\r\n                                    let beforeStr = '';\r\n                                    let afterStr = context;\r\n                                    const index = contextLow.indexOf(searchValueLow);\r\n                                    if (searchValue && index !== -1) {\r\n                                        beforeStr = context.substr(0, index);\r\n                                        afterStr = context.substr(index + searchValue.length);\r\n                                        searchValue = context.substr(index, searchValue.length);\r\n                                    }\r\n                                    return (\r\n                                        <Cell\r\n                                            item={item}\r\n                                            beforeStr={beforeStr}\r\n                                            afterStr={afterStr}\r\n                                            searchValue={searchValue}\r\n                                            fixedStyle={fixedStyle}\r\n                                            context={context}\r\n                                            isEllipsis={thisTable.isEllipsis}\r\n                                            multipleRowCell={multipleRowCell}\r\n                                            index={index}\r\n                                            record={record}\r\n                                            onCellMouseDown={onCellMouseDown}\r\n                                        />\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                return <span\r\n                                    style={{\r\n                                        width:'100%',\r\n                                        height: '100%',\r\n                                        display: 'inline-block'\r\n                                    }}\r\n                                    onMouseDown={e=>{\r\n                                        onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);  \r\n                                    }}\r\n                                ></span>;\r\n                            }\r\n                        };\r\n                    }\r\n                } else if (\r\n                    item.itemtype === 'customer' &&\r\n                    item.hasOwnProperty('render') &&\r\n                    item.alreadyAssignment === undefined\r\n                ) {\r\n                    let Irender = item.render;\r\n                    item.alreadyAssignment = true;\r\n                    item.render = (text, record, index) => {\r\n                        return (\r\n                            <span fieldid={getSysFieldid('opr')} className={STOP_CHECK_OPERATION_ELEMENT} \r\n                                onMouseDown={e=>{\r\n                                    onCellMouseDown && onCellMouseDown(record, index, item.attrcode, item, e);  \r\n                                }}\r\n                            >\r\n                                {Irender(text, record, index)}\r\n                            </span>\r\n                        );\r\n                    };\r\n                }\r\n                newArr.push(item);\r\n            }\r\n        });\r\n        let defaultColumns = [\r\n            {\r\n                title: <span fieldid={getSysFieldid('firstcol')} />,\r\n                attrcode: 'checkbox',\r\n                dataIndex: 'checkbox',\r\n                itemtype: 'customer',\r\n                width: '100px',\r\n                _width: '100px',\r\n                render: (text, record, index) => {\r\n                    // let item = findItem( thisTable.data, record.key);\r\n                    // console.log(record, index);\r\n                    if (showCheckBox) {\r\n                        return (\r\n                            <Checkbox\r\n                                onMouseDown={e=>{\r\n                                    onCellMouseDown && onCellMouseDown(record, index, 'checkbox', {\r\n                                        attrcode: 'checkbox',\r\n                                        itemtype: 'customer'\r\n                                    }, e);  \r\n                                }}\r\n                                className=\"table-checkbox\"\r\n                                checked={thisTable.checkedKeys[record.key]}\r\n                                onClick={onCheckboxChangeChild.bind(this, text, record, index)}\r\n                            />\r\n                        );\r\n                    }\r\n                },\r\n            },\r\n        ];\r\n\r\n        if (newArr[0].fixed && newArr[0].fixed == 'left') {\r\n            defaultColumns[0].fixed = 'left';\r\n        }\r\n\r\n        let resArr = showCheckBox ? defaultColumns.concat(newArr) : newArr;\r\n        // 给第一行增加图标\r\n        const oldFirstColRender = resArr[0].render;\r\n        resArr[0].render = null;\r\n        resArr[0].render = (text, record, index) => {\r\n            let expendSwich;\r\n            if ((Object.prototype.toString.call(record.isLeaf) == '[object Boolean]' && !record.isLeaf) ||\r\n                (Object.prototype.toString.call(record.isleaf) == '[object Boolean]' && !record.isleaf)) {\r\n                expendSwich = thisTable.expandedKeys.includes(record.key) ? (\r\n                    <i\r\n                        className={`icon iconfont  icon-wenjianjiadakai tree-wenjian treeTableIcon ${STOP_CHECK_ELEMENT}`}\r\n                    />\r\n                ) : (\r\n                        <i className={`icon iconfont  icon-wenjianjia tree-wenjian treeTableIcon ${STOP_CHECK_ELEMENT}`} />\r\n                    );\r\n            } else {\r\n                expendSwich = <i className=\"dian\" style={{ display: 'none' }} />;\r\n            }\r\n            const res = oldFirstColRender(text, record, index);\r\n\r\n            if (\r\n                res &&\r\n                res.props &&\r\n                res.props.children &&\r\n                res.props.children[0] &&\r\n                res.props.children[0].props &&\r\n                res.props.children[0].props.className === 'expend-switch'\r\n            ) {\r\n                return res;\r\n            }\r\n\r\n            if (res && res.props && res.props.className === 'table-checkbox') {\r\n                return (\r\n                    <span fieldid={getSysFieldid('firstcol')}\r\n                        onMouseDown={e=>{\r\n                            onCellMouseDown && onCellMouseDown(record, index, 'checkbox', {\r\n                                attrcode: 'checkbox',\r\n                                itemtype: 'customer'\r\n                            }, e);  \r\n                        }}\r\n                    >\r\n                        <span className=\"first-col\">{res}</span>\r\n                        <span className=\"expend-switch\">{expendSwich}</span>\r\n                    </span>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <span\r\n                    fieldid={getSysFieldid('firstcol') }\r\n                    onMouseDown={e=>{\r\n                        onCellMouseDown && onCellMouseDown(record, index, 'checkbox', {\r\n                            attrcode: 'checkbox',\r\n                            itemtype: 'customer'\r\n                        }, e);  \r\n                    }}\r\n                   \r\n                    className={\r\n                        classnames({ zaiyihang: showCheckBox })\r\n                    }\r\n                >\r\n                    <span className=\"expend-switch\">{expendSwich}</span>\r\n                    <span className=\"first-col\">{res}</span>\r\n                </span >\r\n            );\r\n        };\r\n\r\n        // 给第一列追加宽度\r\n        let width = resArr[0]._width;\r\n        if (!flag && width) {\r\n            if (typeof width === 'string') {\r\n                if (width.includes('px')) {\r\n                    width = width.replace('px', '');\r\n                }\r\n                width = Number(width);\r\n            }\r\n            width += countDeep(cp) * 16;\r\n            flag = true;\r\n        }\r\n        resArr[0].width = width;\r\n        return resArr;\r\n    };\r\n\r\n    //\t展开行\r\n    const onExpand = (status, item, e) => {\r\n        if (status) {\r\n            if (expandEve && typeof expandEve === 'function') {\r\n                thisTable.currentRow = item;\r\n                expandEve(item, thisTable.isCheckedHasChild);\r\n            }\r\n        } else {\r\n            if (isFunction(collapandEve)) {\r\n                collapandEve(item);\r\n            }\r\n        }\r\n        setStateEve();\r\n    };\r\n\r\n    // 新增节点弹出框内容\r\n    const modalContent = () => {\r\n        return (\r\n            <div className=\"addModal\">\r\n                {this.form.createForm(formId, { onAfterEvent })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // 删除 事件回调\r\n    const delNodeEve = () => {\r\n        if (isFunction(delNodeCallBack)) {\r\n            delNodeCallBack(formId);\r\n        }\r\n    };\r\n\r\n    // 模态框确定按钮事件回调\r\n    const beSureBtnClick = () => {\r\n        let isValid = this.form.isCheckNow(formId);\r\n        if (!isValid) {\r\n            return false;\r\n        }\r\n        let data = this.form.getAllFormValue(formId).rows[0];\r\n        if (thisTable.modalType === 'add') {\r\n            data.status = 2;\r\n            if (isFunction(addNodeCallBack)) {\r\n                addNodeCallBack(data, thisTable.currentRow);\r\n            }\r\n        } else if (thisTable.modalType === 'edit') {\r\n            if (isFunction(editNodeCallBack)) {\r\n                editNodeCallBack(data, thisTable.currentRow);\r\n            }\r\n        }\r\n        this.modal.close('treeTableManyColModal');\r\n    };\r\n\r\n    const onRowDoubleClick = (record, index, event) => {\r\n        if (isFunction(ncOnRowDoubleClick)) {\r\n            ncOnRowDoubleClick(record, index, event);\r\n        }\r\n    };\r\n\r\n    // const getColSetConfig = () => { //---by liuxis 鼠标不做列设置\r\n    //   const appcode = pageTo.getAppCode();\r\n    //   const pagecode = pageTo.getPageCode();\r\n    //   const areaCode = id;\r\n    //   const areaId = this.state.meta[areaCode] && this.state.meta[areaCode].oid;\r\n    //   const code = this.state.meta.code;\r\n    //   const pageId = this.state.meta.pageid;\r\n    //   return { appcode, pagecode, areaCode, areaId, code, pageId };\r\n    // };\r\n\r\n    /**\r\n    * @param row 行数据\r\n    * @param index 行数\r\n    * @param e 事件源\r\n    */\r\n    const onRowClick = (row, index, e) => {\r\n        thisTable.currentSelectedRow = row;\r\n        // 为了避免和新开发的行框选点选区域选事件冲突\r\n        if (e.ctrlKey || e.shiftKey || e.metaKey) {\r\n            return;\r\n        }\r\n        if (showCheckBox && stopCheckBoxChange(e, checkOnRowClick)) return;\r\n        if (isFunction(onRowClickEve)) {\r\n            onRowClickEve(row, index, e);\r\n        }\r\n        onCheckboxChangeChild(null, row, index, e);\r\n    };\r\n\r\n    const rowClassName = (record, current) => {\r\n        if (thisTable.currentSelectedRow && thisTable.currentSelectedRow.key == record.key) {\r\n            return 'tree-table-col-selected';\r\n        } else {\r\n            return '';\r\n        }\r\n\r\n    };\r\n\r\n    const createContextMenu = () => {\r\n        let multilingual = thisTable.multilingual || {};\r\n\r\n        return <Fragment>\r\n            {\r\n                !hideExpandAll && <li\r\n                    className={\r\n                        classnames({\r\n                            'menu expand-all': true\r\n                        })\r\n                    }\r\n                    onClick={() => {\r\n                        let expandedKeys = [];\r\n                        getAllExpandKeys(thisTable.data)\r\n                        thisTable.expandedKeys = expandedKeys;\r\n                        setStateEve();\r\n                        function getAllExpandKeys(data) {\r\n                            data.forEach(item => {\r\n                                expandedKeys.push(item.key);\r\n                                if (Array.isArray(item.children)) {\r\n                                    getAllExpandKeys(item.children);\r\n                                }\r\n                            })\r\n                        }\r\n                        //若为异步，调用业务全部展开回调\r\n                        isFunction(expandAllEve) && expandAllEve()\r\n                    }}\r\n                >\r\n                    {multilingual['insert-tree-table-0013'] || '全部展开'}\r\n                </li>\r\n            }\r\n            <li\r\n                className={\r\n                    classnames({\r\n                        'menu close-all': true\r\n                    })\r\n                }\r\n                onClick={() => {\r\n                    thisTable.expandedKeys = [];\r\n                    setStateEve();\r\n                    //业务全部收起的回调\r\n                    isFunction(closeAllEve) && closeAllEve();\r\n                }}\r\n            >\r\n                {multilingual['insert-tree-table-0014'] || '全部收起'}\r\n            </li>\r\n\r\n            {\r\n                !hideIncludeChild && <li\r\n                    className={\r\n                        classnames({\r\n                            'menu include-child': true\r\n                        })\r\n                    }\r\n                    onClick={() => {\r\n                        thisTable.isCheckedHasChild = !thisTable.isCheckedHasChild;\r\n                        setStateEve();\r\n                    }}\r\n                >\r\n                    <Checkbox\r\n                        className={'include-child-checkbox'}\r\n                        checked={thisTable.isCheckedHasChild}\r\n                        onChange={() => {\r\n                            thisTable.isCheckedHasChild = !thisTable.isCheckedHasChild;\r\n                            setStateEve();\r\n                        }}\r\n                    />\r\n                    <span className={\r\n                        classnames({\r\n                            'include-child-selected': thisTable.isCheckedHasChild\r\n                        })\r\n                    }> {multilingual['insert-tree-table-0015'] || '包含下级'}</span>\r\n                </li>\r\n            }\r\n\r\n            {isFunction(extendRightMenu) && extendRightMenu()}\r\n\r\n        </Fragment>\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div id={id} className=\"treeTableManyCol\" fieldid={getSysFieldid(`${fieldid || id}_table`)}>\r\n            {showCheckBox && checkedType !== 'radio' ? (\r\n                <NCSelectable\r\n                    canvas={`#${id}`}\r\n                    // 注意可以加下前后空格\r\n                    selector=\" tbody tr \"\r\n                    unitKey=\"key\"\r\n                    disabled={checkedType === 'radio' || 'slide'} // 可选值 true false 'shift' 'ctrl' 'slide'\r\n                    userSelect={true} // 启用用户文字选中\r\n                    // unitsData={fullDataArray}  // 用dom做shift 操作 数据的问题是目前顺序不对 // 数组改为对象 给下面使用\r\n                    // 开始项  主要配合外部的 单选事件处理\r\n                    startItem=\"\"\r\n                    onSelect={(selectedRowKeys, hotkey, { currentKey }) => {\r\n                        // 树状数据不太好处理 需要一个拉平数据\r\n                        let rowLen = thisTable.data.length;\r\n                        if (rowLen > 0) {\r\n                            if (hotkey === 'ctrl') {\r\n                                thisTable.checkedKeys[currentKey] = selectedRowKeys[currentKey];\r\n                                // thisTable.isCheckedHasChild\r\n\r\n                                this.setState({ treeTableCol: this.state.treeTableCol }, () => {\r\n                                    let selectedRecord = fullDataArray[currentKey];\r\n                                    // console.log(fullDataArray, currentKey, selectedRecord, '数据的问题处理');\r\n                                    if (isFunction(checkboxChange) && selectedRecord) {\r\n                                        checkboxChange(selectedRecord, selectedRecord.rowIndex, {});\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                thisTable.checkedKeys = {};\r\n                                for (const key in selectedRowKeys) {\r\n                                    if (selectedRowKeys.hasOwnProperty(key)) {\r\n                                        thisTable.checkedKeys[key] = selectedRowKeys[key];\r\n\r\n                                        // thisTable.isCheckedHasChild\r\n                                    }\r\n                                }\r\n                                // TODO 先使用循环调用时间 如果不行的话  后面需要单独加一个回调\r\n                                this.setState({ treeTableCol: this.state.treeTableCol }, () => {\r\n\r\n                                    for (const key in selectedRowKeys) {\r\n                                        if (selectedRowKeys.hasOwnProperty(key) && isFunction(checkboxChange)) {\r\n                                            let selectedRecord = fullDataArray[key];\r\n                                            selectedRowKeys[key] && checkboxChange(selectedRecord, selectedRecord.rowIndex, {});\r\n                                        }\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                        }\r\n                    }}\r\n                />\r\n            ) : (\r\n                    ''\r\n                )}\r\n            <Table\r\n                lazyload={isLazyload}\r\n                className=\"tree-table-manyCol-container\"\r\n                expandedRowKeys={thisTable.expandedKeys} //搜索节点关键字后要展开的父节点\r\n                columns={createNewCol(columns.items)}\r\n                columnKey='attrcode'\r\n                data={createNewDataRes}\r\n                onExpand={onExpand.bind(this)}\r\n                onExpandedRowsChange={expandedRowKeys => {\r\n                    thisTable.expandedKeys = expandedRowKeys;\r\n                    setStateEve();\r\n                }}\r\n                bodyDisplayInRow={false}\r\n                //折行回调\r\n                foldingRowChange={isEllipsis => {\r\n                    thisTable.isEllipsis = isEllipsis\r\n                    setStateEve();\r\n                }}\r\n                scroll={scrollConfig || { x: true, y: this.state.treeTableCol[id].tableHeight }}\r\n                onRowDoubleClick={onRowDoubleClick}\r\n                adaptionHeight={adaptionHeight}\r\n                inModal={inModal}\r\n                onRowClick={onRowClick}\r\n                isDrag={isDrag}\r\n                ref={dom => {\r\n                    this.dom = ReactDOM.findDOMNode(dom);\r\n                }}\r\n                rowClassName={rowClassName}\r\n                addBlankCol={addBlankCol}\r\n                extendRightMenu={\r\n                    showContextMenu ? createContextMenu() :\r\n                    isFunction(extendRightMenu) ? extendRightMenu() : null\r\n                }\r\n                cancelCustomRightMenu={true}\r\n            //bodyStyle={{ height: this.state.treeTableCol[id].tableHeight }}\r\n            // colsSettingParam={getColSetConfig()}\r\n            />\r\n\r\n            {thisTable.multilingual ? (\r\n                this.modal.createModal('delNode', {\r\n                    title: thisTable.multilingual['insert-tree-table-001'],\r\n                    content: thisTable.multilingual['insert-tree-table-002'],\r\n                    beSureBtnClick: delNodeEve.bind(this),\r\n                    backdrop: 'static',\r\n                })\r\n            ) : null}\r\n\r\n            {this.modal.createModal('treeTableManyColModal', {\r\n                content: modalContent.call(this),\r\n                beSureBtnClick: beSureBtnClick.bind(this),\r\n                cancelBtnClick: () => {\r\n                    this.modal.close('treeTableManyColModal');\r\n                },\r\n                size: 'lg',\r\n                userControl: true,\r\n                backdrop: 'static',\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TreeTableManyCol;\r\n","/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: bbq\r\n * @Date: 2020-12-11 11:25:40\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2021-01-14 11:08:05\r\n */\r\nimport TreeTableManyCol from './treeTableManyCol';\r\nimport TreeTable from './treeTable';\r\nimport useTreeTable from './store';\r\nimport {\r\n    initTreeTableData,\r\n    setChildNode,\r\n    editRowEve,\r\n    addChildRowEve,\r\n    addBrotherRow,\r\n    delRowByPk,\r\n    createNewData,\r\n    getAllValue,\r\n    getValueByRowId,\r\n    getExpandedRowKeys,\r\n    showModal,\r\n    emptyAllData,\r\n    openRow,\r\n    closeRow,\r\n    getSelectedRow,\r\n    searchTreeTable,\r\n    updataDataSource,\r\n    setCheckedKeys,\r\n    setSelectedRow,\r\n    updateChildRow,\r\n    treeTableCol,\r\n} from './methods';\r\n\r\nlet TreeTableAPI = {\r\n    TreeTableManyCol,\r\n    treeTableCol,\r\n    initTreeTableData,\r\n    setChildNode,\r\n    editRowEve,\r\n    addChildRowEve,\r\n    addBrotherRow,\r\n    delRowByPk,\r\n    createNewData,\r\n    getAllValue,\r\n    getValueByRowId,\r\n    getExpandedRowKeys,\r\n    showModal,\r\n    emptyAllData,\r\n    openRow,\r\n    closeRow,\r\n    getSelectedRow,\r\n    searchTreeTable,\r\n    updataDataSource,\r\n    setCheckedKeys,\r\n    setSelectedRow,\r\n    updateChildRow,\r\n};\r\n\r\n/**\r\n * 兼容旧版本创建表格方法\r\n * @param {string} mainCode 表格主区域编码\r\n * @param {object} config 表格业务配置\r\n */\r\n\r\nexport default function treeTableCompatible() {\r\n    this.register(\"treeTable\", useTreeTable); // 生成 this.treeTableDataSource[id]\r\n    return { ...apiBindPage.call(this, TreeTableAPI) };\r\n}\r\n\r\nfunction apiBindPage(simpleTableAPI) {\r\n    let res = {}\r\n    for (let pop of Object.keys(simpleTableAPI)) {\r\n        res[pop] = simpleTableAPI[pop].bind(this);\r\n    }\r\n    return res;\r\n}\r\n\r\ntreeTableCompatible.component = TreeTable;\r\ntreeTableCompatible.displayName = \"TreeTable\";\r\ntreeTableCompatible.unfinished = [\"treeTableUnFinishedApi\"];\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__42__;","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;"],"sourceRoot":""}