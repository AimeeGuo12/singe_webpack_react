{"version":3,"sources":["webpack://@platform/[name]/webpack/universalModuleDefinition","webpack://@platform/[name]/webpack/bootstrap","webpack://@platform/[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://@platform/[name]/external \"@platform/api/index\"","webpack://@platform/[name]/external \"@platform/template/index\"","webpack://@platform/[name]/./src/platform/components/Table/appTable/SimpleTable/store.js","webpack://@platform/[name]/./src/platform/components/Table/appTable/SimpleTable/index.js","webpack://@platform/[name]/external \"@platform/base/index\"","webpack://@platform/[name]/external \"@platform/table-core/index\""],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__11__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isArray","utils","isString","isObject","isUndefined","isNullOrVoid","getPageSizeStorage","TableData","data","keyPath","ArrayData","TableMeta","keys","areacode","items","moduletype","TreeData","simpleTableStore","store","meta","rows","props","status","focusIndex","rowKey","currentIndex","currentInfo","pageInfo","pageIndex","total","totalPage","allpks","alltss","checkInfo","checkedAll","indeterminate","selectIndex","Set","disabledAll","checkedAllpage","crossPageSelectIndex","modelDatas","modelColumn","record","index","rowId","operType","showModal","sortParam","undefined","config","cache","base","beforeEdit","all","afterDel","oldRows","colInitialValue","langJson","oldBatchData","getHooks","getStore","setStore","setData","getData","getFilterData","setRows","getRows","setMeta","getMeta","getArrayMeta","setCellProps","setColumn","setSelect","openModal","closeModal","setTableProps","getTableProps","showColumn","deleteTableRows","addTableRows","setCellValue","setCache","getCache","clearSortStatus","resetFilter","getClickedRow","setClickedRow","setModalValue","getConfig","setConfig","setCrossPage","tableId","shouldForceUpdate","console","warn","arrColumns","columnStatus","forEach","column","push","attrcode","row","filter","filterIndex","viewData","length","some","item","values","selected","every","filterStatus","rowKeyValue","pattern","update","oldRow","forceUpdate","log","callback","paths","rowIndexs","rowKeyValues","needRows","_getRowKeyValues","query","error","code","isShow","map","includes","visible","id","attrcodeArr","storeItem","type","_getRandom","rowIndex","display","refname","refpk","res","viewMeta","_hasMeta","getArrayData","children","deleteData","delItems","includeCurrentRow","deleteArr","deleteRowIdArr","deleteRowPk","crossPageSelect","pkname","deleteNum","_getRowIdbyIndex","len","splice","pk","has","addData","newArr","JSON","parse","stringify","clear","add","rowsLength","sagaLen","unSaga","disabled","isSelect","selectSize","size","Number","path","current","indexArr","rowIdArr","strIndex","String","this","rowkey","columns","eve","order","orderNum","Date","getTime","slice","getSafeRandom","toString","BaseStore","useSimpleTable","hookFactory","excelPackageData","getMetaIsTotal","setPageSizeStorage","formatColumn","lib","pagination","selectRow","indexCol","checkCol","errorCol","selectable","simpleTableModal","columnSort","contextMenu","MetaTable","Table","SimpleTable","withViewModel","pageInfoChange","newPageInfo","onPageInfoChange","pageSize","splitPks","pks","start","onAllCheckChange","oldLen","newLen","onSelectedAll","isFunction","selectedChange","onCheckChange","isUnique","onSelected","changeCrossSelect","needSelectRowId","warningOnce","sortChange","sortData","sortObj","sortRows","field","handleSortcolumns","checkNum","updateColumnAfterSetting","newColumn","areaCode","finalColumn","sortIndexArr","sortObjArr","newItem","oldItem","width","islock","sort","a","b","setState","state","getColSettiongParam","currentMeta","appcode","pageTo","getAppCode","pagecode","getPageCode","templateCode","pageid","areaId","oid","noColSetClass","colSetCallback","contextMenuClick","btnCode","execCommandCopy","param","insertNum","isHotKey","copyCode","activeHeads","arrayMeta","activedCells","selectedRows","ViewModel","isEllipsis","afterLangload","dataSource","simpleTable","val","componentInitFinished","getMultiLang","json","storeData","currentpks","Array","pkLen","startIndex","cacheTools","set","hotkey","saga_status","onBatchSelected","onCellHyperlinkTo","foldCacheId","cancelCustomRightMenu","addBlankCol","extendRightMenu","showWidthAndHeightConfig","height","high_selectable","hideRightMenu","high_filter","others","enable","showPagination","prePageSize","colSettingParam","otherAreaHeight","isNumber","isNaN","adaptionHeight","heightObj","scroll","x","y","bodyStyle","isTotal","showTotal","isBatchSelect","selectCell","Fragment","className","disableEditType","cardType","renderStatus","bodyDisplayInRow","multipleRowCell","isDrag","lazyload","getCellValue","cell","params","cellClassName","setCellClass","onRowClick","e","ctrlKey","shiftKey","metaKey","target","localName","disableClickRowToSelect","hasSelected","onRowDoubleClick","indexOf","parentNodeClass","parentElement","backSort","checkColConfig","showCheck","indexColConfig","showIndex","totalConfig","noTotalRows","noTotalCol","allowTotalRows","numberPd","alloweFilter","panelTitle","filterData","customColData","isReset","handleFilterCallBack","filteredRow","filteredRowKeyValues","handleResetCallBack","onHide","onSelect","activeSpecialCells","isBatch","pervActivedCells","actived","leftLine","rightLine","topLine","bottomLine","showDrag","oldActiveSpecialCells","unitActive","linkObjMeta","reduce","result","arr","next","prev","prevRowValues","nextRowValues","prevCol","nextCol","getPrevSelector","prevSelector","onDeSelect","deActiveCells","prevActiveCells","prevActiveCellsObj","prevActiveCellsArr","onClearData","onBatchChange","activeCell","activeCells","getTrueRowIndex","getColumn","pasteContent","activeCellValue","isDisplay","itemtype","fieldDisplayed","getRowOldValue","single","foldingRowChange","contextMenuConfig","showBusinessBtn","showPasteBtn","autoAffixScroll","colsSettingParam","updateColumnHandle","modalConfig","tableCustomerArea","BaseComponent","displayName"],"mappings":"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","file":"simple-table/index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"@platform/table-core/index\"), require(\"@platform/template/index\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"@platform/api/index\", \"@platform/base/index\", \"@platform/table-core/index\", \"@platform/template/index\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@platform/simple-table/index\"] = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"@platform/table-core/index\"), require(\"@platform/template/index\"));\n\telse\n\t\troot[\"@platform/simple-table/index\"] = factory(root[\"React\"], root[\"@platform/api/index\"], root[\"@platform/base/index\"], root[\"@platform/table-core/index\"], root[\"@platform/template/index\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__8__, __WEBPACK_EXTERNAL_MODULE__11__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../platform/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1900);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","//1排序 2筛选 3checkbox\r\nimport { BaseStore, hookFactory, ArrayData, TreeData } from '@platform/template';\r\nimport { getSafeRandom } from '@platform/api'\r\nimport { utils } from '@platform/table-core';\r\nconst { isArray, isString, isObject, isUndefined, isNullOrVoid, getPageSizeStorage } = utils;\r\n// 表格数据\r\nexport function TableData(data, keyPath = 'rowid') {\r\n    return new ArrayData(data, keyPath);\r\n}\r\n// 表格模板\r\nexport function TableMeta(data, keyPath = 'attrcode') {\r\n    for (let areacode of Object.keys(data)) {\r\n        if (isObject(data[areacode]) &&\r\n            isArray(data[areacode].items) &&\r\n            data[areacode].moduletype === 'table') {\r\n            data[areacode].items = new TreeData(data[areacode].items, keyPath);\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nclass simpleTableStore extends BaseStore {\r\n    store = {\r\n        meta: {}, // 表格模板   \r\n        // store.rows = []// 数据\r\n        rows: [], // 数据\r\n        // 表格属性\r\n        props: {\r\n            status: 'browse',\r\n            focusIndex: '-1', // （用于跳转）\r\n            rowKey: 'rowId',\r\n            // 当前正在操作的行\r\n            currentIndex: -1,\r\n            currentInfo: null, // （选中行）\r\n        },\r\n        pageInfo: { // 分页信息\r\n            //pageSize: 0,\r\n            pageIndex: 1,\r\n            total: 0,\r\n            totalPage: 1,\r\n        },\r\n        allpks: [],\r\n        alltss: [],\r\n\r\n        checkInfo: {\r\n            checkedAll: false, //当前页全选标志\r\n            indeterminate: false, //半选标志\r\n            selectIndex: new Set(), //选中行\r\n            disabledAll: false,\r\n            checkedAllpage: false, //所有页全选\r\n            crossPageSelectIndex: new Set(),\r\n        },\r\n        modelDatas: { //编辑模态框的相关数据\r\n            modelColumn: [],\r\n            record: {},\r\n            index: null,\r\n            rowId: null,\r\n            operType: 'add', // 编辑框类型‘add’或者‘edit’\r\n            showModal: false, //是否打开编辑框\r\n        },\r\n        sortParam: undefined, //存储新的排序信息\r\n        config: {}, //业务组传进来的config\r\n    }\r\n    // 缓存\r\n    cache = {\r\n        base: null, // 不同情况的初始数据\r\n        beforeEdit: null, //侧拉展开之前的数据（）\r\n        all: null, //初始表格的全数据\r\n        // 进行深度删除后的数据，作为删除后的操作的初始数据 为了在浏览态删除后，编辑态取消不会将删除的数据在显示出来\r\n        afterDel: null,\r\n        // 行的旧值 为数组 既可以存对象 也可以存索引\r\n        oldRows: [],\r\n        // 列初始值\r\n        colInitialValue: {},\r\n        // 多语\r\n        langJson: {},\r\n        // 批改\r\n        oldBatchData: null,\r\n    };\r\n\r\n    getHooks = () => {\r\n        return {\r\n            getStore: this.getStore,\r\n            setStore: this.setStore,\r\n            setData: this.setData,\r\n            getData: this.getData,\r\n            getFilterData: this.getFilterData,\r\n            setRows: this.setRows,\r\n            getRows: this.getRows,\r\n            setMeta: this.setMeta,\r\n            getMeta: this.getMeta,\r\n            getArrayMeta: this.getArrayMeta,\r\n            setCellProps: this.setCellProps,\r\n            setColumn: this.setColumn,\r\n            setSelect: this.setSelect,\r\n            openModal: this.openModal,\r\n            closeModal: this.closeModal,\r\n            setTableProps: this.setTableProps,\r\n            getTableProps: this.getTableProps,\r\n            showColumn: this.showColumn,\r\n            deleteTableRows: this.deleteTableRows,\r\n            addTableRows: this.addTableRows,\r\n            setCellValue: this.setCellValue,\r\n            setCache: this.setCache,\r\n            getCache: this.getCache,\r\n            clearSortStatus: this.clearSortStatus,\r\n            resetFilter: this.resetFilter,\r\n\r\n            // 内部使用方法\r\n            getClickedRow: this.getClickedRow,\r\n            setClickedRow: this.setClickedRow,\r\n            setModalValue: this.setModalValue,\r\n            getConfig: this.getConfig,\r\n            setConfig: this.setConfig,\r\n            setCrossPage: this.setCrossPage,\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置过滤器\r\n     */\r\n    resetFilter = (tableId, shouldForceUpdate = true) => {\r\n        tableId = tableId || this.getStore(\"name\");\r\n        if (!tableId) {\r\n            return console.warn('invalid resetFilter tableId note find');\r\n        }\r\n        let arrColumns = this.getArrayMeta(tableId, true);\r\n\r\n        let columnStatus = [];\r\n        // 设置表格筛选图标, 重置时将筛选图标全部清空\r\n        arrColumns.forEach(column => {\r\n            columnStatus.push(column.attrcode);\r\n        });\r\n\r\n        // 设置行状态\r\n        let data = this.getData() || [];\r\n        data.forEach(row => {\r\n            row.filter = false;\r\n            delete row.filterIndex;\r\n        });\r\n\r\n        // 处理已选等逻辑\r\n        let checkInfo = this.getStore('checkInfo');\r\n        let viewData = data;\r\n        if (viewData && viewData.length) {\r\n            checkInfo.indeterminate = viewData.some(item => {\r\n                let values = item.values || item;\r\n                let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                return unSaga && item.selected;\r\n            });\r\n            checkInfo.checkedAll = viewData.every(item => {\r\n                let values = item.values || item;\r\n                let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                return !unSaga || item.selected;\r\n            });\r\n        }\r\n        this.setStore([\"checkInfo\"], checkInfo, false);\r\n\r\n        // 更新 所有的更新放到弹窗关闭(onHide)时\r\n        this.setData(data, false);\r\n\r\n        // 列状态\r\n        this.setColumn(tableId, columnStatus, { filterStatus: '' }, shouldForceUpdate);\r\n    }\r\n\r\n    /**\r\n     * rowIndex 可视数据index\r\n     * @description: 设置单元格属性\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    setCellProps = (rowKeyValue, attrcode, value = {}, shouldForceUpdate = true, pattern = 'merge') => {\r\n        if (isUndefined(rowKeyValue) || rowKeyValue === -1) {\r\n            console.log('invalid params');\r\n            return;\r\n        }\r\n\r\n        // get(this.valueGraph, [rowKeyValue, attrcode]).forceUpdate();\r\n        let data = this.getData()\r\n        let row = data.update(rowKeyValue, oldRow => {\r\n            let props = (oldRow['values'] || {})[attrcode] || {};\r\n            if (pattern == 'merge') {\r\n                value = { ...props, ...value };\r\n            }\r\n            oldRow[\"values\"] = oldRow[\"values\"] || {};\r\n            oldRow[\"values\"][attrcode] = value\r\n            return oldRow\r\n        });\r\n\r\n        shouldForceUpdate && this.forceUpdate();\r\n        // 这里需要优化\r\n        // shouldForceUpdate && this.updateItem([rowKeyValue, attrcode]);\r\n\r\n        return row;\r\n    }\r\n\r\n    getTableProps = key => {\r\n        let props = this.getStore(['props', key]);\r\n        return props;\r\n\r\n    }\r\n    setTableProps = (key, value, shouldForceUpdate = true, callback) => {\r\n        this.setStore(['props', key], value, shouldForceUpdate, callback);\r\n    }\r\n    getRowProps({ rowIndex, rowKeyValue, name } = {}) {\r\n        // 获取真实的rowIndex\r\n        !rowKeyValue && rowIndex && (rowKeyValue = this._getRowKeyValues({ rowIndex }));\r\n        let data = this.getStore(['rows']),\r\n            row = data.query(rowKeyValue || rowIndex);\r\n        return row[name];\r\n    }\r\n    setRowProps({ rowIndex, rowKeyValue, value = {}, shouldForceUpdate = true } = {}) {\r\n        let rowkey = rowKeyValue || rowIndex\r\n        // 获取真实的rowIndex\r\n        !rowKeyValue && rowIndex && (rowKeyValue = this._getRowKeyValues({ rowIndex }));\r\n        let rows = this.getStore(['rows']),\r\n            row = rows.query(rowkey);\r\n        // TODO Update\r\n        for (let key in value) {\r\n            row[key] = value[key];\r\n        }\r\n        this.setStore(['rows', rowkey], row, shouldForceUpdate)\r\n    }\r\n\r\n    setStore = (paths = [], value, shouldForceUpdate = true, callback) => {\r\n        if (paths.length) {\r\n            this.store = super.set(paths, value)\r\n        } else {\r\n            this.store = value\r\n        }\r\n        shouldForceUpdate && this.forceUpdate(callback);\r\n        return this.store;\r\n    }\r\n    getStore = (paths = []) => {\r\n        let value = {}\r\n        if (paths.length) {\r\n            value = super.get(paths);\r\n        } else {\r\n            value = this.store\r\n        }\r\n        return value;\r\n    }\r\n    setData = (data = [], shouldForceUpdate = true, callback) => {\r\n\r\n        let rowKey = this.getTableProps('rowKey'); // rowid\r\n        // 格式化data\r\n        let rows = isArray(data) ? new TableData(data, rowKey) : this.getData();\r\n        this.setStore(['rows'], rows, shouldForceUpdate, callback);\r\n    }\r\n    getData = () => {\r\n        let rows = this.getStore(['rows']);\r\n        // rows = rows.filter(item => {\r\n        //     return !rule.includes(item.status);\r\n        // })\r\n        return rows || [];\r\n    }\r\n    getFilterData = () => {\r\n        let data = this.getStore([\"rows\"]);\r\n        // 添加规则什么的  比如删除 比如过滤 TODO 过滤要考虑不能放在status中  这样会影响原来的业务侧的代码\r\n        data = data.filter(item => {\r\n            return !item.filter;\r\n        });\r\n        return data || [];\r\n    }\r\n    getRows = ({ rowIndexs, rowKeyValues } = {}) => {\r\n        let rows = this.getStore(['rows']),\r\n            needRows = [];\r\n        !rowKeyValues && rowIndexs && (rowKeyValues = this._getRowKeyValues({ rowIndexs }));\r\n        (rowKeyValues || rowIndexs || []).forEach(item => {\r\n            let row = rows.query(item);\r\n            !row && console.warn('not find row data');\r\n            needRows.push(row)\r\n        });\r\n        return needRows;\r\n    }\r\n    //通过rowid的方式\r\n    setRows = (data = [], shouldForceUpdate = true) => {\r\n        let rowKey = this.getTableProps('rowKey');\r\n        let rows = this.getData();\r\n        data.forEach(item => {\r\n            if (!item[rowKey]) { console.error('数据中没有rowid') }\r\n            rows.update(item[rowKey], () => {\r\n                return item\r\n            })\r\n        })\r\n\r\n        shouldForceUpdate && this.forceUpdate()\r\n    }\r\n\r\n    getClickedRow = () => {\r\n        let currentInfo = this.getTableProps(\"currentInfo\")\r\n        return currentInfo\r\n    }\r\n\r\n    setClickedRow = index => {\r\n        let data = {}\r\n        let rows = this.getStore(['rows'])\r\n        data.record = rows[index]\r\n        data.index = index\r\n        this.setTableProps(\"currentInfo\", data)\r\n    }\r\n\r\n    showColumn = (name, code, isShow) => {\r\n        let attrcode = isArray(code) ? code : [code]\r\n        let meta = this.getMeta()\r\n        if (meta[name]) {\r\n            meta[name].item = meta[name].items.map(item => {\r\n                if (attrcode.includes(item.attrcode)) {\r\n                    item.visible = isShow;\r\n                }\r\n                return item;\r\n            })\r\n        }\r\n        this.setMeta(meta)\r\n    }\r\n\r\n    setColumn = (id, attrcodeArr, value, shouldForceUpdate = true) => {\r\n        let storeItem = this.getStore(['meta', id, 'items'])\r\n        if (!storeItem) { return }\r\n        let items = storeItem.get()\r\n        // let itemLen = items.length\r\n        attrcodeArr = isArray(attrcodeArr) ? attrcodeArr : [attrcodeArr]\r\n        attrcodeArr.forEach(attrcode => {\r\n            let item = items.query(attrcode);\r\n            if (item) {\r\n                // TODO 合并数据\r\n                for (let key in value) {\r\n                    item[key] = value[key];\r\n                }\r\n            }\r\n            // for (let i = 0; i < itemLen; i++) {\r\n            //     if (items[i].attrcode === attrcode) {\r\n            //          // 这样就不是引用赋值了\r\n            //         items[i] = { ...items[i], ...value }\r\n            //         break;\r\n            //     }\r\n            // }\r\n        });\r\n\r\n        shouldForceUpdate && this.forceUpdate()\r\n    }\r\n\r\n    openModal = (type, record, index) => {\r\n        let modelDatas = this.getStore(['modelDatas'])\r\n        let data = {}\r\n        data.showModal = true\r\n        data.operType = type\r\n        if (type == 'edit') {\r\n            data.record = record || {};\r\n            data.index = index || null;\r\n            data.rowId = record ? record.key : this._getRandom()\r\n        } else if (type == 'add') {\r\n            data.record = {};\r\n            data.rowIndex = null;\r\n            data.rowId = this._getRandom()\r\n        }\r\n        modelDatas = { ...modelDatas, ...data }\r\n        this.setStore(['modelDatas'], modelDatas)\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let modelDatas = this.getStore(['modelDatas'])\r\n        modelDatas.showModal = false\r\n        this.setStore(['modelDatas'], modelDatas)\r\n\r\n    }\r\n\r\n    setModalValue = (key, data, type) => {\r\n        let modelDatas = this.getStore(['modelDatas'])\r\n        let { record } = modelDatas\r\n        if (type == 'refer') {\r\n            record[key] = {\r\n                display: data.refname,\r\n                value: data.refpk,\r\n            };\r\n        } else {\r\n            record[key] = {\r\n                value: data,\r\n                display: null,\r\n            };\r\n        }\r\n        this.setStore('modelDatas', modelDatas)\r\n    }\r\n\r\n    getMeta = id => {\r\n        let meta = this.getStore('meta'),\r\n            res = {};\r\n        if (!meta) return;\r\n        if (id) {\r\n            let viewMeta = this._hasMeta({ id });\r\n            res = viewMeta ? [...viewMeta.items.get()] : [];\r\n        } else {\r\n            for (let key of Object.keys(meta)) {\r\n                // 去除一下浅拷贝 避免JSON.parse报错 \r\n                res[key] = meta[key]; // JSON.parse(JSON.stringify(meta[key]));\r\n                if (isObject(meta[key]) && meta[key].items) {\r\n                    if (meta[key].moduletype === 'table') {\r\n                        res[key].items = meta[key].items.get ? meta[key].items.get() : meta[key].items; // getArrayData\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @description: 获取id所在视图的meta\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    getArrayMeta = (id, filter = true) => {\r\n        if (isUndefined(id)) {\r\n            id = this.getStore('name');\r\n            !id && console.warn('not find current meta name');\r\n        }\r\n        let viewMeta = this._hasMeta({ id }) || [];\r\n        // getArrayData\r\n        viewMeta = viewMeta && viewMeta.items && viewMeta.items.getArrayData ? viewMeta.items.getArrayData() : (viewMeta.items || []);\r\n        // console.log(viewMeta);\r\n        return viewMeta.filter(item => {\r\n            let children = item.children;\r\n            let condition = !children || !(filter && isArray(children) && children.length >= 0);\r\n            return condition;\r\n        });\r\n    }\r\n\r\n    setMeta = (meta, shouldForceUpdate = true) => {\r\n        this.setStore(['meta'], new TableMeta(meta), shouldForceUpdate);\r\n        console.log(this.getStore('meta'))\r\n    }\r\n    //pattern 有index和rowId\r\n    deleteTableRows = (deleteData, pattern = 'index', shouldForceUpdate = true) => {\r\n\r\n        let delItems = [];\r\n        let rowKey = this.getTableProps('rowKey');\r\n        // 这里应该去取过滤之后的数据\r\n        let rows = this.getFilterData();\r\n        let currentInfo = this.getTableProps(\"currentInfo\") || {};\r\n        let pageInfo = this.getStore(['pageInfo']) || {};\r\n        let includeCurrentRow = false;\r\n        let deleteArr = []\r\n        let deleteRowIdArr = []\r\n        let deleteRowPk = []\r\n        let config = this.getConfig()\r\n        let { crossPageSelect, pkname } = config\r\n        let deleteNum = 0\r\n        deleteArr = isArray(deleteData) ? [...deleteData] : [deleteData]\r\n\r\n        if (pattern === 'index') {\r\n            deleteRowIdArr = this._getRowIdbyIndex(deleteArr)\r\n        } else {\r\n            deleteRowIdArr = deleteArr\r\n        }\r\n\r\n        deleteRowIdArr.forEach(item => {\r\n            if (!includeCurrentRow) { includeCurrentRow = item === currentInfo[rowKey] }\r\n            let len = rows.length\r\n            for (let i = 0; i < len; i++) {\r\n                if (rows[i][rowKey] === item) {\r\n                    (crossPageSelect && pkname) && deleteRowPk.push(rows[i].values[pkname].value);\r\n                    rows.splice(i, 1);\r\n                    deleteNum++\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n\r\n        //更新跨页全选的index\r\n        if (crossPageSelect && pkname) {\r\n            let crossPageSelectIndex = this.getStore(['checkInfo', 'crossPageSelectIndex'])\r\n\r\n            deleteRowPk.forEach(pk => {\r\n                crossPageSelectIndex.has(pk) && crossPageSelectIndex.delete(pk)\r\n            })\r\n            this.setStore(['checkInfo', 'crossPageSelectIndex'], crossPageSelectIndex, false)\r\n        }\r\n        // 更新总共条数\r\n        //解决 NCC-44100\r\n        if (pageInfo.total) {\r\n            pageInfo.total -= deleteNum;\r\n        }\r\n        this.setStore(['pageInfo', pageInfo, false])\r\n        // 更新check全选半选状态\r\n        this.setSelect(deleteRowIdArr, 'delete')\r\n\r\n        // 删除自动选中到下一个行的逻辑\r\n        if (includeCurrentRow) {\r\n            this.setTableProps(\"currentInfo\", null, false);\r\n            this.setTableProps('focusIndex', -1, false);\r\n        }\r\n        // 更新表格数据——bbq\r\n        this.setData(rows);\r\n        return delItems;\r\n    }\r\n\r\n    addTableRows = (addData, index, shouldForceUpdate = true) => {\r\n        let rows = this.getStore(['rows'])\r\n        let checkedAll = this.getStore(['checkInfo', 'checkedAll'])\r\n        let newArr = JSON.parse(JSON.stringify(addData));\r\n        newArr = newArr.map(row => {\r\n            row.rowId = row.rowId || this._getRandom();\r\n            return row;\r\n        });\r\n        index = index || 0\r\n        rows.splice(index, 0, ...newArr)\r\n        //更新全选半选状态\r\n        if (checkedAll) {\r\n            this.setStore(['checkInfo', 'checkedAll'], false, false)\r\n            this.setStore(['checkInfo', 'indeterminate'], true, false)\r\n        }\r\n        shouldForceUpdate && this.forceUpdate();\r\n    }\r\n\r\n    // 设置选中行 value是rowid的数组\r\n    setSelect = (value, pattern = 'set', shouldForceUpdate = true) => {\r\n        let selectIndex = this.getStore(['checkInfo', 'selectIndex']);\r\n        let indeterminate = false, checkedAll = false;\r\n\r\n        if (!isArray(value)) { value = [value] }\r\n        if (pattern === 'set') {\r\n            selectIndex.clear();\r\n            value.forEach(rowId => {\r\n\r\n                selectIndex.add(rowId);\r\n            })\r\n        }\r\n        if (pattern === 'add') {\r\n            value.forEach(rowId => {\r\n                selectIndex.add(rowId);\r\n            })\r\n        }\r\n        if (pattern === 'delete') {\r\n            value.forEach(rowId => {\r\n                selectIndex.delete(rowId)\r\n            })\r\n        }\r\n        if (pattern === 'clear') {\r\n            selectIndex.clear();\r\n            this.setTableProps('focusIndex', -1, false)\r\n        }\r\n\r\n        let checkInfo = this.getStore('checkInfo');\r\n        // 获取当前视图\r\n        let rows = this.getFilterData();\r\n        let rowsLength = rows.length;\r\n        let sagaLen = 0;\r\n\r\n        rowsLength && rows.map(item => {\r\n            let values = item.values || item;\r\n            let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n            let disabled = item['disabled'] ? item['disabled'] : (values['disabled'] && values['disabled'].value);\r\n            // 记录一下saga的数目\r\n            !unSaga && (sagaLen++);\r\n\r\n            if (disabled) {\r\n                if (item.selected) {\r\n                    selectIndex.add(item.rowId)\r\n                } else {\r\n                    selectIndex.delete(item.rowId)\r\n                }\r\n            } else if ((pattern === 'all' || pattern === 'allpage') && unSaga) {\r\n                selectIndex.add(item.rowId)\r\n                item.selected = true\r\n            } else if (pattern === 'reverse') {\r\n                if (selectIndex.has(item.rowId)) {\r\n                    selectIndex.delete(item.rowId)\r\n                    item.selected = false\r\n                } else {\r\n                    if (unSaga || !disabled) {\r\n                        selectIndex.add(item.rowId)\r\n                        item.selected = true\r\n                    }\r\n                }\r\n            } else {\r\n                let isSelect = selectIndex.has(item.rowId)\r\n                isSelect && unSaga ? item.selected = true : item.selected = false\r\n            }\r\n        })\r\n        let selectSize = selectIndex.size\r\n        if (selectSize === 0) {\r\n            indeterminate = false\r\n            checkedAll = false\r\n        } else if (selectSize > 0 && (selectSize + sagaLen) < rowsLength) {\r\n            indeterminate = true\r\n            checkedAll = false\r\n        } else if ((selectSize + sagaLen) === rowsLength) {\r\n            indeterminate = false\r\n            checkedAll = true\r\n        }\r\n        checkInfo.indeterminate = indeterminate\r\n        checkInfo.checkedAll = checkedAll\r\n        checkInfo.selectIndex = selectIndex\r\n        if (pattern === 'allpage') {\r\n            checkInfo.checkedAllpage = true;\r\n        } else {\r\n            checkInfo.checkedAllpage = false;\r\n        }\r\n        // this.setData(rows, false);  // 这里不需要更新数据  引用已经更新  如果更新数据  会导致原始数据发生变化\r\n        this.setStore(['checkInfo'], checkInfo, shouldForceUpdate);\r\n    }\r\n\r\n    setCellValue = ({ value, rowId, index, attrcode, shouldForceUpdate = true }) => {\r\n        let id;\r\n        if (!isUndefined(index)) {\r\n            if (isString(index)) {\r\n                index = Number(index)\r\n            }\r\n            id = this._getRowIdbyIndex([index])[0]\r\n        }\r\n        if (rowId) {\r\n            id = rowId\r\n        }\r\n        let rows = this.getStore(['rows'])\r\n        rows.update(id, oldRow => {\r\n            oldRow.values[attrcode] = value\r\n            return oldRow;\r\n        });\r\n        shouldForceUpdate && this.forceUpdate();//改成整表更新\r\n    }\r\n\r\n    getConfig = () => {\r\n        return this.getStore(['config'])\r\n    }\r\n    setConfig = config => {\r\n        this.setStore(['config'], config, false)\r\n    }\r\n\r\n    // 清空排序\r\n    clearSortStatus({ columns }) {\r\n        columns.forEach(eve => {\r\n            //获取表格列配置\r\n            const { children } = eve;\r\n            if (!isUndefined(children)) {\r\n                //判断和并列的情况\r\n                this.clearSortStatus({ columns: children });\r\n            } else {\r\n                columns.forEach(item => {\r\n                    //保存返回的column状态，没有则终止order状态\r\n                    item.order = 'flatscend';\r\n                    item.orderNum = '';\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n  * @description: 设置缓存\r\n  * @param {type} \r\n  * @return: \r\n  */\r\n    setCache = (path, value) => {\r\n        if (!path) {\r\n            console.warn('invalid params <path> to setting');\r\n            return;\r\n        }\r\n        if (!isArray(path)) {\r\n            path = [path];\r\n        }\r\n        let current = this.cache;\r\n        let len = path.length;\r\n        path.forEach((item, index) => {\r\n            if (!current[item]) {\r\n                current[item] = {};\r\n            }\r\n\r\n            if (index === len - 1) {\r\n                current[item] = value;\r\n            } else {\r\n                current = current[item];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * @description: 获取缓存\r\n    * @param {type} \r\n    * @return: \r\n    */\r\n    getCache = paths => {\r\n        if (isUndefined(paths)) {\r\n            console.warn('invalid params <paths> to setting');\r\n            return;\r\n        }\r\n        if (!isArray(paths)) {\r\n            paths = [paths];\r\n        }\r\n\r\n        let current = this.cache;\r\n\r\n        paths.some(item => {\r\n            if (isUndefined(item) || isNullOrVoid(current)) {\r\n                isUndefined(item) && console.warn('paths has empty item[%s]', paths);\r\n                return true;\r\n            }\r\n\r\n            if (!current[item]) {\r\n                current = null;\r\n                return true;\r\n            }\r\n            current = current[item];\r\n\r\n            return false;\r\n        });\r\n        // console.log(this.cache);\r\n        return current;\r\n    }\r\n\r\n    //跨页全选的crossPage\r\n    setCrossPage = (rows, pkname, isSelect) => {\r\n        let { crossPageSelectIndex } = this.getStore('checkInfo');\r\n        let rowsArr = isArray(rows) ? rows : [rows];\r\n        rowsArr.forEach(row => {\r\n            let pk\r\n            if (isObject(row.values)) {\r\n                pk = row.values[pkname].value;\r\n            } else {\r\n                pk = row[pkname].value;\r\n            }\r\n            let values = row.values || row;\r\n            let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n            if (isSelect && unSaga) {\r\n                crossPageSelectIndex.add(pk);\r\n            } else {\r\n                crossPageSelectIndex.delete(pk);\r\n            }\r\n        });\r\n    };\r\n\r\n    _hasMeta({ id } = {}) {\r\n        let meta = this.getStore('meta') || {};\r\n        if (!id || !isObject(meta[id])) { return null; }\r\n        return meta[id];\r\n    }\r\n    _getRandom() {\r\n        return String(new Date().getTime()).slice(-5) + getSafeRandom().toString(12);\r\n    }\r\n    _getRowIdbyIndex = indexArr => {\r\n        let rows = this.getData()\r\n        let rowIdArr = []\r\n        rows.forEach((row, index) => {\r\n            let strIndex = String(index)\r\n            if (indexArr.includes(index) || indexArr.includes(strIndex)) {\r\n                rowIdArr.push(row.rowId)\r\n            }\r\n        })\r\n        return rowIdArr\r\n    }\r\n\r\n}\r\n\r\nexport const useSimpleTable = hookFactory(simpleTableStore);","/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: bbq\r\n * @Date: 2020-06-05 15:28:21\r\n * @LastEditors: bbq\r\n * @LastEditTime: 2021-03-05 14:00:33\r\n */\r\nimport React from 'react';\r\nimport { useSimpleTable } from './store';\r\nimport { Table } from '@platform/base';\r\nimport { BaseComponent } from '@platform/template';\r\nimport { lib, handleSortcolumns } from '@platform/table-core';\r\nimport { ArrayData } from '@platform/template';\r\nimport { isFunction, isNumber, withViewModel, warningOnce, pageTo, cacheTools, getMultiLang, ajax } from '@platform/api';\r\nimport { utils } from '@platform/table-core';\r\nconst { isArray, isObject, excelPackageData, getMetaIsTotal, isUndefined, setPageSizeStorage, getPageSizeStorage } = utils;\r\nconst { formatColumn, pagination, selectRow, indexCol, checkCol, errorCol, filter, selectable, simpleTableModal, total, columnSort, contextMenu } = lib;\r\nrequire('./index.less');\r\nconst MetaTable = contextMenu(simpleTableModal(pagination(selectable(filter(selectRow(indexCol(checkCol(errorCol(total(formatColumn(columnSort(Table))))))))))));\r\n\r\n// 表格数据\r\nfunction TableData(data, keyPath = 'rowid') {\r\n    return new ArrayData(data, keyPath);\r\n}\r\n@withViewModel\r\nclass SimpleTable extends BaseComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ViewModel = this.props.ViewModel;\r\n        this.state = { isEllipsis: true, key: 1 };\r\n    }\r\n    UNSAFE_componentWillMount() {\r\n        //初始化表格的时候,将缓存数据放入表格中\r\n        let { config = {}, store, afterLangload } = this.props;\r\n        if (config.dataSource) {\r\n            let data = this.ViewModel.getData(config.dataSource);\r\n            if (data && data.simpleTable) {\r\n                let arr = ['rows', 'pageInfo', 'allpks', 'alltss', 'props', 'modelDatas', 'sortParam', 'config', 'checkInfo']\r\n                arr.forEach(item => {\r\n                    if (item === 'rows') {\r\n                        let val = isArray(data.simpleTable.rows)\r\n                            ? new TableData(data.simpleTable.rows, 'rowId')\r\n                            : store.getData();\r\n                        store.setData(val, false);\r\n                    } else if (item === 'pageInfo') {\r\n                        let val = data.simpleTable[item]\r\n                            ? data.simpleTable[item]\r\n                            : store.getStore([item]);\r\n                        let allpks = data.simpleTable['allpks'] || []\r\n                        let total = allpks.length\r\n                        if (total) { val.total = total } //用于更新卡片跳列表，更新总条数\r\n                        store.setStore([item], val, false);\r\n                    } else {\r\n                        let val = data.simpleTable[item]\r\n                            ? data.simpleTable[item]\r\n                            : store.getStore([item]);\r\n                        if (item === 'checkInfo') {\r\n                            store.setStore([item], val, true); //true 最后更新store\r\n                        } else {\r\n                            store.setStore([item], val, false);\r\n                        }\r\n                    }\r\n                })\r\n                //执行数据初始化周期函数\r\n                if (isFunction(config.componentInitFinished)) {\r\n                    config.componentInitFinished();\r\n                }\r\n                // 兼容筛选, 当卡片返回列表时, 重新筛选列表\r\n            }\r\n        }\r\n\r\n        let { setCache } = store;\r\n\r\n        //加载多语\r\n        let callback = json => {\r\n            // this.setState({ json });\r\n            setCache('langJson', json || {});\r\n            // console.log(store.getCache('langJson'))\r\n            // 备份一份到全局\r\n            afterLangload && afterLangload(json, store);\r\n\r\n            // 强制更新一次\r\n            this.forceUpdate();\r\n        };\r\n        getMultiLang({ moduleId: \"page_table\", callback });\r\n\r\n        store.setConfig(config);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { config = {}, store } = this.props;\r\n        if (NODE_ENV === 'development') {\r\n            return\r\n        }\r\n        let data = this.ViewModel.getData(config.dataSource);\r\n        if (data && data.simpleTable && data.simpleTable.pageInfo) {\r\n            return\r\n        }\r\n        // ajax({\r\n        //     url: '/nccloud/platform/templet/pagesize.do',\r\n        //     method: 'post',\r\n        //     data: {},\r\n        //     success: res => {\r\n        //         if (res.data) {\r\n        //             store.setStore(['pageInfo', 'pageSize'], Number(res.data));\r\n        //         }\r\n        //     },\r\n        //     error: err => {\r\n        //         console.log(err)\r\n        //     },\r\n        // });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { config = {}, store } = this.props;\r\n        let storeData = store.getStore();\r\n        let {\r\n            rows, allpks, pageInfo, checkInfo,\r\n            currentInfo, alltss, props, modelDatas, sortParam,\r\n        } = storeData;\r\n        // 兼容筛选 todo\r\n        if (config.dataSource) {\r\n            let currentpks = [];\r\n            if (config.pkname && Array.isArray(rows) && rows.length) {\r\n                rows.forEach(item => {\r\n                    if (item && item.values && item.values[config.pkname]) {\r\n                        if (!currentpks.includes(item.values[config.pkname].value)) {\r\n                            currentpks.push(item.values[config.pkname].value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            //更新allpks\r\n            let pkLen = currentpks.length;\r\n            let { pageIndex, pageSize } = pageInfo;\r\n            let startIndex = (Number(pageIndex) - 1) * Number(pageSize);\r\n            allpks.splice(startIndex, pkLen, ...currentpks);\r\n\r\n            let cacheData = {\r\n                allpks,\r\n                currentpks,\r\n                rows,\r\n                pageInfo,\r\n                checkInfo,\r\n                currentInfo,\r\n                alltss,\r\n                props,\r\n                modelDatas,\r\n                sortParam,\r\n                config,\r\n            }\r\n            let data = { simpleTable: cacheData };\r\n            //设置缓存数据--清空卡片的缓存数据\r\n            this.ViewModel.setData(config.dataSource, data);\r\n        } else if (allpks) {\r\n            cacheTools.set(\"allpks\", allpks);\r\n        }\r\n    }\r\n\r\n    pageInfoChange = newPageInfo => {\r\n        const { store, onPageInfoChange } = this.props;\r\n        const { getStore, setStore } = store;\r\n        let allpks = getStore(['allpks']);\r\n        setStore(['pageInfo'], newPageInfo);\r\n        //存储本次选择的分页条数\r\n        setPageSizeStorage(getStore(['meta']), this.props.name, newPageInfo.pageSize);\r\n\r\n        // 如果表格没有数据，则不能使用该方法\r\n        if (allpks.length <= 0) return;\r\n        if (onPageInfoChange) {\r\n            onPageInfoChange(this.splitPks(allpks, newPageInfo.pageIndex, newPageInfo.pageSize), newPageInfo.total);\r\n        }\r\n    };\r\n\r\n    _getRowIdbyIndex(indexArr) {\r\n        const { store } = this.props;\r\n        let rows = store.getData();\r\n        let rowIdArr = [];\r\n        rows.forEach((row, index) => {\r\n            if (indexArr.includes(index)) {\r\n                rowIdArr.push(row.rowId);\r\n            }\r\n        });\r\n        return rowIdArr;\r\n    }\r\n\r\n    // 分割分页id\r\n    splitPks = (data, pageIndex, pageSize) => {\r\n        if (data.length <= pageSize) {\r\n            // 这里暂时解决问题，后续在进行优化\r\n            return data;\r\n        }\r\n        let pks = [];\r\n        let index = Number(pageIndex);\r\n        let size = Number(pageSize);\r\n        let start = (index - 1) * size;\r\n        for (let i = start; i < start + size; i++) {\r\n            if (data[i]) {\r\n                pks.push(data[i]);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return pks;\r\n    };\r\n\r\n    onAllCheckChange = value => {\r\n        let { store, config = {}, name } = this.props;\r\n        let { getStore, setStore, getData, setSelect, setCrossPage } = store;\r\n        let checkInfo = getStore(['checkInfo']);\r\n        let { selectIndex } = checkInfo;\r\n        let rows = getData()\r\n        // 跨页全选\r\n        if (config.crossPageSelect && config.pkname) {\r\n            setCrossPage(rows, config.pkname, value)\r\n        }\r\n\r\n        let oldLen = selectIndex.size;\r\n\r\n        if (value) {\r\n            setSelect(undefined, 'all', false);\r\n            setStore(['checkInfo', 'checkedAll'], true, false);\r\n        } else {\r\n            setSelect(undefined, 'clear', false);\r\n            setStore(['checkInfo', 'checkedAll'], false, false);\r\n        }\r\n        let len = rows.length;\r\n        let newLen = getStore(['checkInfo', 'selectIndex']).size;\r\n\r\n        this.forceUpdate(() => {\r\n            this.props.onSelectedAll && isFunction(this.props.onSelectedAll) && this.props.onSelectedAll(name, value, len);\r\n            this.props.selectedChange &&\r\n                isFunction(this.props.selectedChange) &&\r\n                this.props.selectedChange(name, newLen, oldLen);\r\n        })\r\n    };\r\n\r\n    // 框选等操作\r\n    onBatchSelected(rows = [], hotkey) {\r\n        let { config = {}, store } = this.props;\r\n        let { setSelect, setCrossPage } = store;\r\n\r\n        // 清空所有\r\n        setSelect(undefined, 'clear', false);\r\n\r\n        rows.forEach(row => {\r\n            let values = JSON.parse(JSON.stringify(row.values || row));\r\n            values.rowId = values.rowId || { value: row.rowId };\r\n            values.selected = values.selected || { value: row.selected };\r\n\r\n            let value = [values.rowId.value];\r\n            let selected = values.selected.value;\r\n            // 错误行禁用\r\n            if (values && values.saga_status && values.saga_status.value === '1') {\r\n                return;\r\n            }\r\n            // 跨页选功能\r\n            // 跨页全选\r\n            if (config.crossPageSelect && config.pkname) {\r\n                setCrossPage(values, config.pkname, !selected)\r\n            }\r\n            if (selected && hotkey === 'ctrl') {\r\n                setSelect(value, 'delete', false);\r\n            } else {\r\n                setSelect(value, 'add', false);\r\n            }\r\n        });\r\n        // 更新\r\n        this.forceUpdate && this.forceUpdate();\r\n        config.onBatchSelected && config.onBatchSelected(rows)\r\n    }\r\n\r\n    onCheckChange = (record, index, isUnique = false) => {\r\n        const { config = {}, name, store } = this.props;\r\n        const { getStore, setSelect, setCrossPage, setTableProps } = store;\r\n        let value = [record.rowId.value];\r\n        let checkInfo = getStore(['checkInfo']);\r\n        let { selectIndex, crossPageSelectIndex } = checkInfo;\r\n        let oldLen = selectIndex.size;\r\n        let selected = record.selected.value\r\n        // 跨页选功能\r\n        // 跨页全选\r\n        if (config.crossPageSelect && config.pkname) {\r\n            if (isUnique) {\r\n                crossPageSelectIndex.clear()\r\n            }\r\n            setCrossPage(record, config.pkname, !selected)\r\n        }\r\n\r\n        // 更新当前操作行\r\n        setTableProps('currentIndex', index, false);\r\n\r\n        if (isUnique) {\r\n            if (selected && oldLen === 1) {\r\n                setSelect(value, 'delete', false);\r\n                setTableProps('currentIndex', -1, false);\r\n            } else {\r\n                setSelect(value, 'set', false);\r\n            }\r\n        } else {\r\n            if (selected) {\r\n                setSelect(value, 'delete', false);\r\n                setTableProps('currentIndex', -1, false);\r\n            } else {\r\n                setSelect(value, 'add', false);\r\n            }\r\n        }\r\n\r\n        let newLen = getStore(['checkInfo', 'selectIndex']).size;\r\n\r\n        this.forceUpdate(() => {});\r\n        // // 选中选项的回调函数\r\n        this.props.onSelected &&\r\n            isFunction(this.props.onSelected) &&\r\n            this.props.onSelected(name, record, index, !selected);\r\n        this.props.selectedChange &&\r\n            isFunction(this.props.selectedChange) &&\r\n            this.props.selectedChange(name, newLen, oldLen);\r\n    };\r\n    changeCrossSelect = value => {\r\n        const { store, config = {}, name } = this.props;\r\n        const { pkname } = config\r\n        const { getStore, setStore, setSelect, setCrossPage, getData } = store;\r\n        const { checkInfo, allpks } = getStore();\r\n        let { crossPageSelectIndex } = checkInfo;\r\n        let oldLen = crossPageSelectIndex.size\r\n        if (!pkname) { warningOnce(false, `请配置pkname`); return }\r\n        let rows = getData()\r\n        switch (value) {\r\n            case 'current':\r\n                setSelect(undefined, 'all');\r\n                crossPageSelectIndex.clear()\r\n                setCrossPage(rows, pkname, true)\r\n                break;\r\n            case 'all':\r\n                setSelect(undefined, 'allpage');\r\n                crossPageSelectIndex = new Set(allpks)\r\n                break;\r\n            case 'reverse':\r\n                let needSelectRowId = []\r\n                rows.forEach(row => {\r\n                    if (!row.selected) {\r\n                        needSelectRowId.push(row.rowId)\r\n                    }\r\n                })\r\n                setSelect(needSelectRowId, 'set');\r\n                allpks.forEach(pk => {\r\n                    if (crossPageSelectIndex.has(pk)) {\r\n                        crossPageSelectIndex.delete(pk)\r\n                    } else {\r\n                        crossPageSelectIndex.add(pk)\r\n                    }\r\n                })\r\n        }\r\n        setStore(['checkInfo', 'crossPageSelectIndex'], crossPageSelectIndex, false)\r\n        let newLen = crossPageSelectIndex.size\r\n        this.props.selectedChange &&\r\n            isFunction(this.props.selectedChange) &&\r\n            this.props.selectedChange(name, newLen, oldLen);\r\n    };\r\n    sortChange = (sortParam, sortData) => {\r\n        let sortObj = {};\r\n        let sortRows = [];\r\n        let { store, name } = this.props;\r\n        let { setStore, getData, getMeta } = store;\r\n        let rows = getData();\r\n        /**\r\n         * 每次排序都存储新的排序信息\r\n         * 这是产品李聪慧让加的, 为了解决单据打印时，列表对中字段排序产生的问题\r\n         */\r\n        setStore(['sortParam'], {\r\n            mode: \"single\",\r\n            sortParam,\r\n        }, false);\r\n        sortParam.forEach(item => {\r\n            sortObj[item.field] = item;\r\n        });\r\n        // 处理排序多表头\r\n        handleSortcolumns({\r\n            columns: getMeta(name) || [],\r\n            sortObj,\r\n        });\r\n        sortData.forEach(data => {\r\n            rows.forEach(row => {\r\n                if (data.rowId.value === row.rowId) {\r\n                    sortRows.push(row);\r\n                }\r\n            });\r\n        });\r\n        store.setData(sortRows, true);\r\n    }\r\n    checkNum = () => {\r\n        let { config = {}, store } = this.props;\r\n        let num = 0;\r\n        if (config.crossPageSelect && config.pkname) {\r\n            num = store.getStore(['checkInfo', 'crossPageSelectIndex']).size;\r\n        } else {\r\n            num = store.getStore(['checkInfo', 'selectIndex']).size;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    updateColumnAfterSetting = (newColumn, areaCode) => {\r\n        let { store } = this.props;\r\n        let { getStore, setMeta } = store;\r\n        let meta = getStore(['meta']);\r\n        if (newColumn.length && areaCode) {\r\n            let finalColumn = [...meta[areaCode].items];\r\n\r\n            let sortIndexArr = [];\r\n            let sortObjArr = [];\r\n            newColumn.map(newItem => {\r\n                meta[areaCode].items.map((oldItem, index) => {\r\n                    if (newItem.attrcode === oldItem.attrcode) {\r\n                        oldItem.width = newItem.width;\r\n                        oldItem.islock = newItem.islock;\r\n                        oldItem.visible = newItem.visible;\r\n                        sortIndexArr.push(index);\r\n                        sortObjArr.push(oldItem);\r\n                    }\r\n                });\r\n            });\r\n            sortIndexArr.sort((a, b) => a - b);\r\n            sortIndexArr.forEach((item, index) => {\r\n                finalColumn[item] = sortObjArr[index];\r\n            });\r\n            meta[areaCode].items = finalColumn;\r\n            setMeta(meta)\r\n            this.setState({ key: this.state.key + 1 })\r\n        }\r\n    }\r\n    getColSettiongParam = (meta, name) => {\r\n        if (meta && meta[name]) {\r\n            let currentMeta = meta[name]\r\n            let config = this.props.store.getConfig()\r\n            return {\r\n                appcode: currentMeta.appcode || pageTo.getAppCode(),\r\n                pagecode: currentMeta.pagecode || pageTo.getPageCode(),\r\n                code: currentMeta.templateCode || meta.code,\r\n                pageid: currentMeta.pageid || meta.pageid,\r\n                areaCode: name,\r\n                areaId: currentMeta.oid,\r\n                noColSetClass: config.noColSetClass,\r\n                colSetCallback: config.colSetCallback,\r\n            }\r\n        } else {\r\n            return {}\r\n        }\r\n    }\r\n\r\n    //右键菜单点击函数\r\n    contextMenuClick = (btnCode, execCommandCopy, param, insertNum, rowIndex, isHotKey = false) => {\r\n        let { store, name } = this.props;\r\n        let { getCache, getRows, getMeta, getArrayMeta, getData, getFilterData } = store;\r\n        let copyCode = [\"copy\", \"copy-row\", \"copy-column\"]\r\n        if (copyCode.includes(btnCode)) {\r\n            //选中表头\r\n            let activeHeads = getCache('activeSpecialCells');\r\n            console.log(\"表头选中信息：\", activeHeads)\r\n            let arrayMeta = getArrayMeta(name);\r\n            let currentMeta = store.getMeta(name)\r\n\r\n            let activedCells = getCache(\"activedCells\");\r\n\r\n            if (isHotKey && !activedCells && !activeHeads) {\r\n                return;\r\n            }\r\n\r\n            let selectedRows = [];\r\n            if (btnCode === 'copy' || btnCode === 'copy-row') {\r\n                selectedRows = getRows({ rowKeyValues: Object.keys(activedCells) });\r\n            } else if (btnCode === 'copy-column') {\r\n                selectedRows = getFilterData();\r\n            }\r\n            isFunction(execCommandCopy) && execCommandCopy(activeHeads, currentMeta, activedCells, selectedRows, arrayMeta);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { store, name, config = {}, onCellHyperlinkTo } = this.props;\r\n        const { getStore, setStore, getData, getFilterData, getMeta, setTableProps, getTableProps, setClickedRow, getArrayMeta, setCellProps, setCellValue } = store;\r\n        const { pageInfo, checkInfo } = getStore();\r\n        let {\r\n            foldCacheId, //对于没有appcode，pagecode..的表格，做折行缓存的标志\r\n            cancelCustomRightMenu = false, addBlankCol, extendRightMenu, showWidthAndHeightConfig = true, height, high_selectable = {}, hideRightMenu = false, high_filter = {}, ...others\r\n        } = config\r\n        if (hideRightMenu) {\r\n            cancelCustomRightMenu = true;\r\n            high_selectable.enable = false;\r\n            showWidthAndHeightConfig = false;\r\n        }\r\n        let items = getMeta(name) || [];\r\n        let focusIndex = getTableProps('focusIndex');\r\n        let meta = getStore(['meta']);\r\n        let showPagination;\r\n        if (meta && meta[name]) {\r\n            showPagination = meta[name].pagination;\r\n            if (!pageInfo.pageSize) {\r\n                let prePageSize = getPageSizeStorage(meta, name);\r\n                pageInfo.pageSize = prePageSize;\r\n                setStore(['pageInfo'], pageInfo, false)\r\n            }\r\n        }\r\n        let colSettingParam = this.getColSettiongParam(meta, name)\r\n        const otherAreaHeight = isNumber(config.otherAreaHeight) && !Number.isNaN(config.otherAreaHeight) ? config.otherAreaHeight : 0;\r\n        let adaptionHeight = !!(isUndefined(config.height) && (config.adaptionHeight || isUndefined(config.adaptionHeight)))\r\n        let heightObj = {}\r\n        if (height) {\r\n            heightObj.scroll = { x: true, y: height }\r\n            heightObj.bodyStyle = { height: height }\r\n        } else {\r\n            heightObj.scroll = { x: true, y: 300 }\r\n            heightObj.bodyStyle = { height: 300 }\r\n        }\r\n        let data = getFilterData();\r\n        //兼容旧版本\r\n        let rows = data.map(row => {\r\n            let values = row.values;\r\n            ['status', 'rowId', 'selected', 'isOptimized', 'disabled'].forEach(key => {\r\n                if (!isObject(row[key])) {\r\n                    values[key] = { value: row[key] }\r\n                }\r\n            })\r\n            delete values.values;\r\n            return values;\r\n        });\r\n        // arrcolumns\r\n        let arrColumns = getArrayMeta(name);\r\n        // rowKey\r\n        let rowKey = 'rowId';\r\n        let isTotal = config.showTotal || getMetaIsTotal(items);\r\n\r\n        // 默认开启 框选 high_selectable.enable\r\n        //high_selectable.enable = high_selectable.enable || true;\r\n\r\n        // 默认启用快捷键选中 只有快捷键选中行\r\n        if (isUndefined(high_selectable.enable)) {\r\n            high_selectable.enable = true;\r\n            // high_selectable.disabled = isUndefined(high_selectable.disabled) ? 'slide' :\r\n            //     (isArray(high_selectable.disabled) ? high_selectable.disabled : [high_selectable.disabled]);\r\n            // high_selectable.single = high_selectable.single || false;\r\n            // // 不开启\r\n            // high_selectable.selectCell = isUndefined(high_selectable.selectCell) ? false : high_selectable.selectCell;\r\n        }\r\n        // console.log(high_selectable);\r\n        // 是否框选(批选)\r\n        const isBatchSelect = isUndefined(high_selectable.selectCell) ? true : high_selectable.selectCell;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {items.length ? < MetaTable\r\n                    {...this.props}\r\n                    columns={items}\r\n                    data={rows}\r\n                    className={'simpleTable'}//用于识别table\r\n                    rowKey={rowKey}\r\n                    status={'browse'}\r\n                    disableEditType\r\n                    height={30}\r\n                    {...heightObj}\r\n                    adaptionHeight={adaptionHeight}\r\n                    cardType=\"simple\"\r\n                    otherAreaHeight={showPagination ? 42 + otherAreaHeight : otherAreaHeight}\r\n                    renderStatus=\"browse\"\r\n                    bodyDisplayInRow={isUndefined(config.multipleRowCell) ? this.state.isEllipsis : !config.multipleRowCell}\r\n                    pageInfo={pageInfo}\r\n                    pageInfoChange={this.pageInfoChange}\r\n                    isDrag={config.isDrag}\r\n                    lazyload={config.lazyload}\r\n                    langJson={store.getCache('langJson')} // 给单元格用\r\n                    // autoAffixScroll\r\n                    getCellValue={param => {\r\n                        let { rowKeyValue, attrcode } = param;\r\n                        let rowId = rowKeyValue.value;\r\n                        let rows = getData();\r\n                        if (rows.length && isFunction(rows.query)) {\r\n                            let row = rows.query(rowId)\r\n                            let cell = row.values[attrcode]\r\n                            if (cell && cell.value && isObject(cell.value)) {\r\n                                return {}\r\n                            }\r\n                            return cell || {}\r\n                        }\r\n                        return {};\r\n                    }}\r\n                    setCellValue={params => {\r\n                        let { rowKeyValue, attrcode, value = {} } = params;\r\n                        setCellValue({ rowId: rowKeyValue, attrcode, value }); // 这里就是onChange 和 onBlur 的集合\r\n                    }}\r\n                    onCellHyperlinkTo={(record, attrcode, value) => {\r\n                        onCellHyperlinkTo && onCellHyperlinkTo(record, attrcode, value, name);\r\n                    }}\r\n                    cellClassName={({ rowIndex: index, record, attrcode: code }) => {\r\n                        return isFunction(config.setCellClass) && config.setCellClass(index, record, code);\r\n                    }}\r\n                    focusIndex={focusIndex} //用于聚焦\r\n                    onRowClick={(record, index, e) => {\r\n                        if (record.disabled && record.disabled.value === true) return;\r\n                        // 为了避免和新开发的行框选点选区域选事件冲突\r\n                        if (high_selectable && high_selectable.enable && (e.ctrlKey || e.shiftKey || e.metaKey)) {\r\n                            return;\r\n                        }\r\n                        //更新当前选中行\r\n                        setTableProps('currentIndex', index, false);\r\n\r\n                        // 错误行禁用\r\n                        let values = record.values || record;\r\n                        if (\r\n                            !values ||\r\n                            !values.saga_status ||\r\n                            values.saga_status.value !== \"1\"\r\n                        ) {\r\n                            setClickedRow(index);\r\n                            if (e.target.localName !== 'a' && e.target.className !== 'code-detail-link' && !config.disableClickRowToSelect) {//点击a标签不候选行\r\n                                this.onCheckChange(record, index, true);\r\n                            }\r\n                        }\r\n\r\n                        this.props.onRowClick &&\r\n                            isFunction(this.props.onRowClick) &&\r\n                            this.props.onRowClick(record, index, e);\r\n                    }}\r\n                    // 选中行\r\n                    hasSelected={({ rowKeyValue = {} }) => {\r\n                        let selectedIndex = getStore(['checkInfo', 'selectIndex']);\r\n                        return selectedIndex.has(rowKeyValue.value);\r\n                    }}\r\n                    onRowDoubleClick={(record, index, e) => {\r\n                        //------------双击checkbox区域，不跳转 start------\r\n                        let className = e.target.className\r\n                        let type = e.target.type\r\n                        if (typeof className === 'string' && className.indexOf('checkbox') != -1) {\r\n                            return\r\n                        } else if (typeof className === 'string' && className.indexOf('cell-content') != -1) {\r\n                            let parentNodeClass = e.target.parentElement.parentElement.className\r\n                            if (typeof parentNodeClass === 'string' && parentNodeClass.indexOf('checkbox') != -1) {\r\n                                return\r\n                            }\r\n                        } else if (type === 'checkbox') {\r\n                            return\r\n                        }\r\n                        //------------双击checkbox区域，不跳转 end------\r\n                        //更新当前选中行\r\n                        setTableProps('currentIndex', index, false);\r\n\r\n                        // 错误行禁用\r\n                        let values = record.values || record;\r\n                        if (\r\n                            !values ||\r\n                            !values.saga_status ||\r\n                            values.saga_status.value !== \"1\"\r\n                        ) {\r\n                            setClickedRow(index);\r\n                        }\r\n\r\n                        this.props.onRowDoubleClick &&\r\n                            isFunction(this.props.onRowDoubleClick) &&\r\n                            this.props.onRowDoubleClick(record, index, e);\r\n                    }}\r\n                    name={name}\r\n                    store={store}\r\n                    onAllCheckChange={value => this.onAllCheckChange(value)}\r\n                    onCheckChange={(record, index) => this.onCheckChange(record, index)}\r\n                    checkInfo={checkInfo}\r\n                    backSort={config.sort}\r\n                    sortChange={(sortParam, sortData) => this.sortChange(sortParam, sortData)} //排序的回调\r\n                    checkNum={this.checkNum}//显示已选行数\r\n                    showPagination={showPagination}\r\n                    checkColConfig={{\r\n                        showCheck: config.showCheck || false,\r\n                        changeCrossSelect: this.changeCrossSelect,\r\n                        crossPageSelect: config.crossPageSelect,\r\n                        langJson: store.getCache('langJson'),\r\n                    }}\r\n                    indexColConfig={{\r\n                        showIndex: config.showIndex || false,\r\n                        showCheck: config.showCheck || false,\r\n                        langJson: store.getCache('langJson'),\r\n                    }}\r\n                    totalConfig={{\r\n                        showTotal: config.showTotal,\r\n                        noTotalRows: config.noTotalRows,\r\n                        noTotalCol: config.noTotalCol,\r\n                        allowTotalRows: config.allowTotalRows,\r\n                        numberPd: 7,\r\n                    }}\r\n                    isTotal={isTotal}\r\n                    high_filter={{\r\n                        alloweFilter: true,\r\n                        langJson: store.getCache('langJson'),\r\n                        panelTitle: store.getStore(['meta', name, 'name']) || '',\r\n                        filterData: store.getData(),\r\n                        customColData: store.getCache('customColData'),\r\n                        rowKey,\r\n                        isReset: store.getStore('filterReset'),\r\n                        arrColumns,\r\n                        handleFilterCallBack: (params = {}) => {\r\n                            let {\r\n                                filteredRow,\r\n                                filteredRowKeyValues,\r\n                                columnStatus = {},\r\n                            } = params;\r\n\r\n                            // 更新重置状态\r\n                            store.setStore('filterReset', false, false);\r\n\r\n                            // 设置列状态  设置表格筛选图标\r\n                            store.setColumn(name, columnStatus, false);\r\n\r\n                            // 设置行状态\r\n                            let data = store.getData() || [];\r\n                            data.forEach(row => {\r\n                                if (filteredRowKeyValues.includes(row[rowKey])) {\r\n                                    row.filter = false;\r\n                                } else {\r\n                                    row.filter = true;\r\n                                }\r\n                            });\r\n\r\n                            // 处理已选等逻辑\r\n                            let checkInfo = store.getStore('checkInfo');\r\n                            if (filteredRow && filteredRow.length) {\r\n                                checkInfo.indeterminate = filteredRow.some(item => {\r\n                                    let values = item.values || item;\r\n                                    let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                    return unSaga && item.selected;\r\n                                });\r\n                                checkInfo.checkedAll = filteredRow.every(item => {\r\n                                    let values = item.values || item;\r\n                                    let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                    return !unSaga || item.selected;\r\n                                });\r\n                            }\r\n                            store.setStore([\"checkInfo\"], checkInfo, false);\r\n\r\n                            // 更新 所有的更新放到弹窗关闭(onHide)时\r\n                            store.setData({ data, shouldForceUpdate: false });\r\n                            config.handleFilterCallBack && config.handleFilterCallBack();\r\n                        },\r\n                        handleResetCallBack: params => {\r\n                            let { columnStatus } = params;\r\n                            // 更新重置状态\r\n                            store.setStore('filterReset', false, false);\r\n                            // 设置行状态\r\n                            let data = store.getData() || [];\r\n                            data.forEach(row => {\r\n                                row.filter = false;\r\n                                delete row.filterIndex;\r\n                            });\r\n\r\n                            // 处理已选等逻辑\r\n                            let checkInfo = store.getStore('checkInfo');\r\n                            let viewData = data;\r\n                            if (viewData && viewData.length) {\r\n                                checkInfo.indeterminate = viewData.some(item => {\r\n                                    let values = item.values || item;\r\n                                    let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                    return unSaga && item.selected;\r\n                                });\r\n                                checkInfo.checkedAll = viewData.every(item => {\r\n                                    let values = item.values || item;\r\n                                    let unSaga = !values['saga_status'] || values['saga_status'].value !== '1';\r\n                                    return !unSaga || item.selected;\r\n                                });\r\n                            }\r\n                            store.setStore([\"checkInfo\"], checkInfo, false);\r\n\r\n                            // 更新 所有的更新放到弹窗关闭(onHide)时\r\n                            store.setData({ data, shouldForceUpdate: false });\r\n\r\n                            // 列状态\r\n                            store.setColumn(name, columnStatus, false);\r\n                            config.handleResetCallBack && config.handleResetCallBack();\r\n                        },\r\n                        onHide: params => {\r\n                            let { columnStatus } = params;\r\n                            store.setColumn(name, columnStatus, true);\r\n                        },\r\n                        ...(high_filter || {}),\r\n                    }}\r\n                    high_selectable={{\r\n                        store,\r\n                        onSelect: (activedCells = {}, activeSpecialCells = [], hotkey, { current, isBatch }) => {\r\n                            // console.log(activedCells, hotkey, current);\r\n                            let pervActivedCells = store.getCache('activedCells') || {};\r\n\r\n                            // TODO Saga相关的内容\r\n                            for (let rowKeyValue in activedCells) {\r\n                                pervActivedCells[rowKeyValue] = pervActivedCells[rowKeyValue] || [];\r\n                                for (let attrcode of activedCells[rowKeyValue]) {\r\n                                    pervActivedCells[rowKeyValue].push(attrcode);\r\n                                    // 解决批改时边线样式不对的问题\r\n                                    isBatchSelect && setCellProps(rowKeyValue, attrcode, {\r\n                                        actived: true,\r\n                                        leftLine: false,\r\n                                        rightLine: false,\r\n                                        topLine: false,\r\n                                        bottomLine: false,\r\n                                    }, false)\r\n                                }\r\n                            }\r\n\r\n                            // 重新赋值\r\n                            activedCells = pervActivedCells;\r\n\r\n                            // 批操作\r\n                            if (isBatch) {\r\n                                let rows = [];\r\n                                for (let rowKeyValue in activedCells) {\r\n                                    // TODO\r\n                                    let data = getData();\r\n                                    if (data.length && isFunction(data.query)) {\r\n                                        rows.push(data.query(rowKeyValue));\r\n                                    }\r\n                                }\r\n                                if (config.onBatchSelected) {\r\n                                    this.onBatchSelected(rows, hotkey)\r\n                                } else {\r\n                                    let selectIndex = store.getStore(['checkInfo', 'selectIndex']);\r\n                                    selectIndex.clear();\r\n                                    rows.forEach(row => {\r\n                                        let rowKeyValue = row[rowKey];\r\n                                        let values = row.values || row,\r\n                                            isSagaStatus = values && values.saga_status && values.saga_status.value === '1';\r\n                                        // 错误行禁用\r\n                                        if (isSagaStatus && row.disabled) {\r\n                                            return;\r\n                                        }\r\n                                        !selectIndex.has(rowKeyValue) && selectIndex.add(rowKeyValue);\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            hotkey === 'down' &&\r\n                                current &&\r\n                                current.rowKeyValue &&\r\n                                setCellProps(current.rowKeyValue, current.attrcode, { showDrag: true }, false);\r\n\r\n                            // 缓存已选\r\n                            store.setCache('activedCells', activedCells);\r\n                            store.setCache('activedCell', current);\r\n\r\n                            // 没有选中单元格\r\n                            if (!isBatchSelect) {\r\n                                this.forceUpdate();\r\n                                return;\r\n                            }\r\n                            // 选中表头\r\n                            let oldActiveSpecialCells = store.getCache('activeSpecialCells') || [];\r\n                            if (activeSpecialCells.length > 0 || (activeSpecialCells.length === 0 && oldActiveSpecialCells.length !== 0)) {\r\n                                store.setCache('activeSpecialCells', activeSpecialCells);\r\n                                // console.log(store.getCache('activeSpecialCells'), 'activeSpecialCellsactiveSpecialCellsactiveSpecialCellsactiveSpecialCells');\r\n\r\n                                oldActiveSpecialCells = oldActiveSpecialCells.map(item => item.attrcode);\r\n                                activeSpecialCells = activeSpecialCells.map(item => item.attrcode);\r\n\r\n                                // 不能用actived 会有冲突\r\n                                store.setColumn(name, oldActiveSpecialCells, { unitActive: false }, false);\r\n                                // 不能用actived 会有冲突\r\n                                store.setColumn(name, activeSpecialCells, { unitActive: true }, false);\r\n                            }\r\n\r\n                            // 修正边框\r\n                            if (activedCells || activeSpecialCells) {\r\n                                let arrayMeta = store.getArrayMeta(name, true),\r\n                                    arrayMetaLen = arrayMeta.length;\r\n                                let viewData = store.getFilterData();\r\n                                let linkObjMeta = arrayMeta.reduce((result, item, i, arr) => {\r\n                                    let next = arr[i + 1] || {};\r\n                                    let prev = arr[i - 1] || {};\r\n                                    if (item.visible) {\r\n                                        result[item.attrcode] = {\r\n                                            prev: prev.attrcode,\r\n                                            current: item.attrcode,\r\n                                            next: next.attrcode,\r\n                                        }\r\n                                    }\r\n                                    return result;\r\n                                }, {});\r\n\r\n                                viewData.forEach((row, i) => {\r\n                                    let values = row.values;\r\n                                    let prevRowValues = (viewData[i - 1] || {}).values || {};\r\n                                    let nextRowValues = (viewData[i + 1] || {}).values || {};\r\n\r\n                                    for (let attrcode in values) {\r\n                                        let cell = values[attrcode];\r\n                                        if (cell['actived']) {\r\n                                            let prevCol = linkObjMeta[attrcode] && linkObjMeta[attrcode].prev;\r\n                                            let nextCol = linkObjMeta[attrcode] && linkObjMeta[attrcode].next;\r\n\r\n                                            cell['leftLine'] = !prevCol || !values[prevCol] || !values[prevCol]['actived'];\r\n\r\n                                            cell['rightLine'] = !nextCol || !values[nextCol] || !values[nextCol]['actived'];\r\n\r\n                                            cell['topLine'] = prevRowValues && (!prevRowValues[attrcode] || !prevRowValues[attrcode]['actived']);\r\n\r\n                                            cell['bottomLine'] = nextRowValues && (!nextRowValues[attrcode] || !nextRowValues[attrcode]['actived']);\r\n                                        }\r\n                                    }\r\n                                });\r\n\r\n                                // console.log(linkObjMeta, viewData);\r\n                            }\r\n\r\n                            // 更新表格 this.forceUpdate &&\r\n                            this.forceUpdate();\r\n                            // store.refresh();\r\n                        },\r\n                        getPrevSelector: key => {\r\n                            const activedCells = store.getCache('activedCells') || {},\r\n                                prevSelector = {};\r\n                            for (let rowKeyValue in activedCells) {\r\n                                (activedCells[rowKeyValue] || []).forEach(attrcode => {\r\n                                    prevSelector[`${rowKeyValue}@${attrcode}`] = true;\r\n                                });\r\n                            }\r\n                            // console.log(activedCells, prevSelector, 'prevSelector');\r\n                            return prevSelector;\r\n                        },\r\n                        onDeSelect: (deActiveCells, hotkey) => {\r\n                            let prevActiveCells = store.getCache('activedCells') || {};\r\n                            let prevActiveCellsObj = {};\r\n                            let prevActiveCellsArr = {};\r\n                            // 转对象\r\n                            for (let rowKeyValue in prevActiveCells) {\r\n                                prevActiveCellsObj[rowKeyValue] = {};\r\n                                for (let attrcode of prevActiveCells[rowKeyValue]) {\r\n                                    prevActiveCellsObj[rowKeyValue][attrcode] = true;\r\n                                }\r\n                            }\r\n\r\n                            // 清理数据\r\n                            for (let rowKeyValue in deActiveCells) {\r\n                                for (let attrcode of deActiveCells[rowKeyValue]) {\r\n                                    if (prevActiveCellsObj[rowKeyValue][attrcode]) {\r\n                                        delete prevActiveCellsObj[rowKeyValue][attrcode];\r\n                                        // setCellProps(rowKeyValue, attrcode, { showDrag: false }, false);\r\n                                        setCellProps(rowKeyValue, attrcode, {\r\n                                            actived: false,\r\n                                            leftLine: false,\r\n                                            rightLine: false,\r\n                                            topLine: false,\r\n                                            bottomLine: false,\r\n                                        }, false);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // 转数组\r\n                            for (let rowKeyValue in prevActiveCellsObj) {\r\n                                prevActiveCellsArr[rowKeyValue] = [];\r\n                                for (let attrcode in prevActiveCellsObj[rowKeyValue]) {\r\n                                    prevActiveCellsArr[rowKeyValue].push(attrcode);\r\n                                }\r\n                            }\r\n\r\n                            // 重新赋值\r\n                            store.setCache('activedCells', prevActiveCellsArr);\r\n                        },\r\n                        onClearData: (shouldForceUpdate = false, hotkey) => {\r\n                            store.setCache('activedCells', {});\r\n                            store.setCache('activeSpecialCells', []);\r\n                            // 没有选中单元格\r\n                            if (!isBatchSelect) {\r\n                                return;\r\n                            }\r\n                            // let activedCells = store.getCache('activedCells') || {};\r\n                            // let activedCell = store.getCache('activedCell');\r\n                            // 全过滤一下\r\n                            let data = store.getData() || [];\r\n                            data.forEach(row => {\r\n                                let values = row.values || row || {};\r\n                                let rowKeyValue = row.rowId || values.rowId.value;\r\n                                for (let attrcode in values) {\r\n                                    values[attrcode] && values[attrcode].showDrag &&\r\n                                        setCellProps(rowKeyValue, attrcode, { showDrag: false }, false);\r\n                                    values[attrcode] && values[attrcode].actived &&\r\n                                        setCellProps(rowKeyValue, attrcode, {\r\n                                            actived: false,\r\n                                            leftLine: false,\r\n                                            rightLine: false,\r\n                                            topLine: false,\r\n                                            bottomLine: false,\r\n                                        }, false);\r\n                                }\r\n                            });\r\n\r\n                            const columns = store.getArrayMeta(name, false) || [];\r\n                            columns.forEach(item => {\r\n                                item.unitActive && store.setColumn(name, [item.attrcode], { unitActive: false }, false);\r\n                            });\r\n                            // 不更新表格\r\n                            shouldForceUpdate && this.forceUpdate();\r\n                        },\r\n                        disabled: 'drag',\r\n                        arrColumns: getArrayMeta(name, false),\r\n                        data,\r\n                        rowKey,\r\n                        onBatchChange: (activeCell = {}, activeCells = {}) => {\r\n                            // 没有选中单元格\r\n                            if (!isBatchSelect) {\r\n                                return;\r\n                            }\r\n                            // activeCell = {}, activeCells = {}\r\n                            // 开始  批改以下所有\r\n                            activeCell = {\r\n                                ...activeCell,\r\n                                rowIndex: store.getTrueRowIndex({ rowKeyValue: activeCell.rowKeyValue }),\r\n                                attrcode: activeCell.attrcode,\r\n                                column: store.getColumn(name, activeCell.attrcode) || {},\r\n                            };\r\n\r\n                            // 表格数据  是否包含删除的数据 这里要斟酌下\r\n                            // let rows = store.getViewData('filter');\r\n                            let rows = store.getData();\r\n\r\n                            let pasteContent = [];\r\n\r\n                            // 取值 getCellValue({ rowKeyValue, attrcode })\r\n                            let activeCellValue = {};\r\n                            if (rows.length && isFunction(rows.query)) {\r\n                                activeCellValue = rows.query(activeCell.rowKeyValue).values[activeCell.attrcode] || {};\r\n                            }\r\n\r\n                            for (let rowKeyValue in activeCells) {\r\n                                let attrcode = activeCells[rowKeyValue][0];\r\n                                // 做过一次radio和checkkbox转换为select 这里可能会有问题 TODO测试\r\n                                let isDisplay = (activeCell.column.itemtype === 'refer' && activeCell.column.fieldDisplayed === 'refname') || activeCell.column.itemtype === 'select';\r\n                                attrcode && pasteContent.push(isDisplay ? activeCellValue.display : activeCellValue.value);\r\n                            }\r\n\r\n                            console.log('onBatchChange trigger', activeCell, activeCells);\r\n\r\n                            let param = {\r\n                                pasteContent,\r\n                                activeCell,\r\n                                // TODO 没有默认加载多语 需要加载多语之后传入\r\n                                langJson: store.getCache('langJson') || {},\r\n                                rows,\r\n                                getRowOldValue: store.getRowOldValue,\r\n                                name,\r\n                            }\r\n                            let data = excelPackageData(param);\r\n                            config.onBatchChange && config.onBatchChange(data);\r\n                        },\r\n                        isBatchSelect,\r\n                        ...high_selectable,\r\n                        single: false,\r\n                    }}\r\n                    //折行回调\r\n                    foldingRowChange={isEllipsis => {\r\n                        this.setState({ isEllipsis })\r\n                    }}\r\n                    foldCacheId={foldCacheId}\r\n                    //右键菜单配置参数\r\n                    contextMenuConfig={{\r\n                        enable: high_selectable && high_selectable.enable && isBatchSelect,\r\n                        status: \"browse\",\r\n                        contextMenuClick: this.contextMenuClick,\r\n                        showBusinessBtn: false,\r\n                        showPasteBtn: false,\r\n                        langJson: store.getCache('langJson') || {},\r\n                        extendRightMenu: extendRightMenu,\r\n                    }}\r\n                    //滚动条悬浮\r\n                    autoAffixScroll\r\n                    //——————————操作列————————————\r\n                    colsSettingParam={colSettingParam}\r\n                    cancelCustomRightMenu={cancelCustomRightMenu}\r\n                    showWidthAndHeightConfig={showWidthAndHeightConfig}\r\n                    updateColumnHandle={this.updateColumnAfterSetting}\r\n                    key={this.state.key}\r\n                    {...others}\r\n                    //——————————操作列end————————————\r\n                    //空白列\r\n                    addBlankCol={addBlankCol}\r\n                    modalConfig={{ langJson: store.getCache('langJson') }}\r\n                /> : null}\r\n                {isFunction(config.tableCustomerArea) && config.tableCustomerArea()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// SimpleTable.createStroe = createStore;\r\n\r\n// export default SimpleTable\r\n\r\nSimpleTable.displayName = 'SimpleTable';\r\nSimpleTable.useSimpleTable = useSimpleTable;\r\n\r\nexport default SimpleTable;\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;"],"sourceRoot":""}