{"version":3,"sources":["webpack://@platform/[name]/webpack/universalModuleDefinition","webpack://@platform/[name]/webpack/bootstrap","webpack://@platform/[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://@platform/[name]/external \"@platform/api/index\"","webpack://@platform/[name]/./src/platform/components/TransferTable/ellipsisToTooltip.js","webpack://@platform/[name]/./src/platform/components/TransferTable/methods.js","webpack://@platform/[name]/./src/platform/components/TransferTable/CreateTranferTable.js","webpack://@platform/[name]/./src/platform/components/TransferTable/CreateTranferList.js","webpack://@platform/[name]/./src/platform/components/TransferTable/create.js","webpack://@platform/[name]/./src/platform/components/TransferTable/CreateMultiTransferTable.js","webpack://@platform/[name]/./src/platform/components/TransferTable/multi.js","webpack://@platform/[name]/./src/platform/components/TransferTable/index.js","webpack://@platform/[name]/./src/platform/components/TransferTable/util.js","webpack://@platform/[name]/external \"@platform/base/index\"","webpack://@platform/[name]/./node_modules/classnames/index.js","webpack://@platform/[name]/external {\"root\":\"ReactDOM\",\"var\":\"ReactDOM\",\"commonjs\":\"react-dom\",\"commonjs2\":\"react-dom\",\"amd\":\"react-dom\"}","webpack://@platform/[name]/external \"@platform/table-core/index\""],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__8__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EllipsisToTooltip","props","state","visible","selfDom","ReactDOM","findDOMNode","this","wrapperDom","parentNode","parentElement","clientWidth","scrollWidth","noEllipsis","setState","children","other","placement","delay","Component","timeTypes","displayTypes","checkboxSwitchValue","editStatus","json","bool","disabled","checked","iscludeCurrentData","transferTable","headTableId","console","time","selected","outerData","bodyData","childSelData","selectedData","masterCheckedId","isSelectAll","isIndeterminate","length","data","unSelectAll","item","hValues","values","saga_status","rowId","bdc","bd","rows","bdl","ioc","sagaCount","childId","includes","timeEnd","log","getExpandTableHeight","isTotal","wrapper","tableBody","document","expandTableHeight","tableHead","querySelector","tbody","tableRow","querySelectorAll","theadHeight","getBoundingClientRect","height","trowHeight","TotalRowHeight","BodyMinHeight","paddingHeight","scrollBarHeight","b","myBrowser","baseHeight","updateColumnAfterSetting","newColumn","areaCode","_this","meta","finalColumn","items","sortIndexArr","sortObjArr","map","newItem","oldItem","index","attrcode","width","islock","push","sort","a","forEach","getcolsSettingParam","areaCodeMeta","appcode","pageTo","getAppCode","pagecode","getPageCode","code","templateCode","pageid","areaId","oid","updateTransferDataAfterSort","sortData","sortInfoObj","selectedTable","allSelectedTable","allSelected","currentTransferTable","currentTable","parentRowId","selectedShow","showFullTable","fullSortInfoObj","childSortInfoObj","mainSortInfoObj","saveSortStatus","assign","sortTransferSelectedData","newOuterData","newBodyData","fullSortData","attrs","keys","sortChanged","val","status","some","sortTransferData","getScrollTop","scrollTop","documentElement","clientHeight","body","resizeEvent","isIntl","windowResize","transferTableTop","windowHeight","that","setSelectListHeightIsDone","setListHeightIsDone","setModalHeightIsDone","setTimeIndex","setTimeout","doing","transferTableIsInModal","transfertableMainIsModalSChild","setModalTransferTableHeight","modalBodySelector","style","padding","overflow","modalBodyHeight","showTransferTableTimer","transferTableHeight","selectedListHeight","listHeight","getMultiChildChangeWidth","isMultiChild","fixedWidth","sortColumn","sortType","customSortRule","valType","itemtype","isFunction","sorter","front","behind","frontValue","behindValue","Number","Date","getTime","String","display","localeCompare","fvalue","fdisplay","bvalue","bdisplay","isNullOrVoid","sorterClick","columnInfo","type","backSource","sortFun","thounsandTransfer","needType","MTthounsand","slice","LTthounsand","split","join","linkage","headID","selIds","allMasterCheckedId","bodyIDS","flat","arr","ret","dirty","Array","isArray","activeTabData","tableType","masterSelData","activeIndex","bodyIds","sel","bodyList","bodyActiveIndex","selAll","filter","isCheckedOutData","isCheckedBodyData","isAllOutData","isAllBodyData","bodyAmount","masterAmount","updateLastActiveFormData","transferListId","headcode","bodycode","onUpdateLastActiveFormData","transformForm","myState","transferList","list","formStatus","headData","form","getAllFormValue","head","browseData","cardTable","getAllRows","bodys","whenTransferTableUnmount","dataSource","ViewModel","setData","numberDispose","num","str","len","formatAcuracy","formatDot","scale","dotSplit","toString","padEnd","getLongScale","value1","value2","arr1","arr2","len1","len2","le1","le2","ComplexTable","total","lib","NCTable","SortTable","CreateTranferTable","withViewModel","dealDataFromTransferListBack","isWillMount","componentInitFinished","getData","pk","processingData","showSeletedArea","modalBodyNowClient","transfertableMain","current","top","bottom","modalSelector","transfertableNowCurrent","result","father","tagName","onresizeEvents","switchSelectedAndAll","getSelectedAmount","customAggregate","totalKey","getTheLongestPrecision","totalTitle","reduce","now","entries","masterValue","it","childValue","title","marginRight","bodyTableDataIsSelected","rowData","ritem","processingTotalData","column","getScaleData","totalScale","masterTableData","bodyTableData","istotal","totalData","sum","parseFloat","replace","processingTotalDataChild","record","childData","expandedRowRender","bodyColumn","isBodyTotal","createNewData","setSelectedColumns","createNewCol","isDrag","showChildIndex","comType","bodyTableId","cancelCustomRightMenu","socketErrorClass","curKey","headKey","TotalDataChild","colsSettingParam","renderColumnsMultiSelectChild","expandTableBodyHeight","className","fieldid","getSysFieldid","columns","outerRecordKey","columnType","lazyload","totalBodyHeight","totalColumns","createClumus","scroll","x","y","updateColumnHandle","bodyStyle","minHeight","foldingRowChange","isEllipsis","bodyDisplayInRow","haveExpandIcon","isSelected","haveBodyData","haveBodyColumn","onCheckedChange","childSelect","masterSelect","bodyAmountLen","originLength","citem","itemm","onChecked","headIndex","indexOf","JSON","parse","stringify","masterItems","dataKeys","childSelectKeys","masterSelectKeys","citems","childSelectItem","childSelectItemsKeys","mitems","records","indexs","defaultProps","onSelectedItemRemove","onCheckboxChangeChild","multiSelect","indexCol","label","textAlign","bbq","dataIndex","render","text","record2","concat","oprationLabel","parId","pValues","pSaga_status","fixed","onCellClick","e","ck","onChange","oprColumn","onClick","expandedRowRenderSelect","showIndex","indexWidth","isChild","multiLangTotal","paddingRight","dom","isTimeType","changeTime","formatDatetime","langCode","getLangCode","loginLang","languageMeta","languageCode","formatNumber","overlay","classnames","createSelectColumns","expandArrId","events","expandArr","switchViewState","selectedTop","selectedHeight","LangData","selectedTransferTableHeight","selectedListBoxHeight","boundingClientRect","main","selsectMain","bodyDom","React","createRef","transfertableSelectedList","transferTableClient","isTransferTableSetHeight","isSelectedListSetHeight","modalBodyClient","getMultiLang","callback","onresize","containerSelector","containerWidth","infoExchangeController","subscribe","area","indexInfo","id","unsubscribe","singleDelete","classByType","isHeadTotal","isFullTotal","createFullData","customAreaOfSelectedHead","fullColumns","getMasterData","getSelectedFullData","handleClearAllSelected","handleChangeView","showChangeViewBtn","handleGenerateClick","renderColumnsMultiSelect","selectArea","showMasterIndex","showSeletedBtn","showGenerateBtn","transferBtnText","fullTableId","onExpandedRowsChange","autoHeight","fieldId","selectedAmount","showSelectedListCSS","indexWidthC","totalColumn","totalSelectedColumn","transferTableMainHeight","fixedCss","position","left","right","allListCSS","opacity","browserDiff","totalTableScrollYHeight","noTotalTableScrollYheight","selectedTotalTableScrollYHeight","selectedNoTotalTableScrollYHeight","showExpandRender","params","activeTab","ref","undefined","tooltips","expand","rowKey","marginLeft","CreateTranferList","onresizeEvent","selector","offsetTop","getTransferListDom","dataAreaCode","handleTransformListClick","transformListMeta","flag","show","paddingBottom","complete","stopSetScroll","itemVal","finalVal","paddingLeft","format","dateFlag","DongbaToLocalTime","moment","transferListComponent","nextProps","resize","prefixCls","param","defaultColor","uniqueTagCls","NCTabPane","NCTabs","TabPane","CreateMultiTransferTable","tabActiveIndex","onTabClick","ID","transferTableRelation","showAll","multiTransfertableMain","outKey","closeSelectedList","showAllList","viewSelectedList","allHeadId","getAllSelectedData","onSelectedBtnClick","childS","masterS","ite","error","color","relation","headId","outD","itemRows","multiTransfertableHeight","multiTransfertableSelectedList","multiDelete","clearAllSelectedData","cutParams","headPkIds","bodyPkIds","handleTabClick","selectedHeaderRender","onExpandedChange","allFullTableId","isShowBodyAmount","allListCSScls","selectedColumn","selectedFullColumn","selectNestTotalColumns","selectFullTotalColumns","activeKey","animated","tabName","searchArea","transferParams","tab","createTransferTable","hideHtml","getCurrentFieldId","onTransferBtnClick","onChangeViewClick","onClearAll","generateKeys","cacheItem","editableItem","afterEvent","defaultOperateColumnHidden","currentPageId","fullDataRule","transferTableDataSource","firstTime","headTs","ts","required","setMasterId","traversalStatus","splice","traversalColumn","totalStatusOfTransferTable","traversalColumns","isChildCheckAll","parents","isMasterCheckAll","setAllSelectedValue","parent","selectedBodyData","selIdsBodyData","itemBodyData","itemSelIdsData","getAmount","parentsIndex","isOnCheckedChange","master","child","childAll","setAllSelVal","amountData","bodyId","onAllCheckChange","switchMasterChecked","onCheckboxChange","delBodyData","innerData","bdata","bodySelData","getCheckedStatus","recordKey","isFull","ifff","res","onCheckboxChangeFull","nowItem","masterVal","getTableData","od","bValues","clearSelectedFullData","scal","isNaN","commafy","expander","pageId","orderStatus","order","orderNum","field","isSort","getColumnsSortStatus","hyperlinkflag","recordScale","switchValue","isEdit","realScale","domShow","autoFocus","newValue","transferTableEditOldValueIsSaved","transferTableEditOldValue","onBlur","itemValueObj","oldValue","editableJSX","href","stopPropagation","metaAreaPageId","linkTo","datas","itemData","inverse","CurrentFullDataRule","oitem","newData","indexColWidth","headTableType","checkboxDisabled","indeterminate","unshift","checkedStatus","classname","table","bodyTotalStatusOfTransferTable","$thisDom","obj","childVal","nowVal","totalVal","nowValArr","totalValArr","nowValLen","totalValLen","addVal","addValArr","addValLen","zeroO","toFixed","selId","allTranferTableData","selfMasterData","selfChildData","masterData","selfBodys","itemsJson","itemValue","masterItemValue","bodyKeyVal","headTotalStatusOfTransferTable","fullTotalStatusOfTransferTable","operateColumn","selData","expandedPks","createTransferList","onTransferItemClick","onTransferItemSelected","onGrandSonsDataUpdate","transferListCardHeadCode","transferListAreas","listData","first","_pageScope","v","getFormStatus","createMultiTransferTable","allBodyId","hideTabs","bodyColumns","headColumns","paramsLength","clearSelectedData","childSelDataKeys","selHeadId","accAdd","arg1","arg2","r1","r2","Math","pow","max","headkey","currentBodyId","$uniqueTagCls","publish","getTransferTableValue","setTransferTableValue","childCode","childKey","allChildSelData","allMasterSelData","relationship","rowIndex","bodyDataRows","elem","ii","cid","aod","masterId","headPk","bodyPk","transferTableRelationship","insertTransferTableValue","outerTableId","outerRowId","warn","outerDataObj","prevResult","outerRow","newOuterRowId","newOuterRow","bodyRows","bodyRowsObj","bodyRow","newBodyRowId","setChildTransferTableData","getTransferTableSelectedValue","isDeepClone","dataCache","transfers","headArr","bodyArr","transfers1","setTransferListValue","lists","completeArr","grandSons","resetItemWidth","getSelectedListDisplay","getTransformFormDisplay","setTransformFormStatus","isNext","isTriggerSelected","transformIndex","currentData","changeNextTransformForm","returnTransferTableList","getTransformFormStatus","Id","currentIndex","nextNotCompleteIndex","nextActiveIndex","findIndex","every","curData","nextData","nextStatus","listSelector","activeSelector","listTop","nowHeight","scrollTo","changeScroll","getTransformFormAmount","setMultiTransformFormStatus","success","oBodyData","array","curHeadId","changeViewType","getTransferTableSelectedId","getTransferTableAllSelectedId","ids","getTransferTableMultiSelectedId","getTransformFormCompleteStatus","actIndex","setTransferListValueByIndex","setMultiSelectedValue","headIdVal","headVal","bodyIdVal","bid","setSavedTransferTableDataPk","DedataSource","hasCache","deleteCache","setRowDataByIndex","HeadTableAreaId","bodyKey","selectedChildData","allSelectedChildData","selectedMasterData","allSelectedMasterData","savePk","getPkCache","getTransferListValue","updateTransferListValue","updateTransferList","getTransferTableCache","deleteItems","ke","updateTransferTableValue","updateTransferListValueByIndex","newHead","newBody","areacode","rowid","updateTransformFormStatus","updateActiveGrandsonData","grandsonsData","getTheTransferListDataSavedLastTime","setTheCheckRows","pks","allSelectedData","outerDataLength","masterLen","bodyLen","updateHeadRowByKey","cancelRowsChecked","attr","childAmount","refreshTransferTable","getCurrentTransferTableStatus","tableId","setTransferTableSelectedId","updateDataByRefresh","pkname","refreshData","saga_errormesg","myTable","oLen","refreshLen","bLen","RD","pkn","pkv","rd","hasOwn","classNames","classes","arguments","arg","argType","inner","apply","default"],"mappings":"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","file":"transfer-table/index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"react-dom\"), require(\"@platform/table-core/index\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"@platform/api/index\", \"@platform/base/index\", \"react-dom\", \"@platform/table-core/index\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@platform/transfer-table/index\"] = factory(require(\"react\"), require(\"@platform/api/index\"), require(\"@platform/base/index\"), require(\"react-dom\"), require(\"@platform/table-core/index\"));\n\telse\n\t\troot[\"@platform/transfer-table/index\"] = factory(root[\"React\"], root[\"@platform/api/index\"], root[\"@platform/base/index\"], root[\"ReactDOM\"], root[\"@platform/table-core/index\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__6__, __WEBPACK_EXTERNAL_MODULE__8__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../platform/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1896);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Tooltip as NCTooltip } from '@platform/base'\r\nexport default class EllipsisToTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: props.visible || false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps() {\r\n        let selfDom = ReactDOM.findDOMNode(this);\r\n        let wrapperDom = selfDom && (selfDom.parentNode || selfDom.parentElement || selfDom);\r\n        if ((wrapperDom && wrapperDom.clientWidth < wrapperDom.scrollWidth) || this.props.noEllipsis) {\r\n            this.setState({\r\n                visible: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                visible: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { children, ...other } = this.props;\r\n\r\n        return (\r\n            this.state.visible ? (\r\n                <NCTooltip\r\n                    {...other}\r\n                    placement=\"left\"\r\n                    delay={1}\r\n                >\r\n                    {children}\r\n                </NCTooltip>\r\n            ) : children);\r\n    }\r\n}","import React from 'react';\r\nimport { Checkbox } from '@platform/base';\r\nimport { myBrowser, pageTo, formatAcuracy, isNullOrVoid, isFunction, ViewModel } from '@platform/api'\r\nconst timeTypes = ['datepicker', 'NCTZDatePickerStart', 'NCTZDatePickerEnd', 'timepicker', 'datetimepicker', 'rangepicker', 'datePickerNoTimeZone']\r\nconst displayTypes = ['select', 'radio', 'checkbox', 'refer']\r\nfunction flat(arr) {\r\n    let ret = [];\r\n    let dirty = false;\r\n    arr.forEach(item => {\r\n        if (Array.isArray(item)) {\r\n            dirty = true;\r\n            ret.push(...item);\r\n        } else {\r\n            ret.push(item);\r\n        }\r\n    });\r\n    return dirty ? flat(ret) : ret;\r\n}\r\n\r\n// 控制非选中行表格单元格的显示状态的复选框的勾选状态\r\nexport function checkboxSwitchValue(value, editStatus, json) {\r\n    if (editStatus) {\r\n        let bool = !!(value === 'true' || value === 'Y' || value === true);\r\n        return <Checkbox disabled={true} checked={bool} />;\r\n    } else {\r\n        let bool = value === 'true' || value === 'Y' || value === true ? ((json && json['page-transferTable-0020']) || '是') : ((json && json['page-transferTable-0021']) || '否');\r\n        return bool;\r\n    }\r\n}\r\n\r\n//转单页面，在修改查询条件查询的时候，已选数据放在已选页面，不请空，一下逻辑是对比已选数据是否存在于当前数据中，控制表头全选按钮的状态\r\nexport function iscludeCurrentData(transferTable, headTableId) {\r\n    console.time('测试用时');\r\n    let selected = transferTable.selected,\r\n        outerData = transferTable[headTableId].outerData,\r\n        bodyData = transferTable[headTableId].bodyData,\r\n        childSelData = selected.selectedData.childSelData,\r\n        masterCheckedId = selected.masterCheckedId,\r\n        isSelectAll = false, // 是否全选\r\n        isIndeterminate = false; // 是否半选\r\n    if (!outerData || !bodyData || !outerData.length) {\r\n        return { isSelectAll, isIndeterminate };\r\n    }\r\n\r\n    bodyData = bodyData.data; // 子表数据对象\r\n    let unSelectAll = false; // 不是全选\r\n\r\n    // 主子表计数\r\n    for (let item of outerData) {\r\n        let hValues = item.values || item;\r\n        if (hValues.saga_status && hValues.saga_status.value === '1') {\r\n            // eslint-disable-next-line no-continue\r\n            continue;\r\n        }\r\n\r\n        // 子表计数  获取所有子表数据\r\n        let key = item.rowId,\r\n            bdc = childSelData[key] || {},\r\n            bd = bodyData[key] || { rows: [] },\r\n            bdl = bd.rows.length,\r\n            ioc = 0, // 当前主表下子表选中的数目\r\n            sagaCount = 0;\r\n\r\n        for (let i of bd.rows) {\r\n            let values = i.values || i;\r\n            if (values.saga_status && values.saga_status.value === '1') {\r\n                sagaCount++;\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n            if (bdc[i.childId]) {\r\n                // 如果有子表选中就是半选\r\n                isIndeterminate = true;\r\n                // 如果有已选数据  就计数\r\n                // 每个主表下子表的已选数目\r\n                ioc++;\r\n            }\r\n        }\r\n\r\n        // 是否有主表数据选中\r\n        if (masterCheckedId.includes(key)) {\r\n            // 已选的数据长度\r\n            if (bdl === 0) {\r\n                // 如果有条数据没有子表 且选中了\r\n                isIndeterminate = true;\r\n            }\r\n            // 表格中已选子表数据与主表是否匹配\r\n            if (bdl > 0 && ioc !== (bdl - sagaCount)) {\r\n                // 有子表 但是子表没有全部选中 不能全选\r\n                unSelectAll = true;\r\n            }\r\n        } else { // 如果主表没有选中\r\n            if (bdl === 0) {\r\n                // 而且没有子表  不能全选\r\n                unSelectAll = true;\r\n            } else {\r\n                if (ioc !== bdl) {\r\n                    // 有子表 但是子表没有全部选中 不能全选\r\n                    unSelectAll = true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    // 是否全选\r\n    isSelectAll = !unSelectAll;\r\n\r\n    console.timeEnd('测试用时');\r\n\r\n    console.log(isIndeterminate, isSelectAll);\r\n\r\n    return { isSelectAll, isIndeterminate };\r\n}\r\n/**\r\n * 根据表格行数动态计算表格的高度\r\n * @param {*Array} data 渲染转单表格的数据\r\n */\r\nexport function getExpandTableHeight(data, isTotal, wrapper, tableBody = false) {\r\n    wrapper = wrapper || document;\r\n    let expandTableHeight = 0;\r\n    if (data && data.length) {\r\n        let tableHead = wrapper.querySelector('.u-table-thead');\r\n        let tbody = wrapper.querySelector('.u-table-tbody');\r\n        let tableRow = tbody && tbody.querySelectorAll('.u-table-row')[0];\r\n        let theadHeight = tableHead && tableHead.getBoundingClientRect().height;\r\n        let trowHeight = tableRow && tableRow.getBoundingClientRect().height;\r\n        let TotalRowHeight = isTotal ? 30 : 0;//合计行高度  合計行高度改爲了30\r\n        let BodyMinHeight = 30;//UE定的表体最小高度为30\r\n        let paddingHeight = 4 * 2;//上下padding为 2\r\n        let scrollBarHeight = isTotal ? 16 : 8;// 预留滚动条高度\r\n        let b = myBrowser();\r\n        scrollBarHeight = b === 'Firefox' || b === 'IE' ? (isTotal ? 14 * 2 : 14) : scrollBarHeight;\r\n        // console.log(isTotal, scrollBarHeight);\r\n        if (tableRow && theadHeight) {\r\n            let baseHeight = theadHeight + paddingHeight + TotalRowHeight + scrollBarHeight;\r\n            // let baseHeight = theadHeight + TotalRowHeight;\r\n            if (data.length < 11) { //最多展示10行\r\n                if (data.length * trowHeight < BodyMinHeight) {\r\n                    expandTableHeight = BodyMinHeight + baseHeight;\r\n                } else {\r\n                    expandTableHeight = data.length * trowHeight + baseHeight;\r\n                }\r\n            } else {\r\n                expandTableHeight = 10 * trowHeight + baseHeight;\r\n            }\r\n            if (tableBody) {\r\n                return data.length > 9 ? (expandTableHeight - baseHeight) : '';\r\n            }\r\n            return expandTableHeight;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 列设置后更新模板\r\n * @param {*Array} newColumn 列设置后的模板\r\n * @param {*} areaCode 表格的区域id\r\n */\r\nexport function updateColumnAfterSetting(newColumn, areaCode) {\r\n    let _this;\r\n    if (this.state.meta) {\r\n        _this = this;\r\n    } else if (this.props && this.props._this) {\r\n        _this = this.props._this;\r\n    }\r\n    let meta = _this.state.meta;\r\n    if (newColumn.length && areaCode) {\r\n        let finalColumn = [...meta[areaCode].items];\r\n\r\n        let sortIndexArr = [];\r\n        let sortObjArr = [];\r\n        newColumn.map(newItem => {\r\n            meta[areaCode].items.map((oldItem, index) => {\r\n                if (newItem.attrcode === oldItem.attrcode) {\r\n                    oldItem.width = newItem.width;\r\n                    oldItem.islock = newItem.islock;\r\n                    oldItem.visible = newItem.visible;\r\n                    sortIndexArr.push(index);\r\n                    sortObjArr.push(oldItem);\r\n                }\r\n            });\r\n        });\r\n        sortIndexArr.sort((a, b) => a - b);\r\n        sortIndexArr.forEach((item, index) => {\r\n            finalColumn[item] = sortObjArr[index];\r\n        });\r\n        meta[areaCode].items = finalColumn;\r\n        _this.setState({ meta });\r\n    }\r\n}\r\n\r\n/**\r\n* 获取表格底层列设置需要的模板参数\r\n\r\n* @param {*String} areaCode 主表/拉平表 的区域编码\r\n*/\r\nexport function getcolsSettingParam(meta, areaCode) {\r\n    let areaCodeMeta = meta && meta[areaCode] || {};\r\n    return {\r\n        //appcode: pageTo.getAppCode(), //应用编码\r\n        //pagecode: pageTo.getPageCode(), //页面编码\r\n        appcode: areaCodeMeta.appcode || pageTo.getAppCode(),\r\n        pagecode: areaCodeMeta.pagecode || pageTo.getPageCode(), //页面编码\r\n        code: areaCodeMeta.templateCode || meta && meta.code, //模板编码\r\n        pageid: areaCodeMeta.pageid || meta && meta.pageid, //模板主键   \r\n        areaCode, //主表/拉平表 的区域编码\r\n        areaId: areaCodeMeta.oid, //区域主键\r\n    };\r\n}\r\n\r\n/**\r\n * 保存排序状态\r\n */\r\nfunction saveSortStatus(transferTable, headTableId, sortInfoObj, sortData) {\r\n    let currentTransferTable = transferTable[headTableId],\r\n        currentTable = currentTransferTable[headTableId],\r\n        selectedTable = currentTransferTable.selected,\r\n        allSelectedTable = transferTable.allSelected;\r\n\r\n    let parentRowId = sortData[0].parentRowId;\r\n\r\n    currentTransferTable.sortInfoObj = sortInfoObj;\r\n    // 判断表格类型 判断表格状态\r\n    if (selectedTable.selectedShow || allSelectedTable.selectedShow) {\r\n        if (currentTable.showFullTable || allSelectedTable.showFullTable) {\r\n            selectedTable.fullSortInfoObj = sortInfoObj;\r\n        } else if (parentRowId) {\r\n            selectedTable[parentRowId] = {};\r\n            selectedTable[parentRowId].childSortInfoObj = sortInfoObj;\r\n        } else {\r\n            selectedTable.mainSortInfoObj = sortInfoObj;\r\n        }\r\n    } else {\r\n        if (currentTable.showFullTable || allSelectedTable.showFullTable) {\r\n            currentTable.fullSortInfoObj = sortInfoObj;\r\n        } else if (parentRowId) {\r\n            currentTable[parentRowId] = {};\r\n            currentTable[parentRowId].childSortInfoObj = sortInfoObj;\r\n        } else {\r\n            currentTable.mainSortInfoObj = sortInfoObj;\r\n        }\r\n    }\r\n}\r\n\r\n// 排序转单表 主子表数据\r\nfunction sortTransferData(sortData, headTableId, _this, sortInfoObj) {\r\n    let transferTable = Object.assign({}, _this.state.transferTable); // 这里是浅拷贝 所以才可以导致下面可以被静默更新\r\n    let currentTransferTable = transferTable[headTableId][headTableId],\r\n        outerData = currentTransferTable.outerData,\r\n        bodyData = currentTransferTable.bodyData.data,\r\n        showFullTable = currentTransferTable.showFullTable;\r\n\r\n    let newOuterData = [],\r\n        parentRowId = sortData[0].parentRowId,\r\n        newBodyData = {};\r\n\r\n    // 拉平时略微复杂  进行内外两层排序\r\n    if (showFullTable) {\r\n        if (outerData.length) {\r\n            // let outerDataSign = {},\r\n            //     bodyDataSign = {};\r\n            // sortData.map(item => {\r\n            //     // 没有子集\r\n            //     if (!item.parentRowId || item.key === item.headKey) {\r\n            //         // 这个find的方式去找  非常的不合适\r\n            //         !outerDataSign[item.key] && newOuterData.push(outerData.find(v => { return v.rowId === item.key; }));\r\n            //         outerDataSign[item.key] = item.key;\r\n            //         !newBodyData[item.key] && (newBodyData[item.key] = { rows: [] });\r\n            //     } else {\r\n            //         // 这个find的方式去找  非常的不合适\r\n            //         !outerDataSign[item.parentRowId] && newOuterData.push(outerData.find(v => { return v.rowId === item.parentRowId; }));\r\n            //         outerDataSign[item.parentRowId] = item.parentRowId;\r\n            //         !newBodyData[item.parentRowId] && (newBodyData[item.parentRowId] = { rows: [] });\r\n            //         // 这个find的方式去找  非常的不合适\r\n            //         if (!bodyDataSign[item.key]) {\r\n            //             // 先搭好架子\r\n            //             !bodyDataSign[item.key] && newBodyData[item.parentRowId].rows.push(bodyData[item.parentRowId].rows.find(v => { return v.childId === item.key; }));\r\n            //             bodyDataSign[item.key] = item.key;\r\n            //         }\r\n            //     }\r\n            // });\r\n            // currentTransferTable.outerData = newOuterData;\r\n            // currentTransferTable.bodyData.data = newBodyData;\r\n            // console.log(newBodyData, newOuterData);\r\n            currentTransferTable.fullSortData = sortData;\r\n            _this.setState({ transferTable });\r\n        }\r\n        return newOuterData;\r\n    }\r\n    //当主子表排序之后,就初始化拉平表的排序信息\r\n    delete currentTransferTable.fullSortData;\r\n    delete currentTransferTable.fullSortInfoObj;\r\n    //用parentRowId判断点击的是主表的数据还是子表的数据，有parentRowId说明排序子表\r\n    if (parentRowId) { // 主子表  子表排序\r\n        newBodyData = Object.assign({}, bodyData);\r\n        if (bodyData) {\r\n            let attrs = Object.keys(bodyData);\r\n            let sortChanged = false;\r\n            attrs.forEach(key => {\r\n                if (key === parentRowId) {\r\n                    sortChanged = true;\r\n                }\r\n            });\r\n            if (sortChanged) {\r\n                newBodyData[parentRowId].rows = sortData.map(val => {\r\n                    let value = {\r\n                        status: 0,\r\n                        values: val,\r\n                        childId: val.key,\r\n                    };\r\n                    return value;\r\n                });\r\n                currentTransferTable.bodyData.data = newBodyData;\r\n                _this.setState({ transferTable });\r\n            }\r\n        }\r\n    } else {\r\n        if (outerData.length) { // 主子表  主表排序\r\n            let isSort = sortData.some((val, index) => {\r\n                if (outerData[index].values.key !== val.key) {\r\n                    return true;\r\n                }\r\n            });\r\n            if (isSort) {\r\n                newOuterData = sortData.map(val => {\r\n                    let value = {\r\n                        status: '0',\r\n                        values: val,\r\n                        rowId: val.key,\r\n                    };\r\n                    return value;\r\n                });\r\n                currentTransferTable.outerData = newOuterData;\r\n                // 这里不能直接更新 会导致 排序图标状态出错  如果要更新就要参考cardtable 动态设置排序状态\r\n                _this.setState({ transferTable });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// 排序转单已选列表 主子表数据\r\nfunction sortTransferSelectedData(sortData, headTableId, _this, sortInfoObj) {\r\n\r\n    let transferTable = Object.assign({}, _this.state.transferTable); // 这里是浅拷贝 所以才可以导致下面可以被静默更新\r\n    let currentTransferTable = transferTable[headTableId][headTableId],\r\n        outerData = currentTransferTable.outerData,\r\n        bodyData = currentTransferTable.bodyData.data,\r\n        showFullTable = currentTransferTable.showFullTable,\r\n        selectedTable = transferTable[headTableId].selected,\r\n        allSelectedTable = transferTable.allSelected;\r\n\r\n    let newOuterData = [],\r\n        parentRowId = sortData[0].parentRowId,\r\n        newBodyData = {},\r\n        selectedData = [];\r\n    if (selectedTable.selectedShow) {\r\n        selectedData = transferTable[headTableId].selected;\r\n        // console.log('单选列表排序', selectedData, sortData);\r\n    }\r\n    if (allSelectedTable.selectedShow) {\r\n        selectedData = transferTable.allSelected;\r\n        // console.log('全选列表排序', selectedData, sortData);\r\n    }\r\n}\r\n\r\n/**\r\n * 点击排序之后把排序后的数据重新放在state上\r\n * @param {*} sortData 排序之后底层返回的数据\r\n */\r\nexport function updateTransferDataAfterSort(sortData, headTableId, _this, sortInfoObj) {\r\n    let transferTable = _this.state.transferTable,\r\n        currentTransferTable = transferTable[headTableId],\r\n        // currentTable = currentTransferTable[headTableId],\r\n        selectedTable = currentTransferTable.selected,\r\n        allSelectedTable = transferTable.allSelected;\r\n\r\n    if (!sortData || !sortData.length || !sortInfoObj) {\r\n        return false;\r\n    }\r\n\r\n    // 保存排序状态\r\n    saveSortStatus(transferTable, headTableId, sortInfoObj, sortData);\r\n\r\n    // 判断表格类型 判断表格状态\r\n    if (selectedTable.selectedShow || allSelectedTable.selectedShow) {\r\n        // 已选列表\r\n        sortTransferSelectedData(sortData, headTableId, _this, sortInfoObj);\r\n        // console.log(selectedTable, allSelectedTable);\r\n    } else {\r\n        // 主转单表\r\n        sortTransferData(sortData, headTableId, _this, sortInfoObj);\r\n    }\r\n\r\n}\r\n/**\r\n * 获取body的clientHeight值\r\n * 备注：转单内部使用\r\n */\r\nexport function getScrollTop() {\r\n    var scrollTop = 0;\r\n    if (document.documentElement && document.documentElement.scrollTop) {\r\n        scrollTop = document.documentElement.clientHeight;\r\n    } else if (document.body) {\r\n        scrollTop = document.body.clientHeight;\r\n    }\r\n    return scrollTop;\r\n}\r\n\r\n/**\r\n *  设置转单组件自适应宽高\r\n * @param {*Boolean} isIntl 页面是否初始化 （didMount的时候会设置为true）\r\n * @param {*Boolean} windowResize 窗口是否在变化宽高\r\n * @param {*Boolean} selectedShow 已选列表显示状态\r\n * @param {*Number} transferTableTop 转单外层容器距在可视区的top值\r\n * @param {*Number} windowHeight 页面可视区的高度clientHeight\r\n * 备注：转单内部使用\r\n */\r\nexport function resizeEvent(isIntl, windowResize, selectedShow, transferTableTop, windowHeight, that) {\r\n    if (isIntl || windowResize) { // 初始化或者窗口缩小的时候重新计算\r\n        that.setSelectListHeightIsDone = false;\r\n        that.setListHeightIsDone = false;\r\n        that.setModalHeightIsDone = false;\r\n    }\r\n    that.setTimeIndex = setTimeout(() => {\r\n        if (that.doing) that.transferTableIsInModal(); // 判断转单组件是否存在于弹框之内\r\n        if (that.transfertableMainIsModalSChild) { // 如果在弹框中的时候 需要先设置弹框的body高度 再设置转单的高度\r\n            if (!that.setModalHeightIsDone) {\r\n                let modalBodySelector = document.querySelector('.u-modal-body');\r\n                // 先给modal设置高度\r\n                if (modalBodySelector) {\r\n                    modalBodySelector.style.padding = '0 15px';\r\n                    modalBodySelector.style.height = (windowHeight - 70 * 2) + 'px';// 模态框header和足部的高度，以及距离屏幕顶部底部的距离 总共140\r\n                    // 解决ie下  弹窗不计算的问题 by bbqin\r\n                    let dialogDom = modalBodySelector.parentElement && modalBodySelector.parentElement.parentElement; //(u-modal-dialog)\r\n                    dialogDom.style.overflow = 'auto';\r\n                }\r\n                that.setState({ modalBodyHeight: windowHeight - 70 * 2 }, () => {\r\n                    that.setModalHeightIsDone = true;\r\n                    // 因modal中转单会有个过渡间断才能在dom中的位置固定， 所以需要初始化的时候加个延迟\r\n                    if (isIntl) {\r\n                        that.showTransferTableTimer = setTimeout(() => {\r\n                            that.setModalTransferTableHeight();\r\n                        }, 200);\r\n                    } else {\r\n                        that.setModalTransferTableHeight();\r\n                    }\r\n                });\r\n            } else {\r\n                that.setModalTransferTableHeight();\r\n            }\r\n        } else {\r\n            let transferTableHeight = 0;\r\n            // 判断是设置全部列表的高度还是设置已选列表的高度\r\n            if (selectedShow) {\r\n                if (!that.setSelectListHeightIsDone) {\r\n                    transferTableHeight = windowHeight - transferTableTop;\r\n                    that.setState({\r\n                        transferTableHeight,\r\n                        selectedListHeight: transferTableHeight,\r\n                    }, () => {\r\n                        that.setSelectListHeightIsDone = true;\r\n                    });\r\n                }\r\n            } else {\r\n                if (!that.setListHeightIsDone) {\r\n                    transferTableHeight = windowHeight - transferTableTop;\r\n                    that.setState({\r\n                        transferTableHeight,\r\n                        listHeight: transferTableHeight,\r\n                    }, () => {\r\n                        that.setListHeightIsDone = true;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n}\r\n\r\n/**\r\n * 多来源有全部页签共用底部灰条的时候，监听多来源子的window.onresize后灰条计算的宽度\r\n * width:多来源的子的父级容器的宽度 Number\r\n * isMultiChild：转单是否为多来源的子 Boolean\r\n * 备注：转单内部使用\r\n */\r\nexport function getMultiChildChangeWidth(width, isMultiChild) {\r\n    if (isMultiChild && width) {\r\n        this.setState({ fixedWidth: width });\r\n    }\r\n}\r\n\r\n/**\r\n * 点击表头部排序图标排序对列进行排序\r\n * @param {*} val 被排序的每一行的详细数据\r\n * @param {*Object} sortType: \r\n *         { mode:'single', backSource:false ,sortFun:(a)=> {console.log(a)}}\r\n*                   mode：值为multiple'(多列排序) 或'single'(单列排序)\r\n                   backSource：false是前端排序，值为true为后端排序,默认false\r\n                   sortFun：后端排序的回调函数\r\n * @param {*Function} customSortRule 自定义排序规则\r\n* 备注：转单内部使用\r\n */\r\nexport function sortColumn(val, sortType, customSortRule) {\r\n    let attrcode = val.attrcode,\r\n        valType = val.itemtype;\r\n    if (!isFunction(customSortRule)) {\r\n        switch (true) {\r\n            case valType === 'number':\r\n                val.sorter = (front, behind) => {\r\n                    const frontValue = front[attrcode] ? front[attrcode].value || '0' : '0';\r\n                    const behindValue = behind[attrcode] ? behind[attrcode].value || '0' : '0';\r\n                    return Number(frontValue) - Number(behindValue);\r\n                };\r\n                break;\r\n            case timeTypes.includes(valType):\r\n                val.sorter = (front, behind) => {\r\n                    const frontValue = front[attrcode] ? front[attrcode].value || '0' : '0';\r\n                    const behindValue = behind[attrcode] ? behind[attrcode].value || '0' : '0';\r\n                    return Number(new Date(frontValue).getTime()) - Number(new Date(behindValue).getTime());\r\n                };\r\n                break;\r\n            case displayTypes.includes(valType):\r\n                val.sorter = (front, behind) => {\r\n                    const frontValue = String(front[attrcode] ? front[attrcode].display || '' : '');\r\n                    const behindValue = String(behind[attrcode] ? behind[attrcode].display || '' : '');\r\n                    // if (behindValue > frontValue) {\r\n                    //     return -1;\r\n                    // } else if (behindValue < frontValue) {\r\n                    //     return 1;\r\n                    // } else {\r\n                    //     return 0;\r\n                    // }\r\n                    return frontValue.localeCompare(behindValue);\r\n                };\r\n                break;\r\n            case valType === 'label':\r\n                val.sorter = (front, behind) => {\r\n                    const fvalue = front[attrcode] ? front[attrcode].value || '' : '';\r\n                    const fdisplay = front[attrcode] ? front[attrcode].display : '';\r\n                    const bvalue = behind[attrcode] ? behind[attrcode].value || '' : '';\r\n                    const bdisplay = behind[attrcode] ? behind[attrcode].display : '';\r\n                    const frontValue = String(isNullOrVoid(fdisplay) ? fvalue : fdisplay);\r\n                    const behindValue = String(isNullOrVoid(bdisplay) ? bvalue : bdisplay);\r\n                    // if (behindValue > frontValue) {\r\n                    //     return -1;\r\n                    // } else if (behindValue < frontValue) {\r\n                    //     return 1;\r\n                    // } else {\r\n                    //     return 0;\r\n                    // }\r\n                    return frontValue.localeCompare(behindValue);\r\n                };\r\n                break;\r\n            case attrcode !== 'numberindex' && attrcode !== 'opr':\r\n                val.sorter = (front, behind) => {\r\n                    const frontValue = String(front[attrcode] ? front[attrcode].value || '' : '');\r\n                    const behindValue = String(behind[attrcode] ? behind[attrcode].value || '' : '');\r\n                    // if (behindValue > frontValue) {\r\n                    //     return -1;\r\n                    // } else if (behindValue < frontValue) {\r\n                    //     return 1;\r\n                    // } else {\r\n                    //     return 0;\r\n                    // }\r\n                    return frontValue.localeCompare(behindValue);\r\n                };\r\n                break;\r\n        }\r\n    } else {\r\n        customSortRule(val);\r\n    }\r\n    /**\r\n     * columnInfo:排序的列的模板信息\r\n     * type:排序的类型\r\n     */\r\n    val.sorterClick = (columnInfo, type) => { //排序的回调函数\r\n        if (sortType && sortType.backSource === true && isFunction(sortType.sortFun)) { //后端排序\r\n            sortType.sortFun(columnInfo, type);\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * 把字数加千分位逗号或者去逗号\r\n * @param {*Number or String} val 传入需要转化的为带千分号逗号的字符串 或者需要转为数字的为带千分号逗号的字符串\r\n * @param {*Number or String} needType 转出的类型\r\n * 备注：转单内部使用\r\n */\r\nexport function thounsandTransfer(val, needType) {\r\n    let newvalN,\r\n        newvalS;\r\n    if (val && val !== 'NaN' && val !== 'undefined' && val !== 'null') { //传入的值存在\r\n        if ((needType === 'number' || needType === 'string')) {\r\n            if (String(val).length > 4) {\r\n                if (typeof val === 'number' && needType === 'string') { //数字转字符串\r\n                    val = String(val);\r\n                    let MTthounsand = val.slice(0, 3),\r\n                        LTthounsand = val.slice(3, val.length);\r\n                    newvalS = `${MTthounsand},${LTthounsand}`;\r\n                    return newvalS;\r\n                } else if (typeof val === 'string' && needType === 'number') { //字符串转数字\r\n                    newvalN = Number(String(val).split(',').join(''));\r\n                    return newvalN;\r\n                } else {\r\n                    return val;\r\n                }\r\n            } else {\r\n                return val;\r\n            }\r\n        } else { //需要转为的不是数字或者字符串类型\r\n            return null;\r\n        }\r\n    } else { //传入的值不存在\r\n        if (needType === 'number') {\r\n            return 0;\r\n        } else if (needType === 'string') {\r\n            return '';\r\n        } else { //需要转为的不是数字或者字符串类型\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 获取当前页签转单表格所有数据\r\n * @param {*String} id 当前页签转单的主表ID 【创建时候配置的headTableId】\r\n */\r\nexport function getTransferTableValue(id) {\r\n    if (id) {\r\n        return this.state.transferTable[id];\r\n    } else {\r\n        return this.state.transferTable;\r\n    }\r\n}\r\n\r\n/**\r\n * 获取表格所有勾选数据\r\n * @param {*String} dataSource 缓存ID (如果传了dataSource则会先从缓存取获取表格所有勾选数据)\r\n * @param {*Boolean} isDeepClone 是否深克隆\r\n */\r\nexport function getTransferTableSelectedValue(dataSource, isDeepClone = false) {\r\n    let dataCache = null;\r\n    let transferTable = null;\r\n    if (dataSource) {\r\n        dataCache = ViewModel.getData(dataSource);\r\n        transferTable = dataCache ? dataCache.transferTable : null;\r\n    }\r\n    let { allSelected, ...transfers } = this.state.transferTable;\r\n    if (transferTable) {\r\n        transfers = transferTable;\r\n    }\r\n\r\n    if (!transfers) {\r\n        if (!dataSource) {\r\n            return console.error('未传dataSource');\r\n        }\r\n        let { allSelected, ...transfers1 } = ViewModel.getData(dataSource);\r\n        let result = {};\r\n        for (let key of Object.keys(transfers1)) {\r\n            if (!result.hasOwnProperty(key)) {\r\n                result[key] = [];\r\n            }\r\n            let masterSelData = transfers1[key].selected.selectedData.masterSelData;\r\n            let childSelData = transfers1[key].selected.selectedData.childSelData;\r\n            let bodyTableId = transfers1[key][key].bodyTableId;\r\n            if (transfers1[key][key].tableType === 'simple') { // 单表\r\n                for (let id of Object.keys(masterSelData)) {\r\n                    result[key].push(masterSelData[id].data);\r\n                }\r\n            } else { //主子表\r\n                for (let headKey of Object.keys(childSelData)) {\r\n                    let headArr = [],\r\n                        bodyArr = [];\r\n                    if (headArr.length == 0) {\r\n                        headArr.push({ values: masterSelData[headKey].data });\r\n                    }\r\n                    Object.values(childSelData[headKey]).forEach(item => {\r\n                        let val = item.data.values || item.data;\r\n                        bodyArr.push({ values: val });\r\n                    });\r\n                    result[key].push({\r\n                        head: { [key]: { rows: headArr } },\r\n                        body: { [bodyTableId]: { rows: bodyArr } },\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return JSON.parse(JSON.stringify(result));\r\n    } else {\r\n        let result = {};\r\n        for (let key of Object.keys(transfers)) {\r\n            if (key !== 'allSelected') {\r\n                if (!result.hasOwnProperty(key)) {\r\n                    result[key] = [];\r\n                }\r\n                let masterSelData = transfers[key].selected.selectedData.masterSelData;\r\n                let childSelData = transfers[key].selected.selectedData.childSelData;\r\n                let bodyTableId = transfers[key][key].bodyTableId;\r\n                if (transfers[key][key].tableType === 'simple') { // 单表\r\n                    for (let id of Object.keys(masterSelData)) {\r\n                        result[key].push(masterSelData[id].data);\r\n                    }\r\n                } else { //主子表\r\n                    for (let headKey of Object.keys(childSelData)) {\r\n                        let headArr = [],\r\n                            bodyArr = [];\r\n                        if (headArr.length == 0) {\r\n                            headArr.push({ values: masterSelData[headKey].data });\r\n                        }\r\n                        Object.values(childSelData[headKey]).forEach(item => {\r\n                            let val = item.data.values || item.data;\r\n                            bodyArr.push({ values: val });\r\n                        });\r\n                        result[key].push({\r\n                            head: { [key]: { rows: headArr } },\r\n                            body: { [bodyTableId]: { rows: bodyArr } },\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isDeepClone ? JSON.parse(JSON.stringify(result)) : result;\r\n    }\r\n}\r\n\r\n/**\r\n * 设置转单表格数据\r\n * @param {*String} id         转单缓存数据的key\r\n * @param {*String} childCode 子表ID\r\n * @param {*Array} newData    转单原数据 [{},{},...]\r\n * @param {*String/Array} rowId     主表主键字段 如果是全部多来源需要传数组，其他页签主表主键放到数组中\r\n * @param {*String/Array} childId   子表主键字段 如果是全部多来源需要传数组，其他页签子表主键放到数组中\r\n * @param {*Function} callback \r\n */\r\nexport function setTransferTableValue(id, childCode, newData, rowId, childId, callback) {\r\n    // this.state.transferTable[id].selected = {\r\n    //     selectedShow: false,\r\n    //     masterAmount: 0, //主表已选数量\r\n    //     bodyAmount: 0, //子表已选数量\r\n    //     masterCheckedId: [], //存放已选主表id，用于复选框半选\r\n    //     selectedData: {\r\n    //         selAll: false,\r\n    //         masterSelData: {},\r\n    //         childSelData: {}\r\n    //     }\r\n    // };\r\n    this.state.transferTable[id].selected.selectedData.selAll = false;\r\n    if (!this.state.transferTable.hasOwnProperty('allSelected')) {\r\n        // let tabActiveIndex = this.state.transferTable['allSelected'].activeTab\r\n        this.state.transferTable['allSelected'] = {\r\n            activeTab: '0', //当前高亮tab\r\n            selectedShow: false, //显示已选列表\r\n            masterAmount: 0, //主表已选数量\r\n            bodyAmount: 0, //子表已选数量\r\n            masterCheckedId: [], //存放已选主表id，用于复选框半选\r\n            selIds: {}, //存放其他页签的主子表id\r\n            showFullTable: false, //已选列表中是否显示主子拉平\r\n            selectedData: {\r\n                selAll: false,\r\n                masterSelData: {},\r\n                childSelData: {},\r\n            },\r\n        };\r\n    }\r\n    // 取已选数据进行对比操作\r\n    let childSelData = this.state.transferTable[id].selected.selectedData.childSelData || {};\r\n    let masterSelData = this.state.transferTable[id].selected.selectedData.masterSelData || {};\r\n    let allChildSelData = this.state.transferTable.allSelected.selectedData.childSelData || {};\r\n    let allMasterSelData = this.state.transferTable.allSelected.selectedData.masterSelData || {};\r\n\r\n    let outerData = [];\r\n    let bodyData = {};\r\n    let rowKey,\r\n        childKey;\r\n    let relationship = {}; // 记录行数据是表头还是表体或者单表的某条数据， 方便以后通过接口设置勾选数据等操作\r\n    if (typeof rowId === 'string' && typeof childId === 'string') {\r\n        rowKey = rowId;\r\n        childKey = childId;\r\n    }\r\n    //表格类型为单表\r\n    if (this.state.transferTable[id][id].tableType === 'simple') {\r\n        if (newData.rows && newData.rows.length > 0) {\r\n            newData.rows.map((item, index) => {\r\n                item.rowId = item.values[rowKey].value;\r\n                item.values.key = item.rowId;\r\n                item.values.rowIndex = index;\r\n                relationship[item.rowId] = 'simple';\r\n                outerData.push(item);\r\n                // 数据同步到已选  bbqin\r\n                if (masterSelData[item.rowId] && masterSelData[item.rowId]['data']) {\r\n                    item.values.headTs = item.values.ts; // 其实应该使用合并数据的 但是这里判断太麻烦\r\n                    masterSelData[item.rowId]['data'] = JSON.parse(JSON.stringify(item.values || {}));\r\n                }\r\n                if (allMasterSelData[item.rowId] && allMasterSelData[item.rowId]['data']) {\r\n                    item.values.headTs = item.values.ts; // 其实应该使用合并数据的 但是这里判断太麻烦\r\n                    allMasterSelData[item.rowId]['data'] = JSON.parse(JSON.stringify(item.values || {}));\r\n                }\r\n            });\r\n        }\r\n    } else {\r\n        if (newData && newData.length > 0) {\r\n            newData.forEach((item, index) => {\r\n                let val = item.head[id].rows[0];\r\n                //全部多来源主键字段不唯一，需要传入其他页签主键字段\r\n                if (Array.isArray(rowId)) {\r\n                    rowId.map(id => {\r\n                        if (Object.keys(val.values).includes(id)) {\r\n                            rowKey = id;\r\n                        }\r\n                    });\r\n                }\r\n                if (!val.rowId && val.rowId !== 0) {\r\n                    if (!val.values[rowKey]) {\r\n                        console.error('setTransferTableValue方法中，主表Id没找到');\r\n                        return false;\r\n                    }\r\n                    val.rowId = val.values[rowKey].value;\r\n                }\r\n                val.values.key = val.rowId;\r\n                val.values.rowIndex = index;\r\n                relationship[val.rowId] = 'head';\r\n\r\n                outerData.push(val);\r\n\r\n                // 数据同步到已选  bbqin\r\n                if (masterSelData[val.rowId] && masterSelData[val.rowId]['data']) {\r\n                    val.values.headTs = val.values.ts; // 该死的ts  其实应该使用合并数据的 但是这里判断太麻烦\r\n                    masterSelData[val.rowId]['data'] = JSON.parse(JSON.stringify(val.values || {}));\r\n                }\r\n                if (allMasterSelData[val.rowId] && allMasterSelData[val.rowId]['data']) {\r\n                    val.values.headTs = val.values.ts; // 该死的ts 其实应该使用合并数据的 但是这里判断太麻烦\r\n                    allMasterSelData[val.rowId]['data'] = JSON.parse(JSON.stringify(val.values || {}));\r\n                }\r\n\r\n                let bodyDataRows = item.body[childCode].rows.map((elem, ii) => {\r\n                    //全部多来源主键字段不唯一，需要传入其他页签子表主键字段\r\n                    if (Array.isArray(childId)) {\r\n                        childId.map(cid => {\r\n                            if (Object.keys(elem.values).includes(cid)) {\r\n                                childKey = cid;\r\n                            }\r\n                        });\r\n                    }\r\n                    if (!elem.childId && elem.childId !== 0) {\r\n                        if (!elem.values[childKey]) {\r\n                            console.error('setTransferTableValue方法中，子表Id没找到');\r\n                            //return false\r\n                        }\r\n                        elem.childId = elem.values[childKey] && elem.values[childKey].value;\r\n                    }\r\n                    elem.values.key = elem.childId;\r\n                    elem.values.rowIndex = ii;\r\n                    elem.values.parentRowId = val.rowId; //根据索引设置行数据的api要用到\r\n                    relationship[elem.childId] = 'body';\r\n                    // 数据同步到已选  bbqin\r\n                    if (childSelData[val.rowId] && childSelData[val.rowId][elem.childId] && childSelData[val.rowId][elem.childId]['data']) {\r\n                        let od = childSelData[val.rowId][elem.childId]['data'] || {};\r\n                        childSelData[val.rowId][elem.childId]['data'] = JSON.parse(JSON.stringify(od.values ? elem : elem.values));\r\n                    }\r\n                    if (allChildSelData[val.rowId] && allChildSelData[val.rowId][elem.childId] && allChildSelData[val.rowId][elem.childId]['data']) {\r\n                        let aod = allChildSelData[val.rowId][elem.childId]['data'] || {};\r\n                        allChildSelData[val.rowId][elem.childId]['data'] = JSON.parse(JSON.stringify(aod.values ? elem : elem.values));\r\n                    }\r\n                    return elem;\r\n                });\r\n                bodyData[val.rowId] = { rows: bodyDataRows };\r\n            });\r\n        }\r\n\r\n    }\r\n    //保存服务端原始数据，用于afterEvent最后一个参数\r\n    // this.serverOuterData = {\r\n    //     ...this.serverOuterData,\r\n    //     [id]: JSON.parse(JSON.stringify(outerData))\r\n    // };\r\n    // this.serverBodyData = {\r\n    //     ...this.serverBodyData,\r\n    //     [id]: JSON.parse(JSON.stringify(bodyData))\r\n    // };\r\n\r\n    this.state.transferTable[id][id].masterId = rowKey;\r\n    this.state.transferTable[id][id].childId = childId;\r\n    this.state.transferTable[id][id].outerData = outerData;\r\n    this.state.transferTable[id][id].bodyData = { data: bodyData };\r\n    linkage.call(this, id);\r\n    if (this.transferTableDataSource) {\r\n        ViewModel.setData(\r\n            `${this.transferTableDataSource}_ID`,\r\n            {\r\n                headPk: rowId,\r\n                bodyPk: childId,\r\n            });\r\n    }\r\n    this.myState.transferTableRelationship = relationship; // 记录行数据是表头还是表体或者单表的某条数据， 方便以后通过接口设置勾选数据等操作\r\n    this.setState({ transferTable: this.state.transferTable }, () => {\r\n        callback && callback();\r\n    });\r\n}\r\n\r\n/*\r\n\"refreshData\": [{\r\n  \"saga_status\": \"1\",\r\n  \"mny\": \"123\",\r\n  \"cbillid\": \"123124\",\r\n  \"ts\": \"2019-10-28 12:23:23\"\r\n }, {\r\n  \"saga_status\": \"1\",\r\n  \"mny\": \"444\",\r\n  \"cbillid\": \"44444\",\r\n  \"ts\": \"2019-10-28 12:23:23\"\r\n }]\r\n */\r\n\r\n/**34\r\n *  根据wensocket推送值，更新表格数据\r\n * refreshData\r\n */\r\n\r\nexport function updateDataByRefresh(tableId, pkname, refreshData, saga_errormesg) {\r\n    let myTable = this.state.transferTable[tableId][tableId];\r\n    if (typeof tableId == 'string' && myTable && Array.isArray(refreshData)) {\r\n        let outerData = myTable.outerData,\r\n            bodyData = myTable.bodyData,\r\n            oLen = outerData.length,\r\n            refreshLen = refreshData.length,\r\n            bLen = bodyData && bodyData.data && Object.keys(bodyData.data),\r\n            RD = {};\r\n\r\n        if (!oLen || !refreshLen) return;\r\n        // 数据转型\r\n        refreshData.forEach((item, index) => {\r\n            let obj = {};\r\n            for (const key in item) {\r\n                if (item.hasOwnProperty(key)) {\r\n                    const val = item[key];\r\n                    obj[key] = {\r\n                        value: val.value || val,\r\n                        display: val.display || val,\r\n                    };\r\n                }\r\n            }\r\n            RD[item[pkname]] = obj;\r\n        });\r\n        // 外层数据 过滤\r\n        outerData.forEach((item, index) => {\r\n            let values = item.values,\r\n                pkn = values[pkname],\r\n                pkv = pkn && pkn.value,\r\n                rd = RD[pkv];\r\n            if (rd && pkn) {\r\n                // 合并數據\r\n                values = Object.assign(values, rd);\r\n                //有错误信息时，将错误信息数据放表格行\r\n                rd['saga_status'] === '1' && (values.saga_errormesg = saga_errormesg);\r\n            }\r\n        });\r\n        // 内存数据过滤\r\n        if (bLen) {\r\n            bodyData = bodyData.data;\r\n            for (const key in bodyData) {\r\n                if (bodyData.hasOwnProperty(key)) {\r\n                    const element = bodyData[key];\r\n                    element.rows.forEach((item, index) => {\r\n                        let values = item.values,\r\n                            pkn = values[pkname],\r\n                            pkv = pkn && pkn.value,\r\n                            rd = RD[pkv];\r\n                        if (rd && pkn) {\r\n                            // 合并數據\r\n                            values = Object.assign(values, rd);\r\n                            //有错误信息时，将错误信息数据放表格行\r\n                            rd['saga_status'] === '1' && (values.saga_errormesg = saga_errormesg);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        this.setState({ transferTable: this.state.transferTable });\r\n    }\r\n}\r\n\r\n/**\r\n * 更新转单表格数据\r\n * @param {*String} id 转单主表ID\r\n * @param {*String} childCode 子表ID\r\n * @param {*Object} newData 转单原数据\r\n * @param {*String/Array} rowId 主表主键字段 如果是全部多来源需要传数组，其他页签主表主键放到数组中\r\n * @param {*String/Array} childId 子表主键字段 如果是全部多来源需要传数组，其他页签子表主键放到数组中\r\n */\r\nexport function updateTransferTableValue(id, childCode, newData, rowId, childId) {\r\n    let bodyAmount = this.state.transferTable[id].selected.bodyAmount;\r\n    let childSelData = this.state.transferTable[id].selected.selectedData.childSelData;\r\n    let bodyData = this.state.transferTable[id][id].bodyData.data;\r\n    for (let [key, values] of Object.entries(newData)) {\r\n        if (bodyData.hasOwnProperty(key)) {\r\n            let res = bodyData[key].rows.reduce((total, nowItem, index) => {\r\n                total[nowItem.childId] = index;\r\n                return total;\r\n            }, {});\r\n            let arr = Object.keys(res);\r\n            for (let item of Object.keys(values)) {\r\n                if (arr.includes(item)) {\r\n                    let index = res[item];\r\n                    bodyData[key].rows[index].values = { ...bodyData[key].rows[index].values, ...values[item] };\r\n                } else {\r\n                    bodyData[key].rows.push({\r\n                        status: 0,\r\n                        values: { headKey: key, key: item, ...values[item] },\r\n                        childId: item,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (childSelData.hasOwnProperty(key)) {\r\n            for (let item of Object.keys(values)) {\r\n                if (childSelData[key].hasOwnProperty(item)) {\r\n                    childSelData[key][item].data = {\r\n                        status: 0,\r\n                        values: { ...childSelData[key][item].data.values, ...newData[key][item] },\r\n                        childId: item,\r\n                    };\r\n                } else {\r\n                    childSelData[key][item] = {\r\n                        data: {\r\n                            status: 0,\r\n                            values: { headKey: key, key: item, ...newData[key][item] },\r\n                            childId: item,\r\n                        },\r\n                        sel: true,\r\n                    };\r\n                    this.state.transferTable[id].selected.bodyAmount = bodyAmount + 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    this.setState({ transferTable: this.state.transferTable });\r\n}\r\n\r\n/**\r\n * 插入转单表格数据\r\n * [{rowId: \"1001B110000000006RS1\", status: \"0\", values: {}, children: [{ childId: \"1001B110000000006RS1\", status: \"0\", values: {} }] }]\r\n * @param {*String} outerTableId 转单主表ID\r\n * @param {*String} bodyTableId 子表ID\r\n * @param {*Object} newData 转单原数据 []\r\n * @param {*String/Array} outerRowId 主表主键字段 如果是全部多来源需要传数组，其他页签主表主键放到数组中\r\n * @param {*String/Array} childId 子表主键字段 如果是全部多来源需要传数组，其他页签子表主键放到数组中\r\n */\r\nexport function insertTransferTableValue(outerTableId, bodyTableId, newData = [], outerRowId = 'rowId', bodyId = 'childId') {\r\n\r\n    if (Object.prototype.toString.call(newData) !== \"[object Array]\") {\r\n        return console.warn('invalid data, please check');\r\n    }\r\n\r\n    const transferTable = this.state.transferTable;\r\n    let bodyData = this.state.transferTable[outerTableId][outerTableId].bodyData.data;\r\n    // 兼容多来源数据格式\r\n    if (!bodyData) {\r\n        this.state.transferTable[outerTableId][outerTableId].bodyData = { data: {} };\r\n        bodyData = this.state.transferTable[outerTableId][outerTableId].bodyData.data;\r\n    }\r\n\r\n    let outerData = this.state.transferTable[outerTableId][outerTableId].outerData;\r\n    // 取已选数据进行对比操作\r\n    let childSelData = this.state.transferTable[outerTableId].selected.selectedData.childSelData || {};\r\n    let masterSelData = this.state.transferTable[outerTableId].selected.selectedData.masterSelData || {};\r\n    let allChildSelData = this.state.transferTable.allSelected.selectedData.childSelData || {};\r\n    let allMasterSelData = this.state.transferTable.allSelected.selectedData.masterSelData || {};\r\n\r\n    // 主表拉成obj\r\n    const outerDataObj = outerData.reduce((prevResult, current) => {\r\n        const { values, rowId } = current,\r\n            newOuterRowId = rowId || (values[outerRowId] || {}).value;\r\n        prevResult[newOuterRowId] = current;\r\n        return prevResult;\r\n    }, {});\r\n\r\n    console.log(newData, transferTable, bodyData, outerData, outerDataObj);\r\n\r\n    // 插入数据\r\n    newData.forEach(outerRow => {\r\n        let { rowId, values, index, children } = outerRow,\r\n            newOuterRowId = rowId || (values[outerRowId] || {}).value;\r\n        // 父级不存在 放置父级 存在 是否要更新\r\n        if (!outerDataObj[newOuterRowId]) {\r\n            let newOuterRow = JSON.parse(JSON.stringify(outerRow));\r\n            newOuterRow.rowId = newOuterRowId;\r\n            delete newOuterRow.children;\r\n            newOuterRow.values.key = newOuterRowId;\r\n            newOuterRow.values.rowIndex = index || outerData.length;\r\n            newOuterRow.values.headKey = newOuterRowId;\r\n            // newOuterRow.values.headTs = newOuterRow.values.ts;\r\n            outerData.push(newOuterRow);\r\n        }\r\n\r\n        // 放置子集\r\n        if (children && children.length > 0) {\r\n            // 没有就先初始化下\r\n            if (!bodyData[newOuterRowId]) {\r\n                bodyData[newOuterRowId] = {};\r\n                bodyData[newOuterRowId].rows = [];\r\n            }\r\n\r\n            let bodyRows = bodyData[newOuterRowId].rows;\r\n\r\n            // 主表拉成obj\r\n            const bodyRowsObj = bodyRows.reduce((prevResult, current) => {\r\n                const { values, childId } = current,\r\n                    newBodyRowId = childId || (values[bodyId] || {}).value;\r\n                prevResult[newBodyRowId] = current;\r\n                return prevResult;\r\n            }, {});\r\n\r\n            console.log('bodyRowsObjbodyRowsObj', bodyRowsObj);\r\n\r\n            children.forEach(bodyRow => {\r\n                let { childId, values, index } = bodyRow,\r\n                    newBodyRowId = childId || (values[bodyId] || {}).value;\r\n\r\n                // 没有这一项  有这一项  需不需要更新\r\n                if (!bodyRowsObj[newBodyRowId]) {\r\n                    bodyRow.values.key = newBodyRowId;\r\n                    bodyRow.values.rowIndex = index;\r\n                    bodyRow.values.headKey = newOuterRowId;\r\n                    bodyRow.values.parentRowId = newOuterRowId;\r\n                    bodyRow.childId = newBodyRowId;\r\n                    bodyRows.push(bodyRow);\r\n                }\r\n\r\n                // TODO\r\n\r\n            })\r\n        }\r\n    })\r\n    // 先更新主表 子表数据\r\n\r\n    // 再处理已选数据\r\n\r\n    // 先处理单来源\r\n\r\n    // 再处理多来源\r\n\r\n    // 在处理已选状态  合计   统计\r\n\r\n    // 再处理排序\r\n\r\n    // 缓存\r\n\r\n    this.setState({ transferTable: this.state.transferTable });\r\n}\r\n\r\n/**\r\n * 设置展开的子表数据\r\n * @param {*} id 转单主表ID\r\n * @param {*Object} record 主表当前行信息\r\n * @param {*Array/Object} datas 子表数据\r\n * @param {*String} rowId 子表行 主键字段\r\n */\r\nexport function setChildTransferTableData(id, record, datas, rowId) {\r\n    let key = record.key;\r\n    datas.rows.map((val, index) => {\r\n        if (!val.rowId && val.rowId !== 0) {\r\n            if (!val.values[rowId]) {\r\n                console.error('传入数据中没有找到子表Id');\r\n                return false;\r\n            }\r\n            val.rowId = val.values[rowId].value;\r\n        }\r\n        val.values.key = val.rowId;\r\n\r\n    });\r\n\r\n    if (this.state.transferTable[id].selected.selectedData.masterSelData[key]) {\r\n        this.state.transferTable[id].selected.selectedData.childSelData[key] = {};\r\n        datas.rows.map((item, index) => {\r\n            this.state.transferTable[id].selected.selectedData.childSelData[key][item.values.key] = {\r\n                sel: true,\r\n                data: item,\r\n            };\r\n        });\r\n    }\r\n    this.setState({ transferTable: this.state.transferTable });\r\n}\r\n\r\n/**\r\n * 为实现多页签联动需要调用此方法\r\n * @param {*String} headID 主表ID\r\n */\r\nexport function linkage(headID) {\r\n    if (this.state.transferTable.allSelected) {\r\n        let selIds = this.state.transferTable.allSelected.selIds || {};\r\n        let allMasterCheckedId = this.state.transferTable.allSelected.masterCheckedId || [];\r\n        let bodyIDsValues = Object.values(selIds) || [];\r\n        let bodyIDS = flat(bodyIDsValues);\r\n        let activeTabData = this.state.transferTable[headID];\r\n        let selectedData = activeTabData.selected;\r\n        let masterCheckedId = selectedData.masterCheckedId;\r\n        let tableType = activeTabData[headID].tableType;\r\n        let bodyData = activeTabData[headID].bodyData.data;\r\n        let outerData = activeTabData[headID].outerData || [];\r\n        let masterSelData = selectedData.selectedData.masterSelData || {};\r\n        let childSelData = selectedData.selectedData.childSelData || {};\r\n        // ---------从这里开始将总体选中数据中在本页签未选中的时候选中，将本页签中选中全部页签未选中的数据去除 -----\r\n        if (outerData.length) {\r\n            for (let key of Object.keys(selIds)) {\r\n                let activeIndex = null;\r\n                outerData.forEach((item, index) => {\r\n                    if (item.rowId === key) {\r\n                        activeIndex = index;\r\n                    }\r\n                });\r\n                if (activeIndex !== null) {\r\n                    let bodyIds = selIds[key];\r\n\r\n                    if (!masterSelData.hasOwnProperty(key)) {\r\n                        masterSelData[key] = {\r\n                            data: outerData[activeIndex].values,\r\n                            sel: true,\r\n                        };\r\n                    }\r\n                    if (activeTabData[headID].tableType !== 'simple') {\r\n                        let bodyList = bodyData[key].rows; // 当前页签表头的表体数据\r\n                        // 判断当前页签每一个表体数据是否存在于allSelected\r\n                        for (let i of bodyIds) {\r\n                            let bodyActiveIndex = null;\r\n                            bodyList.map((item, index) => {\r\n                                if (item.childId === i) {\r\n                                    bodyActiveIndex = index;\r\n                                }\r\n                            });\r\n                            if (bodyActiveIndex !== null) {\r\n                                let data = bodyList[bodyActiveIndex].values;\r\n                                if (!childSelData[key]) {\r\n                                    childSelData[key] = {\r\n                                        [i]: {\r\n                                            sel: true,\r\n                                            data: {\r\n                                                childId: i,\r\n                                                values: data,\r\n                                            },\r\n                                        },\r\n                                    };\r\n                                }\r\n                                if (childSelData[key] && !childSelData[key][i]) {\r\n                                    childSelData[key][i] = {\r\n                                        sel: true,\r\n                                        data: {\r\n                                            childId: i,\r\n                                            values: data,\r\n                                        },\r\n                                    };\r\n                                }\r\n                            }\r\n                        }\r\n                        // 特殊的主子表 是尚未处理  TODO  by bbqin\r\n                        // if (childSelData[key]&&Object.keys(childSelData[key]).length === bodyList.length) {\r\n                        if (!masterCheckedId.includes(key)) masterCheckedId.push(key);\r\n                        // }\r\n                    } else {\r\n                        if (!masterCheckedId.includes(key)) masterCheckedId.push(key);\r\n                    }\r\n\r\n                }\r\n            }\r\n            // 移除表体多余选中的数据\r\n            if (Object.keys(childSelData).length) {\r\n                for (let key of Object.keys(childSelData)) {\r\n                    for (let item of Object.keys(childSelData[key])) {\r\n                        if (!bodyIDS.includes(item)) {\r\n                            delete childSelData[key][item];\r\n                            this.state.transferTable[headID].selected.selectedData.selAll = false;\r\n                            this.state.transferTable[headID].selected.masterCheckedId = this.state.transferTable[headID].selected.masterCheckedId.filter(item => item !== key);\r\n                            if (!Object.keys(childSelData[key]).length) {\r\n                                delete childSelData[key];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 移除多余表头的数据\r\n            for (let key of Object.keys(masterSelData)) {\r\n                if (!selIds.hasOwnProperty(key) && tableType !== 'simple') {\r\n                    delete masterSelData[key];\r\n                    if (childSelData.hasOwnProperty(key)) {\r\n                        delete childSelData[key];\r\n                    }\r\n                    this.state.transferTable[headID].selected.selectedData.selAll = false;\r\n                    this.state.transferTable[headID].selected.masterCheckedId = this.state.transferTable[headID].selected.masterCheckedId.filter(item => item !== key);\r\n                } else if (!allMasterCheckedId.includes(key) && tableType === 'simple') {\r\n                    delete masterSelData[key];\r\n                    this.state.transferTable[headID].selected.selectedData.selAll = false;\r\n                    this.state.transferTable[headID].selected.masterCheckedId = this.state.transferTable[headID].selected.masterCheckedId.filter(item => item !== key);\r\n                }\r\n            }\r\n\r\n            let { isCheckedOutData, isCheckedBodyData, isAllOutData, isAllBodyData } = iscludeCurrentData(this.state.transferTable[headID], headID);\r\n            // 这里的判断有问题\r\n            if (isCheckedOutData && isCheckedBodyData && isAllOutData && isAllBodyData) {\r\n                selectedData.selectedData.selAll = true;\r\n            }\r\n\r\n            selectedData.bodyAmount = 0;\r\n            for (let item of Object.values(selectedData.selectedData.childSelData)) {\r\n                // 有个数据没有子数据  但是应该也算一行数据\r\n                selectedData.bodyAmount += (Object.keys(item).length || 1);\r\n            }\r\n            selectedData.masterAmount = Object.keys(selectedData.selectedData.masterSelData).length;\r\n            // ---------从这里结束将总体选中数据中在本页签未选中的时候选中 -----\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 切换视图\r\n * 备注：转单内部使用\r\n */\r\nexport function changeViewType() {\r\n    let { transferTable } = this.state;\r\n    for (let key of Object.keys(transferTable)) {\r\n        if (key !== 'allSelected') {\r\n            transferTable[key][key].showFullTable = !transferTable[key][key].showFullTable;\r\n        } else {\r\n            transferTable[key].showFullTable = !transferTable[key].showFullTable;\r\n        }\r\n    }\r\n    this.setState({ transferTable: this.state.transferTable });\r\n}\r\n\r\n/**\r\n * 获取状态\r\n * @param {状态名称} name \r\n * @param {表格id} tableId \r\n */\r\nexport function getCurrentTransferTableStatus(name, tableId, dataSource) {\r\n    let { transferTable } = this.state;\r\n    if (dataSource) {\r\n        let data = this.ViewModel.getData(dataSource);\r\n        transferTable = data && data.transferTable ? data.transferTable : transferTable;\r\n    }\r\n    if (name === 'activeTab') {\r\n        return transferTable.allSelected.activeTab;\r\n    }\r\n    if (name === 'showFullTable') {\r\n        return tableId && transferTable[tableId] && transferTable[tableId][tableId].showFullTable;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * 下游卡片切换的时候需要专门处理滚动条，当选中的卡片不在当前视口（被隐藏了），则需要将当前卡片显示出来 \r\n * 备注：转单内部使用\r\n */\r\nfunction changeScroll() {\r\n    let windowHeight = document.clientHeight || document.body.clientHeight;\r\n    let listSelector = document.querySelector('.transfer-list-main-wrapper');\r\n    let activeSelector = document.querySelector('.active-transfer-list-item');\r\n    if (listSelector && activeSelector) {\r\n        let listTop = listSelector.getBoundingClientRect().top;\r\n        let top = activeSelector.getBoundingClientRect().top;\r\n        let offsetTop = activeSelector.offsetTop;\r\n        let bottom = activeSelector.getBoundingClientRect().bottom;\r\n        let height = bottom - top;\r\n        if ((offsetTop + height) > (windowHeight - listTop - 48)) {\r\n            let nowHeight = listSelector.scrollTop;\r\n            if (typeof listSelector.scrollTo === 'function') {\r\n                listSelector.scrollTo(0, bottom - windowHeight + nowHeight + 60);\r\n            }\r\n\r\n        } else {\r\n            if (typeof listSelector.scrollTo === 'function') {\r\n                listSelector.scrollTo(0, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 获取已选列表显示状态\r\n * @param {*String} id 上游转单主表ID\r\n */\r\nexport function getSelectedListDisplay(id) {\r\n    if (id === 'all') { //全部多来源已选列表\r\n        return this.state.transferTable.allSelected && this.state.transferTable.allSelected.selectedShow;\r\n    } else if (this.state.transferTable[id] && this.state.transferTable[id].selected) {\r\n        return this.state.transferTable[id].selected.selectedShow;\r\n    }\r\n}\r\n\r\n/**\r\n * 有全部页签的多来源设置已选列表的数据\r\n * @param {*String} headId 主表模板id\r\n * @param {*} bodyId 子表模板id\r\n * @param {*Array/Object} data 后台返回渲染转单表格的数据\r\n * @param {*String} rowId 主表主键\r\n * @param {*String} childId 子表主键\r\n */\r\nexport function setMultiSelectedValue(headId, bodyId, data, rowId, childId) {\r\n    let { masterSelData, childSelData } = this.state.transferTable.allSelected.selectedData;\r\n    data.map(item => {\r\n        let headVal = item.head[headId].rows[0].values;\r\n        let headIdVal;\r\n        if (Array.isArray(rowId)) {\r\n            rowId.map(id => {\r\n                if (headVal.hasOwnProperty(id)) {\r\n                    headIdVal = headVal[id].value;\r\n                    headVal.key = headIdVal;\r\n                }\r\n            });\r\n        }\r\n        masterSelData[headIdVal] = {\r\n            data: JSON.parse(JSON.stringify(headVal)),\r\n            sel: true,\r\n        };\r\n        item.body[bodyId].rows.map(bodys => {\r\n            let bodyIdVal;\r\n            if (Array.isArray(childId)) {\r\n                childId.map(bid => {\r\n                    if (bodys.values.hasOwnProperty(bid)) {\r\n                        bodyIdVal = bodys.values[bid] && bodys.values[bid].value;\r\n                        bodys.childId = bodyIdVal;\r\n                        bodys.values.key = bodyIdVal;\r\n                    }\r\n                });\r\n            }\r\n            if (!childSelData.hasOwnProperty([headIdVal])) {\r\n                childSelData[headIdVal] = {\r\n                    [bodyIdVal]: {\r\n                        data: JSON.parse(JSON.stringify(bodys)),\r\n                        sel: true,\r\n                    },\r\n                };\r\n            } else {\r\n                childSelData[headIdVal][bodyIdVal] = {\r\n                    data: JSON.parse(JSON.stringify(bodys)),\r\n                    sel: true,\r\n                };\r\n            }\r\n        });\r\n    });\r\n    this.setState({ transferTable: this.state.transferTable });\r\n}\r\n\r\n/**\r\n * 业务组判断上游转单数据缓存是否存在\r\n * @param {*String} dataSource 转单缓存数据的id\r\n */\r\nexport function hasCache(dataSource) {\r\n    let bool = false;\r\n    let data = ViewModel.getData(dataSource);\r\n    if (data) {\r\n        if (data.transferTable) {\r\n            bool = !!Object.keys(data.transferTable).length;\r\n        }\r\n\r\n    }\r\n    return bool;\r\n}\r\n\r\n/**\r\n * 根据行索引设置行数据\r\n * 根据record.parentRowId来判断更新head还是body。\r\n * @param {*String} HeadTableAreaId 转单主表ID\r\n * @param {*Object} record 描述要设置的表格行的一个对象\r\n * @param {*Number} rowIndex 定位表格行的位置的索引\r\n */\r\nexport function setRowDataByIndex(HeadTableAreaId, record, rowIndex) {\r\n    let transferTable = this.state.transferTable;\r\n    if (HeadTableAreaId && rowIndex != null && record) {\r\n        if (record.parentRowId) {\r\n            let bodyKey = record.key;\r\n            let headKey = record.parentRowId;\r\n            transferTable[HeadTableAreaId][HeadTableAreaId].bodyData.data[record.parentRowId].rows[rowIndex].values = record;\r\n            let selectedChildData = transferTable[HeadTableAreaId].selected.selectedData.childSelData;\r\n            let allSelectedChildData = transferTable.allSelected.selectedData.childSelData;\r\n            if (allSelectedChildData[headKey] && allSelectedChildData[headKey][bodyKey] && allSelectedChildData[headKey][bodyKey].data && allSelectedChildData[headKey][bodyKey].data.values) {\r\n                allSelectedChildData[headKey][bodyKey].data.values = record;\r\n            } else {\r\n                if (allSelectedChildData[headKey] && allSelectedChildData[headKey][bodyKey]) allSelectedChildData[headKey][bodyKey].data = record;\r\n            }\r\n            if (selectedChildData[headKey] && selectedChildData[headKey][bodyKey] && selectedChildData[headKey][bodyKey].data && selectedChildData[headKey][bodyKey].data.values) {\r\n                selectedChildData[headKey][bodyKey].data.values = record;\r\n            } else {\r\n                if (selectedChildData[headKey] && selectedChildData[headKey][bodyKey]) selectedChildData[headKey][bodyKey].data = record;\r\n            }\r\n        } else {\r\n            let headKey = record.headKey || record.key;\r\n            transferTable[HeadTableAreaId][HeadTableAreaId].outerData[rowIndex].values = record;\r\n            let selectedMasterData = transferTable[HeadTableAreaId].selected.selectedData.masterSelData;\r\n            let allSelectedMasterData = transferTable.allSelected.selectedData.masterSelData;\r\n            if (selectedMasterData[headKey] && selectedMasterData[headKey].data.values) {\r\n                selectedMasterData[headKey].data.values = record;\r\n            } else {\r\n                if (selectedMasterData[headKey]) selectedMasterData[headKey].data = record;\r\n            }\r\n            if (allSelectedMasterData[headKey] && allSelectedMasterData[headKey].data.values) {\r\n                allSelectedMasterData[headKey].data.values = record;\r\n            } else {\r\n                if (allSelectedMasterData[headKey]) allSelectedMasterData[headKey].data = record;\r\n            }\r\n        }\r\n        this.setState({ transferTable });\r\n    } else {\r\n        console.error('setRowDataByIndex方法缺失参数');\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * 根据pk设置选中的行\r\n * @param {*String} headTableId  转单主表ID\r\n * @param {*Array} pks  子表主键集合\r\n */\r\nexport function setTheCheckRows(headTableId, pks) {\r\n    let transferTable = this.state.transferTable,\r\n        allSelectedData = transferTable.allSelected,\r\n        selectedData = transferTable[headTableId].selected,\r\n        data = transferTable[headTableId][headTableId],\r\n        outerData = data.outerData,\r\n        bodyData = data.bodyData.data,\r\n        tableType = data.tableType,\r\n        outerDataLength = outerData.length,\r\n        allSelectedChildData = allSelectedData.selectedData.childSelData,\r\n        selectedChildData = selectedData.selectedData.childSelData,\r\n        selectedMasterData = selectedData.selectedData.masterSelData,\r\n        allSelectedMasterData = allSelectedData.selectedData.masterSelData;\r\n\r\n    if (tableType === 'nest' || tableType === 'full') {\r\n        let masterLen = 0;\r\n\r\n        for (let [key, value] of Object.entries(bodyData)) {\r\n            let length = value.rows.length;\r\n            let bodyLen = 0;\r\n            for (let item of value.rows) {\r\n                if (pks.includes(item.childId)) {\r\n                    if (!selectedChildData[key]) selectedChildData[key] = {};\r\n                    if (!allSelectedChildData[key]) allSelectedChildData[key] = {};\r\n                    if (!allSelectedData.selIds[key]) allSelectedData.selIds[key] = [];\r\n                    if (!allSelectedData.selIds[key].includes(item.childId)) allSelectedData.selIds[key].push(item.childId);\r\n                    let masterData = outerData.filter(item => item.rowId === key)[0];\r\n                    selectedChildData[key][item.childId] = {\r\n                        data: {\r\n                            childId: item.childId,\r\n                            values: item.values,\r\n                        },\r\n                        sel: true,\r\n                    };\r\n                    allSelectedChildData[key][item.childId] = {\r\n                        data: {\r\n                            childId: item.childId,\r\n                            values: item.values,\r\n                        },\r\n                        sel: true,\r\n                    };\r\n                    selectedData.bodyAmount += 1;\r\n                    allSelectedData.bodyAmount += 1;\r\n                    bodyLen += 1;\r\n                    if (!selectedMasterData[key]) {\r\n                        selectedData.masterAmount += 1;\r\n                        masterLen += 1;\r\n                        selectedMasterData[key] = {\r\n                            sel: true,\r\n                            data: { ...masterData.values },\r\n                        };\r\n                    }\r\n                    if (!allSelectedMasterData[key]) {\r\n                        allSelectedData.masterAmount += 1;\r\n                        allSelectedMasterData[key] = {\r\n                            sel: true,\r\n                            data: { values: masterData.values },\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            if (length === bodyLen && !selectedData.masterCheckedId.includes(key)) selectedData.masterCheckedId.push(key);\r\n            if (length === bodyLen && !allSelectedData.masterCheckedId.includes(key)) allSelectedData.masterCheckedId.push(key);\r\n        }\r\n        if (outerDataLength === masterLen) {\r\n            selectedData.selectedData.selAll = true;\r\n        }\r\n    } else {\r\n        let masterLen = 0;\r\n        for (let item of outerData) {\r\n            let key = item.rowId;\r\n            if (pks.includes(key)) {\r\n                if (!selectedChildData[key]) selectedChildData[key] = {};\r\n                if (!allSelectedChildData[key]) selectedChildData[key] = {};\r\n                if (!allSelectedData.selIds[key]) allSelectedData.selIds[key] = [];\r\n                if (!selectedMasterData[key]) {\r\n                    selectedData.masterAmount += 1;\r\n                    masterLen += 1;\r\n                    selectedMasterData[key] = {\r\n                        sel: true,\r\n                        data: { ...item.values },\r\n                    };\r\n                }\r\n                if (!allSelectedMasterData[key]) {\r\n                    allSelectedData.masterAmount += 1;\r\n                    allSelectedMasterData[key] = {\r\n                        sel: true,\r\n                        data: { values: item.values },\r\n                    };\r\n                }\r\n                if (!selectedData.masterCheckedId.includes(key)) selectedData.masterCheckedId.push(key);\r\n                if (!allSelectedData.masterCheckedId.includes(key)) allSelectedData.masterCheckedId.push(key);\r\n            }\r\n        }\r\n        if (masterLen === outerDataLength.length) selectedData.selectedData.selAll = true;\r\n    }\r\n    let selAll = outerData.every(val => allSelectedData.masterCheckedId.includes(val.rowId));\r\n    allSelectedData.selectedData.selAll = selAll;\r\n    this.setState({ transferTable });\r\n}\r\n\r\n/*根据pk取消选中行的选中状态\r\n * @param {*String} headTableId 创建转单配置的headTableId，转单主表ID\r\n * @param {*Array} pks 传入要取消选中的主表ID\r\n */\r\nexport function cancelRowsChecked(headTableId, pks) {\r\n    let transferTable = this.state.transferTable,\r\n        allSelectedData = transferTable.allSelected,\r\n        selectedData = transferTable[headTableId].selected,\r\n        allSelectedChildData = allSelectedData.selectedData.childSelData,\r\n        allSelectedMasterData = allSelectedData.selectedData.masterSelData,\r\n        selectedChildData = selectedData.selectedData.childSelData,\r\n        selectedMasterData = selectedData.selectedData.masterSelData;\r\n    if (pks.length) {\r\n        // selAll 是存在  selectData中的\r\n        selectedData.selectedData.selAll = false;\r\n        allSelectedData.selectedData.selAll = false;\r\n        selectedData.masterAmount = selectedData.masterAmount - pks.length;\r\n        selectedData.masterCheckedId = selectedData.masterCheckedId.filter(id => !pks.includes(id));\r\n        allSelectedData.masterCheckedId = selectedData.masterCheckedId.filter(id => !pks.includes(id));\r\n        allSelectedData.masterAmount = allSelectedData.masterAmount - pks.length;\r\n        for (let attr in selectedChildData) { //删除selected里存的已选子表的数据\r\n            if (pks.includes(attr)) {\r\n                let childAmount = Object.keys(selectedChildData[attr]).length;//被取消选中的某条主表对应的子表数量\r\n                selectedData.bodyAmount = selectedData.bodyAmount - childAmount;\r\n                allSelectedData.bodyAmount = allSelectedData.bodyAmount - childAmount;\r\n                for (let key in allSelectedData.selIds) {\r\n                    console.log(allSelectedData.selIds);\r\n                    if (pks.includes(key)) {\r\n                        if (allSelectedData.selIds) delete allSelectedData.selIds[key];\r\n                    }\r\n                }\r\n                if (allSelectedChildData[attr]) delete allSelectedChildData[attr];\r\n                delete selectedChildData[attr];\r\n            }\r\n        }\r\n        for (let attr in selectedMasterData) { //删除selected里存的已选主表的数据\r\n            if (pks.includes(attr)) {\r\n                if (allSelectedMasterData[attr]) delete allSelectedMasterData[attr];\r\n                delete selectedMasterData[attr];\r\n            }\r\n        }\r\n    }\r\n    this.setState({ transferTable });\r\n}\r\n\r\n/*\r\n * 根据headKey或者parentRowId设置表头数据\r\n *\r\n * @param HeadTableAreaId： String 转单主表ID\r\n * @param record：Object 新的表头行数据\r\n * @param headKey/parentRowId：String 需要更新的表头行唯一标识\r\n * */\r\nexport function updateHeadRowByKey(HeadTableAreaId, record, headKey) {\r\n    let transferTable = this.state.transferTable;\r\n    if (HeadTableAreaId && headKey != null && record) {\r\n        let outerData = transferTable[HeadTableAreaId][HeadTableAreaId].outerData;\r\n        let masterSelData = this.state.transferTable[HeadTableAreaId]['selected']['selectedData']['masterSelData'];\r\n        let allSelected = transferTable['allSelected'];\r\n        this.state.transferTable[HeadTableAreaId][HeadTableAreaId].outerData = outerData.map(item => {\r\n            if (item.rowId === headKey) {\r\n                item.values = { ...item.values, ...record };\r\n                return item;\r\n            } else {\r\n                return item;\r\n            }\r\n        });\r\n        if (masterSelData[headKey]) {\r\n            this.state.transferTable[HeadTableAreaId]['selected']['selectedData']['masterSelData'][headKey].data = {\r\n                ...masterSelData[headKey].data,\r\n                ...record,\r\n            };\r\n        }\r\n        if (allSelected) {\r\n            let masterSelData = allSelected['selectedData']['masterSelData'];\r\n            if (masterSelData[headKey]) {\r\n                this.state.transferTable['allSelected']['selectedData']['masterSelData'][headKey].data = {\r\n                    ...masterSelData[headKey].data,\r\n                    ...record,\r\n                };\r\n            }\r\n        }\r\n        this.setState({ transferTable: this.state.transferTable });\r\n    } else {\r\n        console.error('setRowDataByIndex方法缺失参数');\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * 获取转单缓存数据\r\n * @param dataSource\r\n * */\r\nexport function getTransferTableCache(dataSource) {\r\n    let data = ViewModel.getData(dataSource);\r\n\r\n    return data ? data.transferTable : null;\r\n}\r\n\r\n/*\r\n * 根据pk删除单据数据\r\n * @param pk：String 下游单据保存后存在缓存中的pk值\r\n * */\r\nexport function deleteItems(pk) {\r\n    let transferTable = this.state.transferTable;\r\n    if (Array.isArray(pk)) {\r\n        for (let values of Object.keys(transferTable)) {\r\n            if (values !== 'allSelected') {\r\n                for (let key of Object.keys(transferTable[values])) {\r\n                    if (key !== 'selected' && key !== 'transformForm') {\r\n                        let value = transferTable[values][key];\r\n                        // value 可能未sortObj 会导致问题\r\n                        let bodyData = value.bodyData && Object.keys(value.bodyData).length ? value.bodyData.data : null;\r\n                        let outerData = value.outerData && value.outerData.length ? value.outerData : null;\r\n                        if (outerData) {\r\n                            transferTable[values][key].outerData = outerData.filter(item => {\r\n                                return !pk.includes(item.rowId);\r\n                            });\r\n                        }\r\n                        if (bodyData) {\r\n                            for (let i of pk) {\r\n                                if (bodyData.hasOwnProperty(i)) {\r\n                                    delete bodyData[i];\r\n                                } else {\r\n                                    for (let ke of Object.keys(bodyData)) {\r\n\r\n                                        bodyData[ke].rows = bodyData[ke].rows.filter(item => {\r\n                                            return i !== item.childId;\r\n                                        });\r\n                                        if (!bodyData[ke].rows.length) {\r\n                                            delete bodyData[ke];\r\n                                            transferTable[values][key].outerData = outerData.filter(item => {\r\n                                                return item.rowId !== ke;\r\n                                            });\r\n                                            // delete bodyData[ke].rows\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (key === 'selected') {\r\n                        let value = transferTable[values][key];\r\n                        let masterCheckedId = value.masterCheckedId;\r\n                        let selectedData = value.selectedData;\r\n                        let childSelData = selectedData.childSelData;\r\n                        let masterSelData = selectedData.masterSelData;\r\n                        // let bodyAmount = selectedData.bodyAmount;\r\n                        // let masterAmount = selectedData.masterAmount;\r\n                        masterCheckedId = masterCheckedId.filter(item => {\r\n                            return !pk.includes(item);\r\n                        });\r\n                        for (let ke of Object.keys(masterSelData)) {\r\n                            if (pk.includes(ke)) {\r\n                                // selectedData.masterAmount -= 1\r\n                                delete masterSelData[ke];\r\n                            }\r\n                        }\r\n                        for (let ke of Object.keys(childSelData)) {\r\n                            if (pk.includes(ke)) {\r\n                                delete childSelData[ke];\r\n                            } else {\r\n                                for (let item of Object.keys(childSelData[ke])) {\r\n                                    if (pk.includes(item)) {\r\n                                        // selectedData.bodyAmount -= 1\r\n                                        delete childSelData[ke][item];\r\n                                        if (!Object.keys(childSelData[ke]).length) {\r\n                                            delete childSelData[ke];\r\n                                            if (masterSelData[ke]) {\r\n                                                delete masterSelData[ke];\r\n                                            }\r\n                                            transferTable[values][key].masterCheckedId = masterCheckedId.filter(item => {\r\n                                                return item !== ke;\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        transferTable[values][key].masterAmount = masterCheckedId.length;\r\n                        let a = 0;\r\n                        for (let item of masterCheckedId) {\r\n                            if (childSelData) {\r\n                                if (childSelData[item]) {\r\n                                    a += Object.keys(childSelData[item]).length;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        transferTable[values][key].bodyAmount = a;\r\n                    }\r\n                }\r\n            } else {\r\n                let selIds = transferTable[values].selIds;\r\n                let bodyAmount = transferTable[values].bodyAmount;\r\n                let masterAmount = transferTable[values].masterAmount;\r\n                for (let value of Object.keys(selIds)) {\r\n                    let len = selIds[value].length;\r\n                    selIds[value] = selIds[value].filter(item => {\r\n                        return !pk.includes(item);\r\n                    });\r\n                    if (!selIds[value].length) {\r\n                        delete selIds[value];\r\n                        bodyAmount -= len;\r\n                        masterAmount -= 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    this.setState({ transferTable });\r\n}\r\n//----------------------------------转单左侧列表相关API---------------------------//\r\n\r\n/*\r\n*   设置下游单据卡片数据\r\n*   @id: String 下游单据卡片ID\r\n*   @ data： Array/Object 转单卡片列表数据\r\n* */\r\nexport function setTransferListValue(id, data, callback) {\r\n    let transformForm = this.myState.transferList[id].transformForm;\r\n    let transferListComponent = this.myState.transferListComponent;\r\n\r\n    let lists = [],\r\n        completeArr = [];\r\n    transformForm.listData.data = data && data;\r\n    if (data.length) transformForm.show = true;\r\n    data && data.map(item => {\r\n        lists.push({\r\n            complete: false, //是否已处理\r\n            data: item,\r\n            browseData: {\r\n                head: {},\r\n                body: {},\r\n                grandSons: {},\r\n            },\r\n        });\r\n        completeArr.push(false);\r\n    });\r\n\r\n    transformForm.list = lists;\r\n    transformForm.completeArr = completeArr;\r\n    transformForm.activeIndex = 0;\r\n\r\n    transferListComponent && transferListComponent.setState({ transformForm }, () => {\r\n        let status = !transformForm.list[0].complete ? 'add' : transformForm.list[0].formStatus;\r\n        this.onTransferItemSelected &&\r\n            this.onTransferItemSelected(transformForm.list[0].data, transformForm.list[0].complete, transformForm.activeIndex, status);\r\n        if (this.transferListCardHeadCode) {\r\n            this.form.resetItemWidth(this.transferListCardHeadCode);\r\n        }\r\n    });\r\n}\r\n\r\n/*\r\n*   获取下游单据卡片数据\r\n*   @id: String 下游单据卡片ID\r\n* */\r\nexport function getTransferListValue(id) {\r\n    return this.myState.transferList[id];\r\n}\r\n\r\n/*\r\n*   更新下游单据卡片数据\r\n*   @id: String 下游单据卡片ID\r\n*   @ data： Array/Object 要更新的转单卡片列表数据\r\n* */\r\nexport function updateTransferListValue(id, data) {\r\n    let transformForm = data.transformForm;\r\n    let transferListComponent = this.myState.transferListComponent;\r\n    this.myState.transferList[id] = data;\r\n    transferListComponent && transferListComponent.setState({ transferList: this.myState.transferList }, () => {\r\n        let status = !transformForm.list[0].complete ? 'add' : transformForm.list[0].formStatus;\r\n        this.onTransferItemSelected &&\r\n            this.onTransferItemSelected(transformForm.list[0].data, transformForm.list[0].complete, transformForm.activeIndex, status);\r\n        if (this.transferListCardHeadCode) {\r\n            this.form.resetItemWidth(this.transferListCardHeadCode);\r\n        }\r\n    });\r\n}\r\n\r\n/*\r\n*   获取转单卡片显示状态 （当卡片数量只有一个的时候隐藏，当卡片数量大于等于二的时候显示）\r\n*   @id: String 下游单据卡片ID\r\n* */\r\nexport function getTransformFormDisplay(id) {\r\n    if (this.myState.transferList[id] && this.myState.transferList[id].transformForm) {\r\n        return this.myState.transferList[id] && this.myState.transferList[id].transformForm && this.myState.transferList[id].transformForm.show;\r\n    }\r\n}\r\n\r\n/*\r\n*   获取转单列表数量\r\n*   @id: String 下游单据卡片ID\r\n* */\r\nexport function getTransformFormAmount(id) {\r\n    return this.myState.transferList[id] && this.myState.transferList[id].transformForm.list.length;\r\n}\r\n\r\n//获取单来源转单已选的主子表id（存放在ViewModel里的transferIds）\r\nexport function getTransferTableSelectedId() {\r\n    let result = ViewModel.getData('transferIds');\r\n    return result;\r\n}\r\n//由于可能有操作没有  通过转单下游按钮 所以可能需要手动存取一次数据（存放在ViewModel里的transferIds）\r\nexport function setTransferTableSelectedId(headTableId, { isMultiChild, cacheItem, generateKeys, bodyPkIds, headPkIds }) {\r\n    //总的转单的数据\r\n    let transferTable = this.state.transferTable[headTableId];\r\n    let selIds = [];\r\n    let selId = [];\r\n    if (!isMultiChild) { // 转单不是多来源的子\r\n        //获取已选列表主子表id\r\n        let masterData = transferTable.selected.selectedData.masterSelData;\r\n        let childSelData = transferTable.selected.selectedData.childSelData;\r\n        if (masterData) {\r\n            for (let key of Object.keys(masterData)) {\r\n                let bodys = [];\r\n                let head = {};\r\n                if (childSelData) {\r\n                    let childData = transferTable.selected.selectedData.childSelData[key];\r\n                    if (childData) {\r\n                        for (let id of Object.keys(childData)) {\r\n                            let values = childData[id].data.values || childData[id].data;\r\n                            let itemsJson = {};\r\n                            if (cacheItem) {\r\n                                cacheItem.forEach(item => {\r\n                                    let itemValue = values[item];\r\n                                    if (itemValue) { //选中的子表数据里有要缓存的字段，\r\n                                        itemsJson[item] = itemValue;\r\n                                    } else { //选中的子表数据里有要缓存的字段就从主表数据里找\r\n                                        let masterSelData = transferTable.selected.selectedData.masterSelData[key];\r\n                                        let masterSelDataVal = masterSelData.data.values || masterSelData.data;\r\n                                        let masterItemValue = masterSelDataVal[item];\r\n                                        masterItemValue && (itemsJson[item] = masterItemValue);\r\n                                    }\r\n                                });\r\n                            }\r\n                            if (generateKeys && generateKeys.body && generateKeys.body.length > 0) {\r\n                                let bodyKeyVal = {};\r\n                                for (let val of generateKeys.body) {\r\n                                    bodyKeyVal[val] = values[val] && values[val].value;\r\n                                }\r\n                                bodys.push({\r\n                                    bodyKeyVal,\r\n                                    ...itemsJson,\r\n                                });\r\n                            } else {\r\n                                bodys.push({\r\n                                    pk: id,\r\n                                    ts: values.ts && values.ts.value,\r\n                                    ...itemsJson,\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (generateKeys && generateKeys.head && generateKeys.head.length > 0) {\r\n                    for (let val of generateKeys.head) {\r\n                        head[val] = masterData[key].data[val] && masterData[key].data[val].value;\r\n                    }\r\n                } else {\r\n                    head = {\r\n                        pk: key,\r\n                        ts: masterData[key].data.headTs ? masterData[key].data.headTs.value : masterData[key].ts,\r\n                    };\r\n                }\r\n                let itemsJson = {};\r\n                if (cacheItem) {\r\n                    cacheItem.forEach(item => {\r\n                        let itemValue = masterData[key].data[item];\r\n                        itemValue && (itemsJson[item] = itemValue);\r\n                    });\r\n                }\r\n                selIds.push({\r\n                    head,\r\n                    bodys,\r\n                    ...itemsJson,\r\n                });\r\n            }\r\n        }\r\n\r\n        ViewModel.setData('transferIds', selIds);\r\n    } else { // 转单是多来源的子\r\n        let allTranferTableData = this.state.transferTable;\r\n        let selfMasterData = transferTable.selected.selectedData.masterSelData;\r\n        let selfChildData = transferTable.selected.selectedData.childSelData;\r\n\r\n        for (let ID of Object.keys(allTranferTableData)) {\r\n            if (ID === 'allSelected') {\r\n                let selected = allTranferTableData.allSelected;\r\n                let masterData = JSON.parse(JSON.stringify(selected.selectedData.masterSelData));\r\n                let childData = JSON.parse(JSON.stringify(selected.selectedData.childSelData));\r\n                let bodys = [];\r\n                let selfBodys = [];\r\n                for (let key of Object.keys(masterData)) {\r\n                    if (childData[key]) {\r\n                        for (let id of Object.keys(childData[key])) {\r\n                            let values = childData[key][id].data.values || childData[key][id].data;\r\n                            bodyPkIds &&\r\n                                bodyPkIds.map(pk => {\r\n                                    let cData = childData[key][id].data.values || childData[key][id].data;\r\n                                    if (cData.hasOwnProperty(pk)) {\r\n                                        bodys.push({\r\n                                            [pk]: id,\r\n                                            pk: id,\r\n                                            ts: values.ts && values.ts.value,\r\n                                        });\r\n                                    }\r\n                                });\r\n                        }\r\n                    }\r\n                    if (selfChildData[key]) {\r\n                        for (let id of Object.keys(selfChildData[key])) {\r\n                            let values = selfChildData[key][id].data.values || selfChildData[key][id].data;\r\n                            bodyPkIds &&\r\n                                bodyPkIds.map(pk => {\r\n                                    let cData = selfChildData[key][id].data.values || selfChildData[key][id].data;\r\n                                    if (cData.hasOwnProperty(pk)) {\r\n                                        selfBodys.push({\r\n                                            [pk]: id,\r\n                                            pk: id,\r\n                                            ts: values.ts && values.ts.value,\r\n                                        });\r\n                                    }\r\n                                });\r\n                        }\r\n                    }\r\n                    headPkIds &&\r\n                        headPkIds.map(pk => {\r\n                            if (masterData[key].data.hasOwnProperty(pk)) {\r\n                                selIds.push({\r\n                                    head: {\r\n                                        [pk]: key,\r\n                                        pk: key,\r\n                                        ts: masterData[key].data.ts.value,\r\n                                    },\r\n                                    bodys,\r\n                                });\r\n                            }\r\n\r\n                            if (selfMasterData[key] && selfMasterData[key].data.hasOwnProperty(pk)) {\r\n                                selId.push({\r\n                                    head: {\r\n                                        [pk]: key,\r\n                                        pk: key,\r\n                                        ts: selfMasterData[key].data.ts.value,\r\n                                    },\r\n                                    bodys: selfBodys,\r\n                                });\r\n                            }\r\n                        });\r\n                    bodys = [];\r\n                }\r\n            }\r\n        }\r\n        ViewModel.setData('multiTransferIds', selIds);\r\n        ViewModel.setData('transferIds', selId);\r\n    }\r\n}\r\n\r\n/*\r\n*   获取多来源所有选中的数据的主子表主键对应的集合\r\n*   @dataSource: String 缓存ID\r\n* */\r\nexport function getTransferTableAllSelectedId(dataSource) {\r\n    let dataCache = null;\r\n    let transferTable = null;\r\n    if (dataSource) {\r\n        dataCache = ViewModel.getData(dataSource);\r\n        transferTable = dataCache ? dataCache.transferTable : null;\r\n    }\r\n    let { allSelected, ...transfers } = this.state.transferTable;\r\n    if (transferTable) {\r\n        transfers = transferTable;\r\n    }\r\n    let ids = {};\r\n    for (let items of Object.keys(transfers)) {\r\n        if (items !== 'allSelected') {\r\n            let selectedData = transfers[items].selected.selectedData;\r\n            let childSelData = selectedData.childSelData;\r\n            let masterSelData = selectedData.masterSelData;\r\n            ids[items] = {\r\n                head: Object.keys(masterSelData),\r\n                body: {},\r\n            };\r\n            for (let item of Object.keys(childSelData)) {\r\n                ids[items].body[item] = Object.keys(childSelData[item]);\r\n            }\r\n        }\r\n    }\r\n    return ids;\r\n}\r\n\r\n//获取多来源已选的主子表id（存放在ViewModel里的multiTransferIds）\r\nexport function getTransferTableMultiSelectedId() {\r\n    let result = ViewModel.getData('multiTransferIds');\r\n    return result;\r\n}\r\n\r\n/*\r\n*   获取下游转单卡片列表当前选中的卡片处理状态\r\n*   @id: String 下游转单卡片列表ID\r\n*   @index: Number/String 非必须 要查看卡片的index\r\n* */\r\nexport function getTransformFormCompleteStatus(id, index) {\r\n    let actIndex = index || this.myState.transferList[id].transformForm.activeIndex;\r\n    if (this.myState.transferList &&\r\n        this.myState.transferList[id] &&\r\n        this.myState.transferList[id].transformForm.list &&\r\n        this.myState.transferList[id].transformForm &&\r\n        this.myState.transferList[id].transformForm.list &&\r\n        this.myState.transferList[id].transformForm.list[actIndex]\r\n    ) {\r\n        return this.myState.transferList[id].transformForm.list[actIndex].complete;\r\n\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/* \r\n*   返回下游转单卡片列表待选列表\r\n*   @id: String 下游转单卡片列表ID\r\n* */\r\nexport function returnTransferTableList(id) {\r\n    let { transferList } = this.myState;\r\n    let transferListComponent = this.myState.transferListComponent;\r\n\r\n    if (transferList[id].selected) transferList[id].selected.selectedShow = false;\r\n    transferList[id].transformForm.show = false;\r\n    transferListComponent && transferListComponent.setState({ transferList }, () => {\r\n    });\r\n}\r\n\r\n/*\r\n*  获取转单列表是否存在未处理过的卡片\r\n*   @headTableId: String 转单列表id\r\n* */\r\nexport function getTransformFormStatus(Id, index) {\r\n    if (typeof Id === 'undefined') {\r\n        return false;\r\n    }\r\n    let transferList = this.myState.transferList[Id];\r\n    let { activeIndex, list } = transferList.transformForm;\r\n    let status = true;\r\n    for (let item of list) {\r\n        if (item.complete === false) {\r\n            status = false;\r\n        }\r\n    }\r\n    return status;\r\n}\r\n\r\n/* \r\n*   改变转单列表卡片处理状态\r\n*   @status 转单状态 true:状态变为已转单 false:从转单列表移除该条数据\r\n*   @headTableId: String  转单列表id\r\n*   @childId: String  子表主键字段名\r\n*   @index: String  当前操作数据的index\r\n*   @onChange: String  操作成功后的回调函数\r\n* */\r\nexport function setTransformFormStatus(headTableId, params) {\r\n    let { status, index, onChange, isNext = true, isTriggerSelected = true } = params;\r\n    let { headcode, bodycode } = this.myState.transferListAreas;\r\n    if (typeof status === 'undefined' || typeof headTableId === 'undefined') {\r\n        return false;\r\n    }\r\n    let transferList = this.myState.transferList[headTableId];\r\n    let { activeIndex, list, completeArr } = transferList.transformForm;\r\n    let transformIndex = index || activeIndex;//不传index默认为当前操作的index\r\n    if (bodycode) updateLastActiveFormData.call(this, headTableId, headcode, bodycode, status);\r\n\r\n    if (status) { //状态变为已转单\r\n        if (list[transformIndex]) {\r\n            list[transformIndex].complete = true;\r\n            completeArr[transformIndex] = true;\r\n            transferList.transformForm.currentData = list[transformIndex].data;//当前操作的数据\r\n        }\r\n    } else { //取消\r\n        if (list.length > 0) {\r\n            transferList.transformForm.currentData = list.splice(transformIndex, 1)[0].data;//取消的那条数据\r\n            completeArr.splice(transformIndex, 1);\r\n        }\r\n    }\r\n\r\n    if (list.length > 0) {\r\n        this.transferTable.changeNextTransformForm(headTableId, status, onChange, isNext, headcode, list.length, isTriggerSelected);\r\n    } else {\r\n        //当前只有一条数据则返回列表\r\n        this.transferTable.returnTransferTableList(headTableId, isNext);\r\n    }\r\n}\r\n\r\n/**\r\n * 更新孙表的数据\r\n * @param {*} transferListId \r\n * @param {*} data \r\n * @param {*} status \r\n * @param {*} index \r\n */\r\nexport function updateActiveGrandsonData(transferListId, grandsonsData, status, index) {\r\n    let transformForm = this.myState.transferList[transferListId].transformForm;\r\n    let activeIndex = transformForm.activeIndex;\r\n    let formStatus = status === true ? 'browse' : 'edit';\r\n    let data = transformForm.list[index || activeIndex].data;\r\n    if (data) {\r\n        data.grandSons = JSON.parse(JSON.stringify(grandsonsData));\r\n        if (formStatus === 'browse') {\r\n            transformForm.list[activeIndex].browseData.grandSons = JSON.parse(JSON.stringify(grandsonsData));\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   切换卡片的时候更新上次卡片的数据\r\n*   @transferListId: String  转单列表id\r\n*   @headcode: String  表头Form区域编码\r\n*   @bodycode: String  表体表格区域编码\r\n*   @status: Boolean  要处理的卡片的状态\r\n* */\r\nexport function updateLastActiveFormData(transferListId, headcode, bodycode, status, onUpdateLastActiveFormData) {\r\n    let transformForm = this.myState.transferList[transferListId].transformForm;\r\n    let activeIndex = transformForm.activeIndex;\r\n    let data = transformForm.list[activeIndex].data;\r\n    let formStatus = status === true ? 'browse' : 'edit';\r\n    let headData = this.form.getAllFormValue(headcode); // 获取form区域数据用于更新左侧head数据\r\n    if (data && data.head && data.head[headcode]) {\r\n        data.head[headcode].rows = headData.rows;\r\n        transformForm.list[activeIndex].formStatus = formStatus;\r\n        if (formStatus === 'browse') {\r\n            transformForm.list[activeIndex].browseData.head = {\r\n                [headcode]: {\r\n                    // rows: JSON.parse(JSON.stringify(headData.rows)) \r\n                    rows: headData.rows, // 为了万行 暂时不拷贝\r\n                },\r\n            };\r\n        }\r\n    }\r\n    if (typeof bodycode === 'string') {\r\n        if (!transformForm.list[activeIndex].browseData.body) transformForm.list[activeIndex].browseData.body = {};\r\n        let bodyData = (this.cardTable || this.props.cardTable).getAllRows(bodycode);// 获取table区域数据用于更新左侧body数据\r\n        if (data && data.body && data.body[bodycode]) {\r\n            data.body[bodycode].rows = bodyData;\r\n            if (formStatus === 'browse') {\r\n                transformForm.list[activeIndex].browseData.body[bodycode] = {\r\n                    // rows: JSON.parse(JSON.stringify(bodyData))\r\n                    rows: bodyData, // 为了万行 暂时不拷贝\r\n                };\r\n            }\r\n        }\r\n    } else if (Array.isArray(bodycode)) {\r\n        // 报错问题的兼容\r\n        if (data && data.body && !transformForm.list[activeIndex].browseData.body) transformForm.list[activeIndex].browseData.body = {};\r\n        // 改了四次才改全\r\n        if (data && data.bodys && !transformForm.list[activeIndex].browseData.bodys) transformForm.list[activeIndex].browseData.bodys = {};\r\n        // 郭祉祺  丛可  \r\n        // 后端数据的模型是bodys 我们一开始的设计方案是body \r\n        // 后来夏慧给我提要兼容 一主一子 一主多子\r\n        // 然后导致以前的节点报错 所以这里先做下兼容 后面需要拉着所有转单的适配业务侧主题讨论下 \r\n        for (let item of bodycode) {\r\n            let bodyData = (this.cardTable || this.props.cardTable).getAllRows(item) || [];\r\n            if (data && data.bodys && data.bodys[item]) {\r\n                data.bodys[item].rows = bodyData;\r\n                if (formStatus === 'browse') {\r\n                    transformForm.list[activeIndex].browseData.bodys[item] = {\r\n                        // rows: JSON.parse(JSON.stringify(bodyData))\r\n                        rows: bodyData, // 为了万行 暂时不拷贝\r\n                    };\r\n                }\r\n            }\r\n            // 令人恶心的兼容\r\n            if (data && data.body && data.body[item] && data.body[item].rows) {\r\n                data.body[item].rows = bodyData;\r\n                if (formStatus === 'browse') {\r\n                    transformForm.list[activeIndex].browseData.body[item] = {\r\n                        // rows: JSON.parse(JSON.stringify(bodyData))\r\n                        rows: bodyData, // 为了万行 暂时不拷贝\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof onUpdateLastActiveFormData == 'function') {\r\n        onUpdateLastActiveFormData(transformForm, headcode, bodycode);\r\n    }\r\n}\r\n\r\n/*\r\n*   取消的时候需要获取上次保存的表单表格区域的数据\r\n*   @transferListId: String  转单列表id\r\n*   @activeIndex: Number/String  上次保存状态的卡片数据\r\n* */\r\nexport function getTheTransferListDataSavedLastTime(transferListId, activeIndex) {\r\n    let transformForm = this.myState.transferList[transferListId].transformForm;\r\n    let index = transformForm.activeIndex || activeIndex;\r\n    let browseData = transformForm.list[index].browseData;\r\n    return browseData;\r\n}\r\n\r\n/*\r\n*   改变转单列表某个卡片的处理状态\r\n*   @status 转单状态 true:状态变为已转单 false:从转单列表移除该条数据\r\n*   @headTableId 主表id\r\n*   @params Object {\r\n*      status: Boolean, // 需要改变的卡片的状态\r\n*      index: Number/String, // 需要改变的卡片的下标\r\n*   }\r\n* */\r\nexport function updateTransformFormStatus(headTableId, params) {\r\n    let { status, index } = params;\r\n    if (typeof status === 'undefined' || typeof headTableId === 'undefined') {\r\n        return false;\r\n    }\r\n    let transferList = this.myState.transferList[headTableId];\r\n    let { activeIndex, list, completeArr } = transferList.transformForm;\r\n    let transformIndex = index || activeIndex;//不传index默认为当前操作的index\r\n    if (status) { //状态变为已转单\r\n        if (list[transformIndex]) {\r\n            list[transformIndex].complete = true;\r\n            list[transformIndex].formStatus = 'browse';\r\n            completeArr[transformIndex] = true;\r\n        }\r\n    } else { //取消\r\n        if (list.length > 0) {\r\n            list[transformIndex].complete = false;\r\n            list[transformIndex].formStatus = 'edit';\r\n            completeArr[transformIndex] = false;\r\n        }\r\n    }\r\n}\r\n\r\n/* \r\n*   批量改变转单列表卡片状态\r\n*   @headTableId：String 转单列表id\r\n*   @status: Boolean 转单状态 true:状态变为已转单 false:从转单列表移除该条数据\r\n*   @selId： Array 选中数据的id\r\n*   @success 操作成功后的回调函数\r\n* */\r\nexport function setMultiTransformFormStatus(headTableId, params) {\r\n    let { status, selId, success } = params;\r\n    if (typeof status === 'undefined' || typeof headTableId === 'undefined' || typeof selId === 'undefined') {\r\n        return false;\r\n    }\r\n    let transferTable = this.state.transferTable[headTableId];\r\n    let table = transferTable[headTableId];\r\n    let { transformForm } = transferTable;\r\n    let { selectedData, masterCheckedId } = transferTable.selected;\r\n    let { activeIndex, list, completeArr } = transformForm;\r\n    let oBodyData = table.bodyData.data;\r\n    //批量保存\r\n    if (Array.isArray(selId)) {\r\n        selId.forEach(id => {\r\n            if (status) {\r\n                //保存后删除待选/已选列表对应数据\r\n                for (let key of Object.keys(oBodyData)) {\r\n                    oBodyData[key].rows.map((item, i, array) => {\r\n                        if (item.rowId === id) {\r\n                            array.splice(i, 1);\r\n                        }\r\n                    });\r\n                    //子表无数据时删除主表\r\n                    if (oBodyData[key].rows.length === 0) {\r\n                        table.outerData.map((val, i, array) => {\r\n                            if (val.rowId === key) {\r\n                                array.splice(i, 1);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                //取消时删掉对应已选主表id\r\n                for (let key of Object.keys(selectedData.childSelData)) {\r\n                    let curHeadId = Object.keys(selectedData.childSelData[key]).includes(id) ? key : null;\r\n                    if (masterCheckedId.indexOf(key) !== -1 && curHeadId === key) {\r\n                        masterCheckedId.splice(masterCheckedId.indexOf(key), 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //取消勾选状态\r\n            for (let key of Object.keys(selectedData.childSelData)) {\r\n                delete selectedData.childSelData[key][id];\r\n                if (JSON.stringify(selectedData.childSelData[key]) === '{}') {\r\n                    delete selectedData.childSelData[key];\r\n                    //子表没有勾选数据时 取消主表勾选状态\r\n                    delete selectedData.masterSelData[key];\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n    if (typeof success === 'function') {\r\n        success();\r\n    }\r\n}\r\n\r\n/* \r\n*   切换到（isNext控制是否切换到下一条）下一条转单钩子函数 在setTransformFormStatus方法内调用\r\n*   @headTableId：String 转单列表ID\r\n*   @status: Boolean 转单状态 true:状态变为已转单 false:从转单列表移除该条数据\r\n*   @isNext: Boolean 是否要切换到下一条\r\n*   @callback: Function 切换后的回调函数\r\n*   @headcode 表头ID \r\n*   @flag 当前项\r\n */\r\nexport function changeNextTransformForm(headTableId, status, callback, isNext, headcode, flag, isTriggerSelected) {\r\n    let transferList = this.myState.transferList[headTableId];\r\n    let transferListComponent = this.myState.transferListComponent;\r\n\r\n    let { transformForm } = transferList;\r\n    let { activeIndex, completeArr } = transformForm;\r\n    let currentIndex = activeIndex;\r\n    let nextNotCompleteIndex = completeArr.indexOf(false, activeIndex);//下一个待处理转单\r\n    let nextActiveIndex = nextNotCompleteIndex < 0 ? activeIndex : nextNotCompleteIndex;\r\n    if (nextNotCompleteIndex < 0) {\r\n        nextNotCompleteIndex = completeArr.indexOf(false);\r\n        nextActiveIndex = completeArr.indexOf(completeArr[completeArr.findIndex((v, index) => index === activeIndex + 1)], activeIndex);\r\n    }\r\n    //没有待处理单据\r\n    if (completeArr.every(item => item)) {\r\n        //保存时保留在当前数据\r\n        if (status) {\r\n            nextActiveIndex = activeIndex;\r\n        } else { //取消时没有待处理单据跳到第一条\r\n            nextActiveIndex = 0;\r\n        }\r\n    } else {\r\n        //有待处理数据时\r\n        nextActiveIndex = nextNotCompleteIndex;\r\n    }\r\n    //如果找不到数组项 index设为数组的长度\r\n    if (!transformForm.list[currentIndex]) {\r\n        currentIndex = transformForm.list.length - 1;\r\n    }\r\n    nextActiveIndex = !isNext ? activeIndex : nextActiveIndex;\r\n    transformForm.activeIndex = nextActiveIndex;\r\n    transferListComponent && transferListComponent.setState({ transferList: this.myState.transferList },\r\n        () => {\r\n\r\n            let curData = transformForm.currentData && transformForm.currentData;\r\n            let nextData = transformForm.list[nextActiveIndex] && transformForm.list[nextActiveIndex].data;\r\n            let nextStatus = transformForm.list[nextActiveIndex] && transformForm.list[nextActiveIndex].complete;\r\n            if (callback) {\r\n                callback(curData, nextData, activeIndex);\r\n            }\r\n            let len = this.myState.transferList[headTableId].transformForm.activeIndex >= transformForm.list.length ? activeIndex : this.myState.transferList[headTableId].transformForm.activeIndex;\r\n            changeScroll();\r\n            let formStatus = !transformForm.list[nextActiveIndex].complete ? 'add' : transformForm.list[nextActiveIndex].formStatus;\r\n            isTriggerSelected && this.onTransferItemSelected && this.onTransferItemSelected(\r\n                nextData,\r\n                nextStatus,\r\n                len,\r\n                formStatus,\r\n            );\r\n            // 转单表单重新计算列宽 add by wanglongx\r\n            flag == 1 && this.form.resetItemWidth && this.form.resetItemWidth(headcode);\r\n        },\r\n    );\r\n}\r\n\r\n/* \r\n*   根据index设置转单列表左侧卡片数据\r\n*   @id： String 列表Id  data:要更新的数据\r\n*   @data： Object 要更新的数据\r\n*   @index： String/Number 要更新数据的index\r\n* */\r\nexport function setTransferListValueByIndex(id, data, index, isEdit) {\r\n    let transferListComponent = this.myState.transferListComponent;\r\n\r\n    this.myState.transferList[id].transformForm.list[index].data = data;\r\n    transferListComponent && transferListComponent.setState({ transferList: this.myState.transferList });\r\n}\r\n\r\n/**\r\n * 更新transferList\r\n * @param {*} id \r\n */\r\nexport function updateTransferList(id) {\r\n    let transferListComponent = this.myState.transferListComponent;\r\n    if (!id) {\r\n        transferListComponent && transferListComponent.setState({ transferList: this.myState.transferList });\r\n        console.log('自助更新');\r\n    } else {\r\n        let transformForm = this.myState.transferList[id].transformForm;\r\n        //  TODO\r\n    }\r\n}\r\n\r\n/*\r\n*   根据index更新转单列表左侧卡片数据\r\n*   @id： String 列表Id  data:要更新的数据\r\n*   @data： Object 要更新的数据\r\n*   @index： String/Number 要更新数据的index\r\n* */\r\nexport function updateTransferListValueByIndex(id, data, index, isEdit, isNext = false) {\r\n    let transformForm = this.myState.transferList[id].transformForm;\r\n    let transferListComponent = this.myState.transferListComponent;\r\n\r\n    let head = this.myState.transferList[id].transformForm.list[index].data.head;\r\n    // let body = JSON.parse(JSON.stringify(this.myState.transferList[id].transformForm.list[index].data.body));\r\n    let body = this.myState.transferList[id].transformForm.list[index].data.body; // 为了万行 暂不拷贝\r\n    let newHead = data.head;\r\n    let newBody = data.body;\r\n    for (let items of Object.keys(newHead)) {\r\n        if (newHead[items]) {\r\n            if (head.hasOwnProperty(newHead[items].areacode)) {\r\n                for (let item of head[items].rows) {\r\n                    for (let ite of newHead[items].rows) {\r\n                        item.values = Object.assign(item.values, ite.values);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (let items of Object.keys(newBody)) {\r\n        if (newBody[items]) {\r\n            if (body.hasOwnProperty(newBody[items].areacode)) {\r\n                for (let item of body[items].rows) {\r\n                    let len = newBody[items].rows.length;\r\n                    for (let i = 0; i < len; i++) {\r\n                        let ite = newBody[items].rows[i];\r\n                        if (item.rowid === ite.rowid) {\r\n                            newBody[items].rows[i].values = Object.assign(item.values, ite.values);\r\n                        }\r\n                    }\r\n                }\r\n                this.myState.transferList[id].transformForm.list[index].data.body[items].rows = newBody[items].rows;\r\n            }\r\n        }\r\n    }\r\n    transferListComponent && transferListComponent.setState({ transferList: this.myState.transferList }, () => {\r\n        let list = this.myState.transferList[id].transformForm.list;\r\n        let len = list.reduce((total, item) => {\r\n            return total += item.complete ? 1 : 0;\r\n        }, 0);\r\n        if (this.myState.transferList[id].transformForm.list.length === 1) {\r\n            this.onTransferItemSelected && this.onTransferItemSelected(this.myState.transferList[id].transformForm.list[0].data, this.myState.transferList[id].transformForm.list[0].complete, this.myState.transferList[id].transformForm.activeIndex, isEdit || 'browse');\r\n        } else if (len === list.length) {\r\n            this.onTransferItemSelected && this.onTransferItemSelected(this.myState.transferList[id].transformForm.list[transformForm.activeIndex].data, this.myState.transferList[id].transformForm.list[transformForm.activeIndex].complete, this.myState.transferList[id].transformForm.activeIndex, isEdit || 'browse');\r\n        }\r\n\r\n    });\r\n    return this.myState.transferList[id].transformForm.list[index].data;\r\n}\r\n\r\n/*\r\n* 清除选择数据事件*\r\n* onClearAll： Function  全部消除后的回调函数\r\n* */\r\nexport function clearAllSelectedData(onClearAll) {\r\n    let { transferTable } = this.state;\r\n    transferTable.allSelected.selectedData.masterSelData = {};\r\n    transferTable.allSelected.selectedData.childSelData = {};\r\n    transferTable.allSelected.selIds = {};\r\n    transferTable.allSelected.masterCheckedId = [];//清空已选主表id\r\n    transferTable.allSelected.masterAmount = 0;\r\n    transferTable.allSelected.bodyAmount = 0;\r\n    for (let key of Object.keys(transferTable)) {\r\n        if (key !== 'allSelected') {\r\n            transferTable[key].selected.masterCheckedId = [];//清空已选主表id\r\n            transferTable[key].selected.selectedData.selAll = false;//取消全选\r\n            transferTable[key].selected.selectedData.masterSelData = {};\r\n            transferTable[key].selected.selectedData.childSelData = {};\r\n            transferTable[key].selected.masterAmount = 0;\r\n            transferTable[key].selected.bodyAmount = 0;\r\n        }\r\n    }\r\n    this.setState({ transferTable }, () => {\r\n        onClearAll && onClearAll();\r\n    });\r\n}\r\n\r\n//----------------------------------下游转单相关API---------------------------//\r\n/*\r\n*   下游单据保存操作后，将保存过的卡片PK存在缓存中方便返回上游的时候去除\r\n*   @pk 要删除的单据pk  tableType：单据表类型\r\n*/\r\nexport function setSavedTransferTableDataPk(pk, DedataSource) {\r\n    let dataSource = DedataSource || this.transferTableDataSource;\r\n    let key = ViewModel.getData(\r\n        `${dataSource}_PK`,\r\n    ) || [];\r\n    let dataType = typeof pk;\r\n    if (dataType === 'string') {\r\n        if (!key.includes(pk)) {\r\n            key.push(pk);\r\n            ViewModel.setData(\r\n                `${dataSource}_PK`,\r\n                key);\r\n        }\r\n    } else {\r\n        for (let i of pk) {\r\n            if (!key.includes(i)) {\r\n                key.push(i);\r\n\r\n            }\r\n        }\r\n        ViewModel.setData(\r\n            `${dataSource}_PK`,\r\n            key);\r\n    }\r\n}\r\n\r\n/**\r\n * 刷新多来源没有全部页签的转单--提供给供应链的刘奇使用 节点：补货安排\r\n * 转单上下游不是在一个单页的时候，下游保存单据操作后，上游要移除那条数据，需要内部刷新转单，做到不显示移除的那条数据\r\n */\r\nexport function refreshTransferTable(type) {\r\n    if (type === 'multi') {\r\n        this.setState({ multiDelete: true });\r\n    }\r\n    if (type === 'single') {\r\n        this.setState({ singleDelete: true });\r\n    }\r\n}\r\n\r\n/**\r\n* 转单上下游是多页\r\n* 调转的时候做上游卸载的同操作 --提供给供应链的刘奇使用 节点：补货安排\r\n * @param {*} dataSource 转单缓存数据的key string\r\n */\r\nexport function whenTransferTableUnmount(dataSource, isMultiChild) {\r\n    if (dataSource) {\r\n        // let data = {\r\n        //     transferTable: JSON.parse(JSON.stringify(this.state.transferTable)),\r\n        // };\r\n        let data = { transferTable: this.state.transferTable };\r\n        // console.log(data);\r\n        // 设置缓存数据\r\n        this.ViewModel.setData(dataSource, data);\r\n        if (!isMultiChild) {\r\n            this.ViewModel.setData(\r\n                `${dataSource}_PK`,\r\n                []);\r\n        }\r\n    }\r\n}\r\n/*\r\n * 业务组删除缓存\r\n * dataSource： String 缓存ID\r\n * */\r\nexport function deleteCache(dataSource) {\r\n    ViewModel.setData(dataSource, null);\r\n    // ViewModel.setData(---没有看到转单代码哪里有用到，不是转单内部用的\r\n    //     `${dataSource}_clearStatus`\r\n    //     , true)\r\n}\r\n\r\n/**\r\n * 在转单下游卡片如果没有使用createTransferList方法 则调用此方法缓存 执行保存过得单据pk\r\n * @param dataSource\r\n * @param pk\r\n */\r\nexport function savePk(dataSource, pk) {\r\n    let key = ViewModel.getData(\r\n        `${dataSource}_PK`,\r\n    ) || [];\r\n    let dataType = typeof pk;\r\n    if (dataType === 'string') {\r\n        if (!key.includes(pk)) {\r\n            key.push(pk);\r\n            ViewModel.setData(\r\n                `${dataSource}_PK`,\r\n                key);\r\n        }\r\n    } else {\r\n        for (let i of pk) {\r\n            if (!key.includes(i)) {\r\n                key.push(i);\r\n\r\n            }\r\n        }\r\n        ViewModel.setData(\r\n            `${dataSource}_PK`,\r\n            key);\r\n    }\r\n}\r\n\r\n/*\r\n * 获取下游转单执行保存过得单据pk\r\n * @param dataSource： String 缓存ID\r\n * */\r\nexport function getPkCache(dataSource) {\r\n    return ViewModel.getData(\r\n        `${dataSource}_PK`,\r\n    );\r\n}\r\n\r\n// 千分位处理\r\n/*\r\n* num： String/Number 需要进行千分位处理的数值\r\n* */\r\nexport function numberDispose(num) {\r\n    let str = String(num);\r\n    if (str === null || str === undefined) return '';\r\n    let arr = str.split('.');\r\n    let len = 0;\r\n    if (arr.length > 1) len = arr[1].length;\r\n    return formatAcuracy(str, len);\r\n}\r\n\r\n/*\r\n * 精度处理\r\n * value： String/Number 需要进行精度处理的数值\r\n * scale: String/Number 精度\r\n * */\r\nexport function formatDot(value, scale) {\r\n    let dotSplit,\r\n        val;\r\n    if (value === true || value === false) {\r\n        return value;\r\n    }\r\n    if (value === 'null') {\r\n        return '';\r\n    }\r\n    if (!value) {\r\n        return '';\r\n    }\r\n    scale = String(scale);\r\n    if (!scale || scale === '-1') {\r\n        return value;\r\n    }\r\n\r\n    val = (value || 0).toString();\r\n    dotSplit = val.split('.');\r\n    if (scale === '0') {\r\n        return dotSplit[0];\r\n    }\r\n    if (dotSplit.length === 2) {\r\n        if (dotSplit[1].length > scale) {\r\n            dotSplit[1] = dotSplit[1].slice(0, Number(scale));\r\n            return dotSplit.join('.');\r\n        } else if (dotSplit[1].length === Number(scale)) {\r\n            return value;\r\n        } else {\r\n            dotSplit[1] = dotSplit[1].padEnd(Number(scale), '0');\r\n            return dotSplit.join('.');\r\n        }\r\n    } else {\r\n        if (scale !== '0') {\r\n            let start = value + '.';\r\n            return start + ''.padEnd(Number(scale), '0');\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * 获取value1和value2两个值精度较长的精度\r\n * value1： String/Number\r\n * value2: String/Number\r\n * */\r\nexport function getLongScale(value1, value2) {\r\n    let arr1,\r\n        arr2,\r\n        len1,\r\n        len2;\r\n    arr1 = String(value1).split('.');\r\n    arr2 = String(value2).split('.');\r\n    len1 = arr1.length;\r\n    len2 = arr2.length;\r\n    if (len2 === 1 && len1 === 1) {\r\n        return String(-1);\r\n    } else if (len2 === 1 && len1 === 2) {\r\n        return String(arr1[1].length);\r\n    } else if (len1 === 1 && len2 === 2) {\r\n        return String(arr2[1].length);\r\n    } else if (len1 === 2 && len2 === 2) {\r\n        let le1 = arr1[1].length;\r\n        let le2 = arr2[1].length;\r\n        if (le1 > le2) {\r\n            return String(arr1[1].length);\r\n        } else if (le1 <= le2) {\r\n            return String(arr2[1].length);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getMaxLengthData(data, maxLength) {\r\n    if (!data && data !== '0' && data !== 0) {\r\n        return '';\r\n    } else if (data === '0' || data === 0) {\r\n        return data;\r\n    }\r\n    let result = String(data);\r\n\r\n    if (typeof maxLength === 'number') {\r\n        if (maxLength === -1) {\r\n            return result;\r\n        }\r\n        if (result.length > maxLength) {\r\n            return result.substr(0, maxLength) + '...';\r\n        } else {\r\n            return result;\r\n        }\r\n    } else if (typeof maxLength === 'string') {\r\n        let len = Number.isNaN(Number(maxLength)) ? -1 : Number(maxLength);\r\n        if (len > 0) {\r\n\r\n            if (result.length > len) {\r\n                return result.substr(0, len) + '...';\r\n            } else {\r\n                return result;\r\n            }\r\n        } else {\r\n            return result;\r\n        }\r\n\r\n    } else {\r\n        return result;\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { sum, withViewModel, getSysFieldid, getMultiLang, changeTime, isTimeType, getLangCode, myBrowser, formatDatetime, formatNumber } from '@platform/api'\r\nimport { Table as NCTable, Button as NCButton, BackBtn as NCBackBtn, ToggleViewBtn as NCToggleViewBtn, Checkbox, ErrorPop, Tooltip } from '@platform/base'\r\nimport EllipsisToTooltip from './ellipsisToTooltip';\r\nimport {\r\n    numberDispose,\r\n    resizeEvent,\r\n    getScrollTop,\r\n    getcolsSettingParam,\r\n    updateColumnAfterSetting,\r\n    getExpandTableHeight,\r\n    whenTransferTableUnmount,\r\n} from './methods';\r\nimport { lib } from '@platform/table-core';\r\nimport classnames from 'classnames';\r\nconst { total } = lib;\r\n\r\nconst ComplexTable = total(NCTable.SortTable);\r\n\r\n@withViewModel\r\nexport default class CreateTranferTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ViewModel = this.props.ViewModel;\r\n        this.expandArrId = this.props.events && this.props.events.expandArr;\r\n        this.state = {\r\n            switchViewState: 'evenUp',\r\n            top: 0,\r\n            height: 0,\r\n            selectedTop: 0,\r\n            selectedHeight: 0,\r\n            json: {},\r\n            LangData: null,\r\n            modalBodyHeight: 0,\r\n            windowHeight: 0,\r\n            transferTableHeight: 0,\r\n            selectedTransferTableHeight: 0,\r\n            selectedListBoxHeight: 0,\r\n            boundingClientRect: {},\r\n\r\n            listHeight: 0, //\r\n            selectedListHeight: 0,\r\n\r\n        };\r\n        this.main = {};\r\n        this.setTimeIndex = null;\r\n        this.selsectMain = null;\r\n        this.bodyDom = null;\r\n        this.transfertableMain = React.createRef();\r\n        this.transfertableSelectedList = React.createRef();\r\n        this.transfertableMainIsModalSChild = false; // 转单实例是否是欠在NCMODAL弹框里面的\r\n        // ---------\r\n        this.transferTableClient = null;\r\n        this.isTransferTableSetHeight = false;\r\n        this.isSelectedListSetHeight = false;\r\n        this.transferTableHeight = null;\r\n        this.modalBodyClient = null;\r\n        this.modalBodyHeight = 0;\r\n\r\n        // ---------\r\n        this.total = null;\r\n        this.doing = true; // 用来阻止事件的\r\n        this.setListHeightIsDone = false; // 用来阻止事件的\r\n        this.setSelectListHeightIsDone = false; // 用来阻止事件的\r\n        this.setModalHeightIsDone = false; // 用来阻止事件的\r\n\r\n        /***获取当前浏览器类型*/\r\n        this.myBrowser = myBrowser();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let callback = (json, bool, LangData) => {\r\n            this.setState({ json, LangData }, () => {\r\n                let { _this, dataSource, componentInitFinished, headTableId } = this.props;\r\n                if (dataSource) {\r\n                    let data = this.ViewModel.getData(dataSource);\r\n                    // 转单数据缓存还原\r\n                    if (data && data.transferTable && Object.keys(data.transferTable).length) {\r\n                        let pk = this.ViewModel.getData(`${dataSource}_PK`) || []; // 下有转单保存的pk， 需要在缓存中删除\r\n                        // let ID = this.ViewModel.getData(`${dataSource}_ID`) || {}; // 主表子表每条数据的的key， 删除缓存中保存过的单据要用\r\n                        this.processingData(data.transferTable, pk, headTableId);\r\n                        _this.setState(\r\n                            { transferTable: data.transferTable },\r\n                            () => {\r\n                                // 清除一下\r\n                                // this.ViewModel.setData(dataSource, null);\r\n                                //执行数据初始化周期函数\r\n                                if (typeof componentInitFinished == 'function') {\r\n                                    componentInitFinished();\r\n                                }\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        getMultiLang({ moduleId: 'page-transferTable', callback });\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.onresizeEvents({ isIntl: true });\r\n        }, 200);\r\n        window.onresize = () => {\r\n            let { getMultiChildChangeWidth, isMultiChild, containerSelector } = this.props;\r\n            //外层容器宽度\r\n            let containerWidth = containerSelector && document.querySelector(containerSelector) && document.querySelector(containerSelector).clientWidth;\r\n            if (isMultiChild && typeof getMultiChildChangeWidth === 'function') {\r\n                getMultiChildChangeWidth(containerWidth, isMultiChild);\r\n            }\r\n            this.onresizeEvents({ windowResize: true });\r\n        };\r\n        // 设置一个接收装置 接收父级page所传递的信息\r\n        let _this = this.props._this;\r\n        // 查询区\r\n        _this.infoExchangeController.subscribe('heightChange', (name, { area }) => {\r\n            if (area === 'searchArea' || area === this.props.headTableId) {\r\n                console.log(`侦测到${area}高度变化，进行高度毁灭打击！`);\r\n                setTimeout(() => {\r\n                    this.onresizeEvents({ windowResize: true });\r\n                }, 20);\r\n            } else {\r\n                console.log(area);\r\n            }\r\n        });\r\n        // 弹窗resize\r\n        _this.infoExchangeController.subscribe('modelResizeEnd', (name, { indexInfo, className, id }) => {\r\n            console.log('侦测到弹窗resize变化，随风起舞吧！', indexInfo, className, id, name);\r\n            setTimeout(() => {\r\n                this.onresizeEvents({ windowResize: true });\r\n            }, 20);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { _this, dataSource, isMultiChild } = this.props;\r\n        whenTransferTableUnmount.call(_this, dataSource, isMultiChild);\r\n        // 可能需要清理 这里清理了 别人就不能用了  可以考虑 topic模式\r\n        _this.infoExchangeController && _this.infoExchangeController.unsubscribe('heightChange');\r\n        _this.infoExchangeController && _this.infoExchangeController.unsubscribe('modelResizeEnd');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let { _this } = this.props;\r\n        if (_this.state.singleDelete) { //供应链刘奇的转单上下游是多页，下游保存单据后，上游需要更新删除保存后的数据\r\n            this.dealDataFromTransferListBack(false);\r\n            _this.state.singleDelete = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 转单下游回到上游以后，检测保存过的数据，然后删除\r\n     */\r\n    dealDataFromTransferListBack = (isWillMount = true) => {\r\n        let { _this, dataSource, componentInitFinished, headTableId } = this.props;\r\n        if (dataSource) {\r\n            let data = this.ViewModel.getData(dataSource);\r\n            // 转单数据缓存还原\r\n            if (data && data.transferTable && Object.keys(data.transferTable).length) {\r\n                let pk = this.ViewModel.getData(`${dataSource}_PK`) || []; // 下有转单保存的pk， 需要在缓存中删除\r\n                // let ID = this.ViewModel.getData(`${dataSource}_ID`) || {}; // 主表子表每条数据的的key， 删除缓存中保存过的单据要用\r\n                this.processingData(data.transferTable, pk, headTableId);\r\n                _this.setState(\r\n                    { transferTable: data.transferTable },\r\n                    () => {\r\n                        // 清除一下\r\n                        // this.ViewModel.setData(dataSource, null);\r\n                        //执行数据初始化周期函数\r\n                        if (isWillMount && typeof componentInitFinished == 'function') {\r\n                            componentInitFinished();\r\n                        }\r\n                    },\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * 设置参照曾行之类的转单所在模态框的高度\r\n    * */\r\n    setModalTransferTableHeight = () => {\r\n        let { transferTable, showSeletedArea } = this.props,\r\n            selectedShow = transferTable.selected.selectedShow && showSeletedArea,\r\n            modalBodySelector = document.querySelector('.u-modal-body'),\r\n            modalBodyNowClient = modalBodySelector ? modalBodySelector.getBoundingClientRect() : null,\r\n            transferTableTop = this.transfertableMain && this.transfertableMain.current && this.transfertableMain.current.getBoundingClientRect && this.transfertableMain.current.getBoundingClientRect().top,\r\n            transferTableHeight = 0;\r\n        // 判断是设置全部列表的高度还是设置已选列表的高度\r\n        if (selectedShow) {\r\n            if (!this.setSelectListHeightIsDone) {\r\n                transferTableHeight = modalBodyNowClient.bottom - transferTableTop; // 15 是modal的paddingBottom\r\n\r\n                this.setState({\r\n                    transferTableHeight,\r\n                    selectedListHeight: transferTableHeight,\r\n                }, () => {\r\n                    this.setSelectListHeightIsDone = true;\r\n                    this.showTransferTableTimer = null;\r\n                });\r\n            }\r\n        } else {\r\n            if (!this.setListHeightIsDone) {\r\n                transferTableHeight = modalBodyNowClient.bottom - transferTableTop; // 15 是modal的paddingBottom\r\n                this.setState({\r\n                    transferTableHeight,\r\n                    listHeight: transferTableHeight,\r\n                }, () => {\r\n                    this.setListHeightIsDone = true;\r\n                    this.showTransferTableTimer = null;\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // 判断转单是不是放在modal中的\r\n    transferTableIsInModal = () => {\r\n        let modalSelector = document.querySelector('.u-modal-body');\r\n        let transfertableNowCurrent = this.transfertableMain.current;\r\n        let result = [];\r\n        let father = transfertableNowCurrent && transfertableNowCurrent.parentNode;\r\n        while (father && father.tagName != 'BODY') {\r\n            result.push(father);\r\n            father = father.parentNode;\r\n        }\r\n        this.doing = false;\r\n        this.transfertableMainIsModalSChild = result.includes(modalSelector);\r\n    }\r\n\r\n    /*\r\n    * 设置转单组件自适应宽高\r\n    * isIntl: Boolean 页面是否初始化 （didMount的时候会设置为true）\r\n    * windowResize：Boolean 窗口是否在变化宽高\r\n    * */\r\n    onresizeEvents = ({ isIntl, windowResize }) => {\r\n        let { transferTable, showSeletedArea } = this.props;\r\n        let selectedShow = transferTable.selected.selectedShow && showSeletedArea;\r\n        let windowHeight = getScrollTop();\r\n        let transferTableTop = this.transfertableMain && this.transfertableMain.current && this.transfertableMain.current.getBoundingClientRect && this.transfertableMain.current.getBoundingClientRect().top;\r\n        resizeEvent(isIntl, windowResize, selectedShow, transferTableTop, windowHeight, this);\r\n    }\r\n\r\n    //切换 全部列表 和 已选列表的显示状态\r\n    switchSelectedAndAll = () => {\r\n        let { _this, transferTable, headTableId } = this.props;\r\n        let oldSelectedShow = transferTable.selected.selectedShow;\r\n        if (!oldSelectedShow) { //to查看已选列表\r\n            transferTable.selected.selectedShow = true;\r\n        } else { //to关闭已选列表\r\n            transferTable.selected.selectedShow = false;\r\n            _this.state.transferTable[headTableId] = transferTable;\r\n        }\r\n        _this.setState({ transferTable: _this.state.transferTable }, () => {\r\n            this.onresizeEvents({ isIntl: false, windowResize: false });\r\n        });\r\n    }\r\n\r\n    //统计已选列表数量\r\n    getSelectedAmount = () => {\r\n        let { _this } = this.props;\r\n        let transferTable = _this.state.transferTable;\r\n        let bodyAmount = 0,\r\n            masterAmount = 0;\r\n        for (let item of Object.keys(transferTable)) {\r\n            if (item !== 'allSelected') {\r\n                let selected = transferTable[item].selected;\r\n                masterAmount += selected.masterAmount ? Number(selected.masterAmount) : 0;\r\n                bodyAmount += selected.bodyAmount ? Number(selected.bodyAmount) : 0;\r\n            }\r\n        }\r\n        return { masterAmount, bodyAmount };\r\n    };\r\n\r\n    // 自定义合计\r\n    customAggregate = () => {\r\n        let { _this, totalKey, getTheLongestPrecision, totalTitle, transferTable } = this.props;\r\n        let allSelected = transferTable['selected'].selectedData;\r\n        let masterSelData = allSelected.masterSelData;\r\n        let childSelData = allSelected.childSelData;\r\n        let data = [];\r\n        let values = totalKey.reduce((total, now) => {\r\n            total[now] = 0;\r\n            return total;\r\n        }, {});\r\n        for (let [name, item] of Object.entries(masterSelData)) {\r\n            let masterValue = item.data;\r\n            for (let key of totalKey) {\r\n                if (masterValue.hasOwnProperty(key)) {\r\n                    values[key] = getTheLongestPrecision(String(masterValue[key].value), String(values[key]));\r\n                    values[key] = numberDispose(values[key]);\r\n                }\r\n            }\r\n            if (childSelData.hasOwnProperty(name)) {\r\n                for (let [na, it] of Object.entries(childSelData[name])) {\r\n                    let childValue = it.data.values ? it.data.values : it.data;\r\n                    for (let key of totalKey) {\r\n                        if (childValue.hasOwnProperty(key)) {\r\n                            values[key] = getTheLongestPrecision(String(childValue[key].value), String(values[key]));\r\n                            values[key] = numberDispose(values[key]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        totalKey.map((item, index) => {\r\n            data.push({\r\n                title: totalTitle[index],\r\n                value: values[item],\r\n                key: item,\r\n            });\r\n        });\r\n        // 我墮落了\r\n        return data.length ? (\r\n            <div style={{ display: 'inline-block' }}>\r\n                {data.map(item => {\r\n                    return (\r\n                        <span key={item.key} style={{ display: 'inline-block', marginRight: '20px' }}>\r\n                            {`${item.title}: ${item.value}`}\r\n                        </span>\r\n                    );\r\n\r\n                })}\r\n            </div>\r\n        ) : '';\r\n    }\r\n\r\n    // 判断数据是否在内部\r\n    bodyTableDataIsSelected = (rowData, item) => {\r\n        return rowData && rowData.rows && rowData.rows.some(function (ritem) { return ritem.childId === item; });\r\n    }\r\n\r\n    /*\r\n    * 处理合计数据\r\n    * selected: Object 计算合计选中的数据\r\n    * tableType：String 判断主子表结构、主子拉平结构或者单表结构 （nest/full/simple）\r\n    * column：Array 合计行的模板数据\r\n    * showFullTable：Boolean 判断是表示是否为拉平显示\r\n    * */\r\n    processingTotalData = (selected, tableType, column, showFullTable, currentTable) => {\r\n        let { getScaleData } = this.props;\r\n        let outerData = {};\r\n        let totalKey = [];\r\n        let totalScale = {};\r\n        let childSelData = selected.selectedData.childSelData;\r\n        let masterSelData = selected.selectedData.masterSelData;\r\n        let masterTableData = currentTable ? currentTable.outerData : Object.keys(masterSelData);\r\n        let bodyTableData = currentTable && currentTable.bodyData && currentTable.bodyData.data;\r\n\r\n        for (let item of column) {\r\n            outerData[item['attrcode']] = { value: '', display: '' };\r\n            if (item.istotal) {\r\n                totalKey.push(item.attrcode);\r\n                totalScale[item.attrcode] = item.scale;\r\n            }\r\n        }\r\n        if (!showFullTable || tableType === 'simple') {\r\n            //  应该依赖outData 进行计算\r\n            for (let items of masterTableData) {\r\n                items = items.rowId ? items.rowId : items;\r\n                if (masterSelData[items]) { // outData 存在  已选不存在的  不计算\r\n                    let values = masterSelData[items].data;\r\n                    for (let i of totalKey) {\r\n                        if (values[i] && typeof values[i] === 'object') {\r\n                            let value = values[i] ? values[i].value : 0;\r\n                            let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n                            if (!outerData[i].value) {\r\n                                outerData[i].scale = scale;\r\n                                outerData[i].value = getScaleData(String(value), outerData[i].scale);\r\n                            } else {\r\n                                let totalData = sum(Number.parseFloat(value), Number.parseFloat(outerData[i].value.replace(/,/g, '')));\r\n                                outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                                outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if (showFullTable && tableType !== 'simple') {\r\n            if (childSelData) {\r\n                for (let items of Object.keys(childSelData)) {\r\n                    for (let item of Object.keys(childSelData[items])) {\r\n                        if (!bodyTableData || (bodyTableData && this.bodyTableDataIsSelected(bodyTableData[items], item))) { // 做一下判断当前表格中是否有对应已选的数据\r\n                            for (let i of totalKey) {\r\n                                if (\r\n                                    childSelData[items][item].data.values\r\n                                        ? childSelData[items][item].data.values.hasOwnProperty(i)\r\n                                        : childSelData[items][item].data.hasOwnProperty(i)\r\n                                ) {\r\n                                    let values = childSelData[items][item].data.values || childSelData[items][item].data;\r\n                                    if (values[i] && typeof values[i] === 'object') {\r\n                                        let value = values[i] ? values[i].value : 0;\r\n                                        let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n                                        if (!outerData[i].value) {\r\n                                            outerData[i].scale = scale;\r\n                                            outerData[i].value = getScaleData(String(value), outerData[i].scale);\r\n                                        } else {\r\n                                            let totalData = sum(Number.parseFloat(value), Number.parseFloat(outerData[i].value.replace(/,/g, '')));\r\n                                            outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                                            outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //  应该依赖outData 进行计算\r\n            for (let items of masterTableData) {\r\n                items = items.rowId ? items.rowId : items;\r\n                if (masterSelData[items]) { // outData 存在  已选不存在的  不计算\r\n                    let values = masterSelData[items].data.values || masterSelData[items].data;\r\n                    for (let i of totalKey) {\r\n                        if (values.hasOwnProperty(i)) {\r\n                            if (values[i] && typeof values[i] === 'object') {\r\n                                let value = values[i] ? values[i].value : '0';\r\n                                let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n\r\n                                if (!outerData[i].value) {\r\n                                    outerData[i].scale = scale;\r\n                                    outerData[i].value = getScaleData(String(value), scale);\r\n                                } else {\r\n                                    let totalData = sum(Number.parseFloat(value), Number.parseFloat(outerData[i].value.replace(/,/g, '')));\r\n                                    outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                                    outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [outerData];\r\n    };\r\n\r\n    /*\r\n    * 计算子表的合计航数据\r\n    * data：Object 计算合计选中的数据\r\n    * column：Array 合计行的模板数据\r\n    * record：Object 该子表所属主表所在行的数据\r\n    * */\r\n    processingTotalDataChild = (data, column, record) => {\r\n        let { getScaleData } = this.props;\r\n        let key = record.key;\r\n        let childData = data[key];\r\n        let outerData = {};\r\n        let totalKey = [];\r\n        let totalScale = {};\r\n        for (let item of column) {\r\n            outerData[item['attrcode']] = { value: '', display: '' };\r\n            if (item.istotal) {\r\n                totalKey.push(item.attrcode);\r\n                totalScale[item.attrcode] = item.scale;\r\n            }\r\n        }\r\n        if (childData) {\r\n            for (let items of Object.keys(childData)) {\r\n                let values = childData[items].data.values ? childData[items].data.values : childData[items].data;\r\n                for (let i of totalKey) {\r\n                    if (values[i] && typeof values[i] === 'object') {\r\n                        let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n                        let value = values[i] ? values[i].value : 0;\r\n                        if (!outerData[i].value) {\r\n                            outerData[i].scale = scale;\r\n                            outerData[i].value = getScaleData(String(value), scale);\r\n                        } else {\r\n                            let totalData = sum(Number.parseFloat(value), Number.parseFloat(outerData[i].value.replace(/,/g, '')));\r\n                            outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                            outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        return [outerData];\r\n    };\r\n\r\n    /*\r\n    * 表格展开显示的内容 渲染子表表格数据及复选框\r\n    * index：Number 展开行所属主表所在行的下标\r\n    * record：Object 该子表所属主表所在行的数据\r\n    * */\r\n    expandedRowRender = (record, index) => {\r\n        let {\r\n            bodyColumn,\r\n            isBodyTotal,\r\n            _this,\r\n            currentTable,\r\n            createNewData,\r\n            transferTable,\r\n            setSelectedColumns,\r\n            createNewCol,\r\n            isDrag,\r\n            showChildIndex,\r\n            comType,\r\n            sortType,\r\n            bodyTableId,\r\n            headTableId,\r\n            meta,\r\n            cancelCustomRightMenu,\r\n        } = this.props;\r\n\r\n        // socket 错误消息\r\n        let socketErrorClass = '',\r\n            values = record.values || record;\r\n        if (\r\n            values &&\r\n            values.saga_status &&\r\n            values.saga_status.value === '1'\r\n        ) {\r\n            socketErrorClass = ' socket-error-class';\r\n        }\r\n\r\n        let newColumn = bodyColumn;\r\n        let curKey = record.headKey || record.key;\r\n        let TotalDataChild = this.processingTotalDataChild(\r\n            transferTable.selected.selectedData.childSelData,\r\n            newColumn,\r\n            record,\r\n        );\r\n\r\n        let colsSettingParam = getcolsSettingParam.call(_this, meta, bodyTableId);\r\n        if (newColumn instanceof Array && newColumn.length > 0) {\r\n            newColumn = this.renderColumnsMultiSelectChild.call(_this, newColumn, record, index, comType);\r\n\r\n            if ((currentTable.bodyData && Object.keys(currentTable.bodyData).length && currentTable.bodyData.data.hasOwnProperty(curKey)) || (\r\n                transferTable && transferTable.selected && transferTable.selected.selectedData && comType === 'selectedList'\r\n            )) {\r\n                let data = null;\r\n                let expandTableHeight = 0;//展开子表的高度\r\n                let expandTableBodyHeight = 0;//展开子表表体的高度\r\n                //已选列表的子表移除时需要删除行数据\r\n                if (comType === 'selectedList') {\r\n                    data = createNewData(\r\n                        Object.values(transferTable.selected.selectedData.childSelData[curKey] || {}).map(\r\n                            item => item.data,\r\n                        ),\r\n                    );\r\n                } else {\r\n                    let intlData = currentTable.bodyData.data[record.key].rows || currentTable.bodyData.data[record.key];\r\n\r\n                    data = createNewData(\r\n                        intlData,\r\n                    );\r\n                    expandTableHeight = getExpandTableHeight(data, isBodyTotal, ReactDOM.findDOMNode(this));\r\n                    expandTableBodyHeight = getExpandTableHeight(data, isBodyTotal, ReactDOM.findDOMNode(this), true);\r\n                }\r\n                // console.log(expandTableHeight, `selected-list-${index}_table`, ReactDOM.findDOMNode(this));\r\n                let selectedStatus = transferTable.selected.selectedShow;\r\n                if (selectedStatus) {\r\n                    return (\r\n                        <div className={`u-col-md-12 u-col-sm-12 u-col-xs-12 transfertable-expand-wraper ${socketErrorClass}`} fieldid={getSysFieldid(`selected-list-${index}_table`)} style={{ height: `${expandTableHeight}px` }}>\r\n                            {/* 多了一个dom 这个dom 原来是给tinper 做计算用的 */}\r\n                            <ComplexTable\r\n                                className={`${isBodyTotal ? 'expand-table expand-table-total' : 'expand-table'}`}\r\n                                columns={setSelectedColumns(createNewCol({ column: newColumn, outerRecordKey: curKey, columnType: 'child', json: this.state.json }))}\r\n                                data={data}\r\n                                lazyload={true}\r\n                                isDrag={isDrag}\r\n                                isTotal={isBodyTotal}\r\n                                totalBodyHeight={30}\r\n                                totalData={TotalDataChild}\r\n                                totalColumns={this.createClumus(newColumn, showChildIndex, false, 45, true)}\r\n                                scroll={{ x: true, y: expandTableBodyHeight || 450 }}\r\n                                sort={sortType}\r\n                                \r\n                                updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                bodyStyle={{ minHeight: '30px' }}\r\n                                tableType='transfer'\r\n                                //折行回调\r\n                                foldingRowChange={isEllipsis => {\r\n                                    _this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                    _this.setState({ transferTable: _this.state.transferTable })\r\n                                }}\r\n                                bodyDisplayInRow={_this.state.transferTable[headTableId]['isEllipsis']}\r\n                                cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                colsSettingParam={colsSettingParam}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n                return (\r\n                    <div className={`u-col-md-12 u-col-sm-12 u-col-xs-12 transfertable-expand-wraper ${socketErrorClass}`} fieldid={getSysFieldid(`transfer-${index}_table`)} style={{ height: `${expandTableHeight}px` }}>\r\n                        {/* 多了一个dom  这个dom 原来是给tinper 做计算用的 */}\r\n                        <ComplexTable\r\n                            className={`${isBodyTotal ? 'expand-table expand-table-total' : 'expand-table'}`}\r\n                            columns={createNewCol({ column: newColumn, outerRecordKey: curKey, columnType: 'child', json: this.state.json })}\r\n                            data={data}\r\n                            isDrag={isDrag}\r\n                            scroll={{ x: true, y: expandTableBodyHeight || 450 }}\r\n                            lazyload={true}\r\n                            isTotal={isBodyTotal}\r\n                            totalData={TotalDataChild}\r\n                            totalBodyHeight={30}\r\n                            totalColumns={this.createClumus(newColumn, showChildIndex, false, 45, true)}\r\n                            sort={sortType}\r\n                            \r\n                            updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                            bodyStyle={{ minHeight: '30px' }}\r\n                            tableType='transfer'\r\n                            //折行回调\r\n                            foldingRowChange={isEllipsis => {\r\n                                _this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                _this.setState({ transferTable: _this.state.transferTable })\r\n                            }}\r\n                            bodyDisplayInRow={_this.state.transferTable[headTableId]['isEllipsis']}\r\n                            colsSettingParam={colsSettingParam}\r\n                            cancelCustomRightMenu={cancelCustomRightMenu}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            return <span />;\r\n        }\r\n    };\r\n\r\n    /*\r\n    *  控制行展开图标是否显示，当子表模板找不到并且子表数据为空数组时，设置展开图标隐藏\r\n        headTableId:String 转单主表ID\r\n        record:将要渲染的这行主表的数据\r\n        index：将要渲染的这行主表的索引\r\n        函数返回false显示展开icon，反之不显示\r\n    */\r\n    haveExpandIcon = (headTableId, isSelected, record, index) => {\r\n        let { bodyColumn, currentTable, transferTable } = this.props;\r\n        let haveBodyData,\r\n            haveBodyColumn;\r\n        if (isSelected) {\r\n            let childSelData = transferTable.selected.selectedData.childSelData;\r\n            let childSelDatalen = Object.keys(childSelData) && Object.keys(childSelData).length;\r\n            if (childSelDatalen) {\r\n                haveBodyData = true;\r\n            }\r\n        } else {\r\n            if (transferTable &&\r\n                transferTable[headTableId] &&\r\n                transferTable[headTableId].outerData\r\n            ) {\r\n                // 这里要修正下 因为滚动加载导致 index返回值并不正确\r\n                // let rowId = transferTable[headTableId].outerData[index].rowId;\r\n                let rowId = record.key || record.headKey;\r\n                if (currentTable &&\r\n                    currentTable.bodyData &&\r\n                    currentTable.bodyData.data &&\r\n                    currentTable.bodyData.data[rowId]\r\n                ) {\r\n                    if (currentTable.bodyData.data[rowId].rows.length > 0) {\r\n                        haveBodyData = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (bodyColumn instanceof Array && bodyColumn.length > 0) {\r\n            haveBodyColumn = true;\r\n        }\r\n        if (haveBodyData && haveBodyColumn) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n   * 页面初始化的时候去除下游保存过的数据\r\n   * transferTable：Object 转单数据 （this.state.transferTable）\r\n   * pk：Array 下游保存过的所有单据主键\r\n   * headTableId：String 转单ID\r\n   * */\r\n    processingData = (transferTable, pk, headTableId) => {\r\n        // 有些数据可能没清掉 导致BUG NCCLOUD-172457\r\n        let { onCheckedChange, tableType } = this.props;\r\n        if (pk.length) {\r\n            for (let items of Object.keys(transferTable)) {\r\n                if (items === headTableId) {\r\n                    let data = transferTable[items][headTableId]['bodyData'].hasOwnProperty('data') ? transferTable[items][headTableId]['bodyData']['data'] : null;\r\n                    let outerData = transferTable[items][headTableId]['outerData'];\r\n                    let selected = transferTable[items]['selected']['selectedData'];\r\n                    let masterCheckedId = transferTable[items]['selected'] && transferTable[items]['selected'].masterCheckedId;\r\n                    let childSelect = selected && selected.childSelData;\r\n                    let masterSelect = selected && selected.masterSelData;\r\n                    let selectedShow = transferTable[items]['selected'].selectedShow;\r\n                    let bodyAmountLen = 0;\r\n                    // 上游选择了多子数据\r\n                    // 如果下游只保存了一个数据 这里就有问题了 \r\n                    // transferTable[items][headTableId]['outerData'] = outerData.length ? outerData.filter(item => {\r\n                    //     return !pk.includes(item.rowId) && !masterCheckedId.includes(item.rowId);\r\n                    // }) : [];\r\n\r\n                    // 先清理主 再清理子\r\n                    masterCheckedId = masterCheckedId.filter(item => {\r\n                        return !pk.includes(item);\r\n                    });\r\n\r\n                    transferTable[items][headTableId]['outerData'] = outerData.length ? outerData.filter(item => {\r\n                        if (pk.includes(item.rowId)) {\r\n                            return false;\r\n                        }\r\n                        if (data && Object.keys(data).length && data[item.rowId] && data[item.rowId].rows) {\r\n                            // 这里需要先记录下 初始数据  不然会导致没有子级的数据返回时被删除\r\n                            let originLength = data[item.rowId].rows.length;\r\n\r\n                            data[item.rowId].rows = data[item.rowId].rows.filter(citem => {\r\n                                return !pk.includes(citem.childId);\r\n                            });\r\n                            // 如果子集都没有了 父级也不需要了？？？ 这里注意 一定要一开始有子集 然后才能移除父级\r\n                            if (originLength && data[item.rowId].rows.length === 0) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    }) : [];\r\n                    // 还有一个全选的状态也需要处理下  TODO\r\n                    if (pk && pk.length > 0) {\r\n                        selected && (selected.selAll = false);\r\n                    }\r\n\r\n                    // 根据保存时缓存的pk删除之前保存过的单据\r\n                    if (data && Object.keys(data).length) {\r\n                        for (let val of Object.keys(data)) {\r\n                            if (pk.includes(val)) {\r\n                                delete data[val];\r\n                            } else {\r\n                                data[val].rows = data[val].rows.filter(item => {\r\n                                    return !pk.includes(item.childId);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    // 删表体数据\r\n                    if (childSelect && Object.keys(childSelect).length) {\r\n                        for (let itemm of Object.keys(childSelect)) {\r\n                            let onChecked = {\r\n                                body: [],\r\n                                head: {},\r\n                            };\r\n                            let headIndex = Object.keys(data).indexOf(itemm);\r\n                            if (pk.includes(itemm)) {\r\n                                delete childSelect[itemm];\r\n                            } else {\r\n                                for (let item of Object.keys(childSelect[itemm])) {\r\n                                    if (pk.includes(item)) {\r\n                                        delete childSelect[itemm][item];\r\n                                        if (!Object.keys(childSelect[itemm]).length) {\r\n                                            delete childSelect[itemm];\r\n                                            delete masterSelect[itemm];\r\n                                            transferTable[items]['selected'].masterCheckedId = masterCheckedId.filter(it => {\r\n                                                return it !== itemm;\r\n                                            });\r\n                                            transferTable.allSelected.masterCheckedId = masterCheckedId.filter(it => {\r\n                                                return it !== itemm;\r\n                                            });\r\n                                        }\r\n                                    } else {\r\n                                        onChecked.body.push(childSelect[itemm][item].data.values ? childSelect[itemm][item].data.values : childSelect[itemm][item].data);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (masterSelect.hasOwnProperty(itemm)) {\r\n                                onChecked.head = masterSelect[itemm].data;\r\n                            }\r\n                            if (Object.keys(onChecked.head).length) {\r\n                                if (typeof onCheckedChange === 'function') {\r\n                                    onCheckedChange(true, JSON.parse(JSON.stringify(onChecked.head)), headIndex, JSON.parse(JSON.stringify(onChecked.body)));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // 删表头数据\r\n                    if (masterSelect && Object.keys(masterSelect).length) {\r\n                        for (let items of Object.keys(masterSelect)) {\r\n                            let onChecked = {\r\n                                body: [],\r\n                                head: {},\r\n                            };\r\n                            if (masterSelect.hasOwnProperty(items)) {\r\n                                onChecked.head = masterSelect[items].data;\r\n                            }\r\n                            let headIndex = Object.keys(masterSelect).indexOf(items);\r\n                            if (pk.includes(items)) {\r\n                                delete masterSelect[items];\r\n                            } else if (tableType === 'simple') {\r\n                                if (Object.keys(onChecked.head).length) {\r\n                                    if (typeof onCheckedChange === 'function') {\r\n                                        onCheckedChange(true, JSON.parse(JSON.stringify(onChecked.head)), headIndex, JSON.parse(JSON.stringify(onChecked.body)));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (childSelect && Object.keys(childSelect).length) {\r\n                        for (let item of Object.keys(childSelect)) {\r\n                            // 有个数据没有子数据  但是应该也算一行数据\r\n                            bodyAmountLen += (Object.keys(childSelect[item]).length || 1);\r\n                        }\r\n                    }\r\n                    transferTable[items]['selected'].selectedShow = selectedShow;\r\n                    transferTable[items]['selected'].bodyAmount = bodyAmountLen;\r\n                    transferTable[items]['selected'].masterAmount = Object.keys(masterSelect).length;\r\n                    transferTable[items]['selected'] && (transferTable[items]['selected'].masterCheckedId = masterCheckedId);\r\n                }\r\n                // 如果不清理 allSelected 会导致问题\r\n                if (items == 'allSelected') {\r\n                    let selIds = transferTable.allSelected ? transferTable.allSelected.selIds : null;\r\n                    let selectedData = transferTable.allSelected.selectedData;\r\n                    let childSelData = selectedData.childSelData;\r\n                    let masterSelData = selectedData.masterSelData;\r\n                    let masterCheckedId = transferTable.allSelected.masterCheckedId || [];\r\n                    let bodyAmount = 0;\r\n                    if (selIds) {\r\n                        for (let item of Object.keys(selIds)) {\r\n                            transferTable.allSelected.selIds[item] = selIds[item].filter(i => {\r\n                                return !pk.includes(i);\r\n                            });\r\n                            if (!selIds[item].length) {\r\n                                masterCheckedId = masterCheckedId.filter(i => {\r\n                                    return i !== item;\r\n                                });\r\n                                delete selIds[item];\r\n                            }\r\n                        }\r\n                        for (let item of Object.keys(childSelData)) {\r\n                            for (let i of Object.keys(childSelData[item])) {\r\n                                if (pk.includes(i)) {\r\n                                    delete childSelData[item][i];\r\n                                }\r\n                            }\r\n                            if (!Object.keys(childSelData[item]).length) {\r\n                                masterCheckedId = masterCheckedId.filter(masterItems => {\r\n                                    return masterItems !== item;\r\n                                });\r\n                                delete masterSelData[item];\r\n                                delete childSelData[item];\r\n                            }\r\n                        }\r\n                        for (let item of Object.keys(selIds)) {\r\n                            if (selIds[item]) {\r\n                                // 有个数据没有子数据  但是应该也算一行数据\r\n                                bodyAmount += (selIds[item].length || 1);\r\n                            }\r\n                        }\r\n                        transferTable.allSelected.masterCheckedId = masterCheckedId;\r\n                        transferTable.allSelected.masterAmount = Object.keys(selIds).length;\r\n                        transferTable.allSelected.bodyAmount = bodyAmount;\r\n                    }\r\n                }\r\n            }\r\n            // 后续可以优化下\r\n            // 由于刘奇那边有个统计  所以这里触发一下onCheckedChange  NCCLOUD-158999\r\n        } else if (this.props.onCheckedChange) {\r\n            for (let items of Object.keys(transferTable)) {\r\n                if (items === headTableId) {\r\n                    let dataKeys = Object.keys(transferTable[items][headTableId]['bodyData'].hasOwnProperty('data') ? transferTable[items][headTableId]['bodyData']['data'] : {}),\r\n                        selected = transferTable[items]['selected']['selectedData'],\r\n                        childSelect = selected && selected.childSelData,\r\n                        childSelectKeys = Object.keys(childSelect),\r\n                        masterSelect = selected && selected.masterSelData,\r\n                        masterSelectKeys = Object.keys(masterSelect);\r\n\r\n                    if (childSelect && childSelectKeys.length) {\r\n                        for (let citems of childSelectKeys) {\r\n                            let onChecked = {\r\n                                body: [],\r\n                                head: masterSelect[citems] ? masterSelect[citems].data : {},\r\n                            };\r\n                            let childSelectItem = childSelect[citems],\r\n                                childSelectItemsKeys = Object.keys(childSelectItem);\r\n                            for (let item of childSelectItemsKeys) {\r\n                                onChecked.body.push(childSelectItem[item].data.values ? childSelectItem[item].data.values : childSelectItem[item].data);\r\n                            }\r\n                            if (Object.keys(onChecked.head).length && typeof onCheckedChange === 'function') {\r\n                                let headIndex = dataKeys.indexOf(citems);\r\n                                onCheckedChange(true, JSON.parse(JSON.stringify(onChecked.head)), headIndex, JSON.parse(JSON.stringify(onChecked.body)));\r\n                            }\r\n                        }\r\n                    }\r\n                    if (masterSelectKeys.length && tableType === 'simple') {\r\n                        for (let mitems of masterSelectKeys) {\r\n                            if (!pk.includes(mitems)) {\r\n                                if (typeof onCheckedChange === 'function') {\r\n                                    let headIndex = masterSelectKeys.indexOf(mitems);\r\n                                    onCheckedChange(true, JSON.parse(JSON.stringify(masterSelect[mitems].data)), headIndex, masterSelectKeys.indexOf(mitems), []);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            console.log('么得数据！么得PK！');\r\n        }\r\n    };\r\n\r\n    /*\r\n    * 子表添加复选框列\r\n    * columns：Array 子表的模板数据\r\n    * records：Object 子表所属主表行数据\r\n    * indexs：Number 子表所属主表行下标\r\n    * comType：String 根据组件类型，判断是否带复选框（hasCheckBox_child/selectedList）\r\n    * */\r\n    renderColumnsMultiSelectChild = (columns, records, indexs, comType) => {\r\n        let { json } = this.state;\r\n        let { _this, defaultProps, showChildIndex, onSelectedItemRemove, transferTable, onCheckboxChangeChild, currentTable } = this.props;\r\n        let { multiSelect } = defaultProps;\r\n        let indexCol = [\r\n            {\r\n                label: <span\r\n                    style={{\r\n                        display: 'block',\r\n                        textAlign: 'left',\r\n                    }}\r\n                    bbq=\"子表序号\"\r\n                >{json['page-transferTable-0007'] || '序号-1'}\r\n                </span>,\r\n                attrcode: 'numberindex',\r\n                itemtype: 'customer',\r\n                dataIndex: 'numberindex',\r\n                visible: true,\r\n                width: comType == 'hasCheckBox_child' ? 45 : 55,\r\n                className: 'col-customer-numberindex',\r\n                render: (text, record2, index) => {\r\n                    return (\r\n                        <span\r\n                            style={{ display: 'block', textAlign: 'left' }}\r\n                        >{index + 1}\r\n                        </span>\r\n                    );\r\n                },\r\n            },\r\n        ]; // 添加序号列\r\n        let newColumn = [].concat(columns);\r\n        if (showChildIndex) {\r\n            newColumn = indexCol.concat(newColumn);\r\n        }\r\n        let oprationLabel = json['page-transferTable-0006'] ? json['page-transferTable-0006'] : '操作-2';\r\n        /*国际化处理 操作*/\r\n        //  根据组件类型，判断是否带复选框\r\n        if (comType == 'hasCheckBox_child') {\r\n            if (multiSelect && multiSelect.type === 'checkbox') {\r\n                let parId = transferTable.selected.selectedData.childSelData[records.key];\r\n                // 主表有状态 那么子表就不需要状态 saga\r\n                let pValues = records.values || records;\r\n                let pSaga_status = pValues && pValues.saga_status && pValues.saga_status.value === '1';\r\n\r\n                let defaultColumns = [\r\n                    {\r\n                        label: <span bbq=\"子表复选框\" />,\r\n                        attrcode: 'checkbox',\r\n                        itemtype: 'customer',\r\n                        fixed: 'left',\r\n                        dataIndex: 'checkbox',\r\n                        width: 70,\r\n                        visible: true,\r\n                        className: 'col-customer-checkbox',\r\n                        onCellClick: (record, e) => {\r\n                            let ck = record.key;\r\n                            let values = record.values || record;\r\n                            let index = -1;\r\n                            let bodyData = ((currentTable.bodyData.data || {})[records.key] || {}).rows || [];\r\n\r\n                            bodyData.some((item, i) => {\r\n                                let values = item.values || item;\r\n                                if (values.key === ck) {\r\n                                    index = i;\r\n                                    return true;\r\n                                }\r\n                            });\r\n\r\n                            // console.log(bodyData, index, 'xxxxx');\r\n\r\n                            if (index == -1 || pSaga_status || (values && values.saga_status && values.saga_status.value === '1')) {\r\n                                return;\r\n                            }\r\n                            onCheckboxChangeChild.call(this, '', record, index, records, indexs)\r\n                        },\r\n                        render: (text, record, index) => {\r\n                            // Socket改造\r\n                            // let { billpkname, billtype, errorViewType } = _this.nativeSocketBillInfo;\r\n                            let values = record.values || record;\r\n                            return (values && values.saga_status && values.saga_status.value === '1') || pSaga_status ? (\r\n                                <ErrorPop\r\n                                    record={record}\r\n                                />\r\n                            ) : (\r\n                                    <Checkbox\r\n                                        className=\"table-checkbox\"\r\n                                        checked={!!(parId && parId[record.key])}\r\n                                        onChange={onCheckboxChangeChild.bind(_this, text, record, index, records, indexs)}\r\n                                    />\r\n                                );\r\n                        },\r\n                    },\r\n                ];\r\n                newColumn = defaultColumns.concat(newColumn);\r\n            }\r\n        } else if (comType == 'selectedList') {\r\n            //已选列表增加操作列\r\n            let oprColumn = {\r\n                label: <span>{oprationLabel}</span>,\r\n                attrcode: 'operate',\r\n                itemtype: 'customer',\r\n                dataIndex: 'operate',\r\n                width: 100,\r\n                fixed: 'right',\r\n                visible: true,\r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <div\r\n                            className=\"row-remove\"\r\n                            bbq=\"子表移除\"\r\n                            onClick={() => {\r\n                                //移除子表\r\n                                onSelectedItemRemove && onSelectedItemRemove(record);\r\n                                onCheckboxChangeChild(text, record, index, records, index, true);\r\n                            }}\r\n                        >\r\n                            {this.state.json['page-transferTable-0001']}{/*国际化处理 移除*/}\r\n                        </div>\r\n                    );\r\n                },\r\n            };\r\n            newColumn = [...newColumn, oprColumn];\r\n        }\r\n\r\n        return newColumn;\r\n    };\r\n\r\n    /*\r\n    * 已选列表设置展开行的子表内容\r\n    * record：Object 展开行所属主表行数据\r\n    * index：Number 展开行所属主表行下标\r\n    * */\r\n    expandedRowRenderSelect = (record, index) => {\r\n        let { expandedRowRender } = this.props;\r\n        return expandedRowRender(record, index, 'selectedList', this.state.json);\r\n    };\r\n\r\n    /*\r\n    * 设置模板\r\n    * column：Array 模板数据\r\n    * showIndex：Boolean 是否需要添加序号行\r\n    * bool：Boolean 是否在模板最后要添加空的操作行（在设置已选列表模板会用到）\r\n    * */\r\n    createClumus = (column, showIndex, bool = false, indexWidth = 80, isChild) => {\r\n        let { json } = this.state;\r\n        let result = [];\r\n        let { comType, headTableId } = this.props;\r\n        let multiLangTotal = json['page-transferTable-0010'];\r\n        let oprationLabel = json['page-transferTable-0006'] ? json['page-transferTable-0006'] : '操作-1';\r\n        /*国际化处理 操作*/\r\n\r\n        if ((comType == 'hasCheckBox' || comType == 'hasCheckBox_child') && multiLangTotal) {\r\n            result.push({\r\n                label: <span style={{\r\n                    display: 'block',\r\n                    textAlign: 'left',\r\n                }}\r\n                >{json['page-transferTable-0007'] || '序号-1'}\r\n                </span>,\r\n                attrcode: 'checkbox',\r\n                itemtype: 'customer',\r\n                dataIndex: 'checkbox',\r\n                visible: true,\r\n                fixed: 'left',\r\n                width: isChild ? 70 : 80,\r\n                className: 'col-customer-checkbox col-customer-total',\r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <span\r\n                            bbq=\"普通表主合计\"\r\n                            title={multiLangTotal || '合计-4'}\r\n                            style={{\r\n                                display: 'block',\r\n                                textAlign: 'left',\r\n                                paddingRight: '13px',\r\n                            }}\r\n                        >{multiLangTotal || '合计-4'}\r\n                        </span>\r\n                    );\r\n                },\r\n            });\r\n        }\r\n        if (showIndex && (!isChild || (isChild && comType == 'hasCheckBox_child'))) {\r\n            result.push({\r\n                label: <span style={{\r\n                    display: 'block',\r\n                    textAlign: 'left',\r\n                }}\r\n                >{json['page-transferTable-0007'] || '序号-1'}\r\n                </span>,\r\n                attrcode: 'numberindex',\r\n                itemtype: 'customer',\r\n                dataIndex: 'numberindex',\r\n                visible: true,\r\n                width: indexWidth,\r\n                className: 'col-customer-numberindex',\r\n                render: (text, record, index) => {\r\n                    return <span style={{}} />;\r\n                },\r\n            });\r\n        }\r\n        column.map(item => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                render = (text, record, index) => {\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n                        if (isTimeType(item.itemtype)) {\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype === 'number') {\r\n                            dom = formatNumber(dom);\r\n                        }\r\n                        return (\r\n                            <span className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}>\r\n                                <EllipsisToTooltip overlay={dom}>\r\n                                    <span className={classnames({\r\n                                        'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                    })}>{dom}</span>\r\n                                </EllipsisToTooltip>\r\n                            </span>\r\n                        );\r\n\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index,\r\n                                )}\r\n                            >\r\n                                <div className={classnames(\r\n                                    'col-customer-render-unit',\r\n                                    {\r\n                                        'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                    })\r\n                                }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        );\r\n                    };\r\n                }\r\n            }\r\n            if (item.visible && item.attrcode !== 'checkbox' && item.attrcode !== 'numberindex') {\r\n                result.push({ ...item, render, width, key: item.attrcode, title: item.label });\r\n            }\r\n        });\r\n        bool && result.push({\r\n            label: <span>{oprationLabel}</span>,\r\n            attrcode: 'operate',\r\n            itemtype: 'customer',\r\n            dataIndex: 'operate',\r\n            visible: true,\r\n            width: 100,\r\n            render: (text, record, index) => {\r\n                return <span />;\r\n            },\r\n        });\r\n        return result;\r\n    };\r\n\r\n    /*\r\n    * 设置已选模板\r\n    * column：Array 模板数据\r\n    * */\r\n    createSelectColumns = (column, showIndex, indexWidth = 80) => {\r\n        let { json } = this.state;\r\n        let result = [];\r\n        let { comType, headTableId } = this.props;\r\n        let oprationLabel = json['page-transferTable-0006'] || '操作-1';\r\n        // 这里如果用let render方法里接收不到对应的变量  会出现显示错误  写这里也不行  必须写到里面\r\n        // var multiLangTotal = this.state.json[\"page-transferTable-0010\"] || '合计-5';\r\n        /*国际化处理 操作*/\r\n        if (comType == 'hasCheckBox' || comType == 'hasCheckBox_child') {\r\n            result.push({\r\n                label: <span />,\r\n                attrcode: 'checkbox',\r\n                itemtype: 'customer',\r\n                dataIndex: 'checkbox',\r\n                visible: true,\r\n                fixed: 'left',\r\n                width: indexWidth,\r\n                className: 'col-customer-checkbox col-customer-total',\r\n                render: (text, record, index) => {\r\n                    return <span title={this.state.json['page-transferTable-0010'] || '合计-5'}>{this.state.json['page-transferTable-0010'] || '合计-5'}</span>;\r\n                },\r\n            });\r\n        }\r\n        column.map(item => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                render = (text, record, index) => {\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n                        if (isTimeType(item.itemtype)) {\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype === 'number') {\r\n                            dom = formatNumber(dom);\r\n                        }\r\n                        return (\r\n                            <span className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}>\r\n                                <EllipsisToTooltip overlay={dom}>\r\n                                    <span className={classnames({\r\n                                        'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                    })}>{dom}</span>\r\n                                </EllipsisToTooltip>\r\n                            </span>\r\n                        );\r\n\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index,\r\n                                )}\r\n                                noEllipsis\r\n                            >\r\n                                <div className={classnames(\r\n                                    'col-customer-render-unit',\r\n                                    {\r\n                                        'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                    })\r\n                                }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        );\r\n                    };\r\n                }\r\n            }\r\n            if (item.visible && item.attrcode !== 'checkbox' && item.attrcode !== 'numberindex') {\r\n                result.push({ ...item, render, width, key: item.attrcode, title: item.label });\r\n            }\r\n        });\r\n\r\n        result.push({\r\n            label: <span>{oprationLabel}</span>,\r\n            attrcode: 'operate',\r\n            itemtype: 'customer',\r\n            dataIndex: 'operate',\r\n            visible: true,\r\n            width: 100,\r\n            render: (text, record, index) => {\r\n                return <span />;\r\n            },\r\n        });\r\n        return result;\r\n    };\r\n\r\n    render() {\r\n        let {\r\n            classByType,\r\n            column,\r\n            columns,\r\n            comType,\r\n            isHeadTotal,\r\n            isFullTotal,\r\n            createNewCol,\r\n            createFullData,\r\n            createNewData,\r\n            currentTable,\r\n            customAreaOfSelectedHead,\r\n            fullColumns,\r\n            getMasterData,\r\n            getSelectedFullData,\r\n            handleClearAllSelected,\r\n            handleChangeView,\r\n            showChangeViewBtn,\r\n            handleGenerateClick,\r\n            renderColumnsMultiSelect,\r\n            selectArea,\r\n            setSelectedColumns,\r\n            showMasterIndex,\r\n            showChildIndex,\r\n            showSeletedArea,\r\n            showSeletedBtn,\r\n            showGenerateBtn,\r\n            tableType,\r\n            transferBtnText,\r\n            transferTable,\r\n            totalKey,\r\n            totalTitle,\r\n            isDrag,\r\n            headTableId,\r\n            fullTableId,\r\n            bodyTableId,\r\n            sortType,\r\n            containerSelector,\r\n            onExpandedRowsChange,\r\n            meta,\r\n            fieldid,\r\n            _this,\r\n            cancelCustomRightMenu,\r\n            autoHeight,\r\n            fieldId\r\n        } = this.props;\r\n\r\n        let selectedAmount = this.getSelectedAmount();\r\n        let {\r\n            json,\r\n            LangData,\r\n            listHeight, // 整个单据的高度 42为底部灰条高度 5预留滚动条的位置， 35表格头部的高度\r\n            selectedListHeight,\r\n        } = this.state;\r\n        let { showFullTable } = currentTable;\r\n        let c = !showFullTable ? columns : fullColumns;\r\n        let isTotal = false,\r\n            colsSettingParam = {};\r\n        if (tableType === 'simple') {\r\n            isTotal = isHeadTotal;\r\n            colsSettingParam = getcolsSettingParam.call(_this, meta, headTableId);\r\n        } else {\r\n            if (!showFullTable) {\r\n                isTotal = isHeadTotal;\r\n                colsSettingParam = getcolsSettingParam.call(_this, meta, headTableId);\r\n            } else {\r\n                isTotal = isFullTotal;\r\n                colsSettingParam = getcolsSettingParam.call(_this, meta, fullTableId);\r\n            }\r\n        }\r\n\r\n        let showSelectedListCSS = !showSeletedArea || (showSeletedArea && !transferTable.selected.selectedShow) ? '' : 'showSelectedList'; // 已选列表转单css\r\n\r\n        let indexWidthC = 80;\r\n        if (!showSelectedListCSS) {\r\n            indexWidthC = 45;\r\n        }\r\n\r\n        if (showSelectedListCSS && showFullTable) {\r\n            indexWidthC = 60;\r\n        }\r\n\r\n        // 单来源 表头固定字段设置\r\n        if (comType == 'hasCheckBox' || comType == 'hasCheckBox_child') {\r\n            column = renderColumnsMultiSelect(columns, json, indexWidthC, !showFullTable && showSelectedListCSS ? 'selectedAndExpand' : '');\r\n            fullColumns = renderColumnsMultiSelect(fullColumns, json, indexWidthC);\r\n            classByType = 'hasCheckBox';\r\n        }\r\n\r\n        let totalColumn = this.createClumus(c, showMasterIndex, false, indexWidthC);\r\n        let totalSelectedColumn = this.createSelectColumns(c, showMasterIndex, indexWidthC);\r\n        selectedListHeight = autoHeight ? selectedListHeight : 400;\r\n        listHeight = autoHeight ? listHeight : 400;\r\n        let transferTableMainHeight = showSeletedArea && transferTable.selected.selectedShow ? selectedListHeight : listHeight;\r\n\r\n        //外层容器宽度\r\n        let containerWidth = document.querySelector(containerSelector) && document.querySelector(containerSelector).clientWidth;\r\n        // 转单下方固定灰条的css\r\n        // let fixedCss = this.transfertableMainIsModalSChild ? { position: 'absolute', bottom: 0, width: '100%' } : { width: containerWidth },\r\n        //     // 全部列表css样式\r\n        //     allListCSS = transferTable.selected.selectedShow ? {\r\n        //         height: 0,\r\n        //         width: 0,\r\n        //         opacity: 0\r\n        //     } : {};\r\n        // 为啥要计算样式\r\n        let fixedCss = this.transfertableMainIsModalSChild ? { position: 'absolute', bottom: 0, width: 'auto', left: '0', right: '0' } : { width: 'auto', left: '15px', right: '15px' },\r\n            // 全部列表css样式\r\n            allListCSS = transferTable.selected.selectedShow ? {\r\n                height: 0,\r\n                width: 0,\r\n                opacity: 0,\r\n            } : {};\r\n        // 浏览器修正 滚动条多8px\r\n        let browserDiff = this.myBrowser === 'Firefox' || this.myBrowser === 'IE' ? 8 : 0;\r\n        // 有合计行的表格scroll高度\r\n        let totalTableScrollYHeight = listHeight - 35 - 45 - 42 - (browserDiff * 2), // 35表头高度 45合计行高度 10预留滚动条的高度 42 底部灰条的高度\r\n            // 无合计行的表格scroll高度\r\n            noTotalTableScrollYheight = listHeight - 35 - 42 - browserDiff,\r\n            // 已选列表有合计行表格的scroll高度\r\n            selectedTotalTableScrollYHeight = selectedListHeight - 35 - 45 - 42 - 54 - (browserDiff * 2), // 54 是已选列表界面头部按钮区域的高度\r\n            // 已选列表无合计行表格的scroll高度\r\n            selectedNoTotalTableScrollYHeight = selectedListHeight - 35 - 42 - 54 - browserDiff;\r\n\r\n        // let tableBodyDefaultHeight =  - 35 - 45 - 42, // 35表头高度 45合计行高度 10预留滚动条的高度 42 底部灰条的高度\r\n\r\n        /*\r\n            表格三种：\r\n                单表、\r\n                主子表【主表是子表公共信息的抽取、子表可以展开收起】、\r\n                主子拉平【完整显示一行不做抽取】\r\n         */\r\n\r\n        const showExpandRender = () => {\r\n            if (_this.state.transferTable['allSelected'] && _this.state.transferTable['allSelected'].params) {\r\n                let allSelected = _this.state.transferTable['allSelected'];\r\n                let params = allSelected.params;\r\n                if(!params.length){\r\n                    return false;\r\n                }\r\n                let activeIndex = allSelected.activeTab;\r\n                if (params[activeIndex].bodyTableId === bodyTableId) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        return (\r\n            <div\r\n                className={`transfertable-main transfertable-main-${this.myBrowser || 'chrome'}  ${isTotal ? 'transfertable-main-total-wrapper' : ''}`}\r\n                style={{\r\n                    width: '100%',\r\n                    height: `${transferTableMainHeight ? (transferTableMainHeight) + 'px' : 'auto'}`,\r\n                    position: 'relative',\r\n                    // overflow: 'hidden'\r\n                }}\r\n                ref={this.transfertableMain}\r\n            >\r\n                <div className={['insertTable', classByType].join(' ')} >\r\n                    {/* 全部列表 */}\r\n                    <div style={allListCSS}>\r\n                        <div fieldid={getSysFieldid(`${fieldid || headTableId}_table`)}>\r\n                            {/* 单表和主子表 */}\r\n                            {!showFullTable ? (\r\n                                <ComplexTable\r\n                                    columns={createNewCol({ column, json: this.state.json })}//模板\r\n                                    data={createNewData(currentTable.outerData)}//渲染表格的行的数据\r\n                                    expandedRowRender={((tableType === 'nest' || tableType === 'full') && showExpandRender()) ? this.expandedRowRender : undefined}//嵌套子表\r\n                                    haveExpandIcon={tableType === 'nest' || tableType === 'full' ? this.haveExpandIcon.bind(this, headTableId, false) : undefined}//是否有展开子表的icon\r\n                                    onExpandedRowsChange={onExpandedRowsChange}//点击展开子表icon的回调\r\n                                    scroll={{ x: true, y: isHeadTotal ? totalTableScrollYHeight : noTotalTableScrollYheight }}\r\n                                    //lazyload={false}//是否开启滑动加载\r\n                                    isDrag={isDrag}//否是拖拽列\r\n                                    // totalConfig={{ showTotal: true }}\r\n                                    isTotal={isHeadTotal}//是否合计\r\n                                    totalData={isHeadTotal ? this.processingTotalData(//合计的数据\r\n                                        transferTable.selected,\r\n                                        tableType,\r\n                                        c,\r\n                                        showFullTable,\r\n                                        currentTable,\r\n                                    ) : undefined}\r\n                                    totalColumns={isHeadTotal ? totalColumn : undefined}//合计行的模板\r\n                                    bodyStyle={{ height: isHeadTotal ? totalTableScrollYHeight : noTotalTableScrollYheight }}\r\n                                    sort={sortType}//排序\r\n                                    updateColumnHandle={updateColumnAfterSetting.bind(this)}//列设置更新模板的方法\r\n                                    tableType='transfer'\r\n                                    //折行回调\r\n                                    foldingRowChange={isEllipsis => {\r\n                                        _this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                        _this.setState({ transferTable: _this.state.transferTable })\r\n                                    }}\r\n                                    bodyDisplayInRow={_this.state.transferTable[headTableId]['isEllipsis']}\r\n                                    colsSettingParam={colsSettingParam}//列设置需要的参数\r\n                                    cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                />\r\n                            ) :\r\n                                (\r\n                                    // 显示主子拉平\r\n                                    <ComplexTable\r\n                                        columns={createNewCol({ column: fullColumns, bool: true, columnType: 'full', json: this.state.json })}\r\n                                        data={createFullData(currentTable)}\r\n\r\n                                        scroll={{ x: true, y: isFullTotal ? totalTableScrollYHeight : noTotalTableScrollYheight }}\r\n                                        isTotal={isFullTotal}\r\n                                        totalData={isFullTotal ? this.processingTotalData(\r\n                                            transferTable.selected,\r\n                                            tableType,\r\n                                            c,\r\n                                            showFullTable,\r\n                                            currentTable,\r\n                                        ) : undefined}\r\n                                        lazyload={true}\r\n                                        isDrag={isDrag}\r\n                                        bodyStyle={{ height: isFullTotal ? totalTableScrollYHeight : noTotalTableScrollYheight }}\r\n                                        totalColumns={isFullTotal ? totalColumn : undefined}\r\n                                        sort={sortType}\r\n                                        updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                        tableType='transfer'\r\n                                        //折行回调\r\n                                        foldingRowChange={isEllipsis => {\r\n\r\n                                            _this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                            _this.setState({ transferTable: _this.state.transferTable })\r\n                                        }}\r\n                                        bodyDisplayInRow={_this.state.transferTable[headTableId]['isEllipsis']}\r\n                                        cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                        colsSettingParam={colsSettingParam}\r\n                                    />\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                    {/* 已选列表 */}\r\n                    <div className={`${showSelectedListCSS} selected-list-wrapper`}>\r\n                        <div className=\"selected-list\">\r\n                            <div className=\"header-area\">\r\n                                <span className=\"selected-icon-back-btn\">\r\n                                    <NCBackBtn\r\n                                        onClick={this.switchSelectedAndAll}\r\n                                        className=\"back-transfer-list\"\r\n                                    />\r\n                                </span>\r\n                                <span\r\n                                    className=\"header-title\"\r\n                                >{this.state.json['page-transferTable-0002']}{/*国际化处理 已选列表*/}\r\n                                </span>\r\n                                <div className=\"header-right\">\r\n                                    <div className=\"header-right-inner\">\r\n                                        <span className=\"header-right-change-view-area\">\r\n                                            {showChangeViewBtn === true && tableType !== 'simple' ? (\r\n                                                <NCToggleViewBtn\r\n                                                    tooltips={[json['page-transferTable-0023'], json['page-transferTable-0022']]}\r\n                                                    className=\"selected-toggle-view\"\r\n                                                    expand={!!showFullTable}\r\n                                                    onClick={handleChangeView.bind(this)}\r\n                                                />\r\n                                            ) : (\r\n                                                    ''\r\n                                                )}\r\n                                        </span>\r\n\r\n                                        <span className=\"header-right-custom-area\">\r\n                                            {\r\n                                                customAreaOfSelectedHead && customAreaOfSelectedHead()\r\n                                            }\r\n                                        </span>\r\n                                        <span className=\"clear-selected-item-btn\">\r\n                                            <NCButton className=\"item\" fieldid=\"clearAll\" onClick={handleClearAllSelected.bind(this)}>\r\n                                                {\r\n                                                    json['page-transferTable-0013'] || '清空'\r\n                                                }\r\n                                            </NCButton>\r\n                                        </span>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"content-area\"\r\n                                ref={this.transfertableSelectedList}\r\n                            >\r\n                                <div fieldid={getSysFieldid('selected-list_table')}>\r\n                                    {!showFullTable ? (\r\n                                        <ComplexTable\r\n                                            className=\"insertTable transfer-table-selected-wrapper\"\r\n                                            columns={setSelectedColumns(createNewCol({\r\n                                                column,\r\n                                                bool: tableType === 'simple',\r\n                                                json: this.state.json,\r\n                                            }), this.state.json)}\r\n                                            data={getMasterData(transferTable.selected.selectedData)}\r\n                                            expandedRowRender={(tableType === 'nest' && showExpandRender()) ? this.expandedRowRenderSelect : undefined}\r\n                                            haveExpandIcon={tableType === 'nest' ? this.haveExpandIcon.bind(this, headTableId, true) : undefined}\r\n                                            onExpandedRowsChange={onExpandedRowsChange}\r\n                                            rowKey={record => record.key}\r\n                                            isTotal={isHeadTotal}\r\n                                            // lazyload={false}\r\n                                            isDrag={isDrag}\r\n                                            totalData={isHeadTotal ? this.processingTotalData(\r\n                                                transferTable.selected,\r\n                                                tableType,\r\n                                                c,\r\n                                                showFullTable,\r\n                                            ) : undefined}\r\n                                            totalColumns={isHeadTotal ? totalSelectedColumn : undefined}\r\n                                            scroll={{ x: true, y: isHeadTotal ? selectedTotalTableScrollYHeight : selectedNoTotalTableScrollYHeight }}\r\n                                            bodyStyle={{ height: isHeadTotal ? selectedTotalTableScrollYHeight : selectedNoTotalTableScrollYHeight }}\r\n                                            sort={sortType}\r\n                                            updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                            tableType='transfer'\r\n                                            //折行回调\r\n                                            foldingRowChange={isEllipsis => {\r\n                                                _this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                                _this.setState({ transferTable: _this.state.transferTable })\r\n                                            }}\r\n                                            bodyDisplayInRow={_this.state.transferTable[headTableId]['isEllipsis']}\r\n                                            colsSettingParam={colsSettingParam}\r\n                                            cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                        />\r\n                                    ) : (\r\n                                            // 主子拉平\r\n                                            <ComplexTable\r\n                                                className=\"insertTable transfer-table-selected-wrapper\"\r\n                                                lazyload={true}\r\n                                                isDrag={isDrag}\r\n                                                columns={setSelectedColumns(createNewCol({\r\n                                                    column: fullColumns,\r\n                                                    bool: true,\r\n                                                    columnType: 'full',\r\n                                                    json: this.state.json,\r\n                                                }), this.state.json, true)}\r\n                                                data={getSelectedFullData(transferTable.selected.selectedData)}\r\n                                                scroll={{ x: true, y: isFullTotal ? selectedTotalTableScrollYHeight : selectedNoTotalTableScrollYHeight }}\r\n                                                bodyStyle={{ height: isFullTotal ? selectedTotalTableScrollYHeight : selectedNoTotalTableScrollYHeight }}\r\n                                                isTotal={isFullTotal}\r\n                                                totalData={isFullTotal ? this.processingTotalData(\r\n                                                    transferTable.selected,\r\n                                                    tableType,\r\n                                                    c,\r\n                                                    showFullTable,\r\n                                                ) : undefined}\r\n                                                totalColumns={isFullTotal ? totalSelectedColumn : undefined}\r\n                                                sort={sortType}\r\n                                                updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                                tableType='transfer'\r\n                                                //折行回调\r\n                                                foldingRowChange={isEllipsis => {\r\n                                                    _this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                                    _this.setState({ transferTable: _this.state.transferTable })\r\n                                                }}\r\n                                                bodyDisplayInRow={_this.state.transferTable[headTableId]['isEllipsis']}\r\n                                                 colsSettingParam={colsSettingParam}\r\n                                                 cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                            />\r\n                                        )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {showSeletedArea ? (\r\n                    <div\r\n                        className=\"fixed-bottom-outer\"\r\n                        style={fixedCss}\r\n                    >\r\n                        <div className=\"fixed-bottom-container bottom-area-container\" fieldid={getSysFieldid('bottom-area')}>\r\n                            {//普通多来源不显示查看已选按钮\r\n                                showSeletedBtn ? (\r\n                                    <div className=\"area-left\">\r\n                                        <NCButton className=\"middle-btn\" fieldid={transferTable.selected.selectedShow ? 'alllist' : 'selected'} onClick={this.switchSelectedAndAll}>\r\n                                            {transferTable.selected.selectedShow ? (this.state.json['page-transferTable-0003'] || '全部列表-1') : (this.state.json['page-transferTable-0004'] || '查看已选-1')}\r\n                                        </NCButton>\r\n                                    </div>\r\n                                ) : (\r\n                                        ''\r\n                                    )}\r\n                            <div className=\"area-center\">\r\n                                <span>\r\n                                    {/* <span>\r\n                                        {LangData && LangData.get('page-transferTable-0015', { n: selectedAmount.masterAmount }) || `合计: ${selectedAmount.masterAmount}条`}\r\n                                    </span> */}\r\n                                    <span>\r\n                                        {this.state.json['page-transferTable-0010']}\r\n                                        :\r\n                                        <span>{selectedAmount.masterAmount}</span>\r\n                                        {this.state.json['page-transferTable-0017']}\r\n                                    </span>\r\n                                    {tableType !== 'simple' ? (\r\n                                        <span\r\n                                            style={{ marginLeft: 8 }}\r\n                                        >\r\n                                            {this.state.json['page-transferTable-0018']}\r\n                                            :\r\n                                            <span>{selectedAmount.bodyAmount}</span>\r\n                                            {this.state.json['page-transferTable-0019']}\r\n                                        </span>\r\n                                    ) : (\r\n                                            ''\r\n                                        )}\r\n                                </span>\r\n                            </div>\r\n                            {selectArea ? (\r\n                                <div className=\"area-custom\">\r\n                                    {selectArea && typeof selectArea == 'function' && selectArea()}\r\n                                </div>\r\n                            ) : (\r\n                                    ''\r\n                                )}\r\n                            {totalKey.length && totalTitle.length ? (\r\n                                <span>\r\n                                    {this.customAggregate()}\r\n                                </span>\r\n                            ) : ''}\r\n                            {showGenerateBtn ? (\r\n                                <div className=\"area-right\">\r\n                                    <NCButton\r\n                                        fieldid={fieldId || \"generate\"}\r\n                                        className=\"main-button button-component large-btn\"\r\n                                        onClick={handleGenerateClick.bind(this)}\r\n                                        disabled={\r\n                                            JSON.stringify(transferTable.selected.selectedData.masterSelData) === '{}'\r\n                                        }\r\n                                    >\r\n                                        {transferBtnText}\r\n                                    </NCButton>\r\n                                </div>\r\n                            ) : (\r\n                                    ''\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                        ''\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { moment } from '@platform/api';\r\nimport { getMultiLang, DongbaToLocalTime, withViewModel, formatDatetime, formatNumber } from '@platform/api'\r\nimport { getScrollTop } from './methods';\r\n\r\n@withViewModel\r\nexport default class CreateTranferList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ViewModel = this.props.ViewModel;\r\n        this.expandArrId = this.props.events && this.props.events.expandArr;\r\n        this.state = {\r\n            switchViewState: 'evenUp',\r\n            transferList: null,\r\n            transformForm: null,\r\n            top: 0,\r\n            json: {},\r\n            LangData: null,\r\n            height: 0,\r\n        };\r\n        this.props._this.myState.transferListComponent = this;\r\n    }\r\n\r\n    componentWillMount() {\r\n        let callback = (json, bool, LangData) => {\r\n            let { _this, dataSource, componentInitFinished } = this.props;\r\n            this.setState({\r\n                json,\r\n                LangData,\r\n            });\r\n            if (dataSource) {\r\n                let data = this.ViewModel.getData(dataSource);\r\n                // let data = { transferTable: {} };\r\n                // console.log(\"获取缓存pk数据\", dataPk);\r\n                if (data && data.transferTable) {\r\n                    _this.setState({\r\n                        transferTable: data.transferTable,\r\n                    }, () => {\r\n                        //执行数据初始化周期函数\r\n                        if (typeof componentInitFinished == 'function') {\r\n                            componentInitFinished();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        getMultiLang({ moduleId: 'page-transferTable', callback })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onresizeEvent();\r\n        window.onresize = () => {\r\n            this.onresizeEvent();\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // 更新高度\r\n        this.setState({\r\n            resize: new Date().getTime()\r\n        }, () => {\r\n            // console.log(\"渲染次数\", nextProps);\r\n            this.onresizeEvent();\r\n        });\r\n    }\r\n\r\n    /*\r\n    * 下游转单卡片自适应\r\n    * */\r\n    onresizeEvent = () => {\r\n        let selector = document.querySelector('.transfer-list-main-wrapper');\r\n        if (selector) {\r\n            this.setState({\r\n                top: selector.offsetTop,\r\n                height: getScrollTop() - selector.offsetTop,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    * 卡片渲染\r\n    *\r\n    * */\r\n    getTransferListDom = () => {\r\n        let {\r\n            _this,\r\n            dataAreaCode,\r\n            handleTransformListClick,\r\n            transformForm, //下游转单的数据集合\r\n            transferListId,\r\n            // transformListMeta,\r\n        } = this.props;\r\n        if (!_this.state.meta) {\r\n            return false;\r\n        }\r\n        if (!_this.state.meta[transferListId] || !_this.myState.transferList[transferListId]) {\r\n            return false;\r\n        }\r\n        //转单模板信息\r\n        let transformListMeta = _this.state.meta[transferListId].items;\r\n\r\n        let { height, json, LangData } = this.state;\r\n        let flag = transformForm.show && transformForm.list && transformForm.list.length > 1;\r\n        return (\r\n            <div\r\n                className={`transfer-list-main-wrapper ${flag ? 'show-tranferList' : 'hide-tranferList'} `}\r\n                style={{ height: height - 16, overflow: 'hidden' }}\r\n            >\r\n                {\r\n                    flag ? (\r\n                        <div\r\n                            className=\"transformtable-main\"\r\n                            style={{ height: height - 8, overflow: 'auto' }}\r\n                        >\r\n                            <div className=\"transform-list\">\r\n                                <ul style={{ paddingBottom: '48px' }}>\r\n                                    {transformForm.list && transformForm.list.map((item, index) => {\r\n                                        return (\r\n                                            // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\r\n                                            <li\r\n                                                className={`${index === transformForm.activeIndex ? 'item active-transfer-list-item' : 'item'} ${item.complete && 'complete'}`}\r\n                                                onClick={() => {\r\n                                                    handleTransformListClick.call(this, item.data, index);\r\n                                                    _this.myState.stopSetScroll = false;\r\n                                                }}\r\n                                            >\r\n\r\n                                                <span className={`status${item.complete ? ' complete' : ''}`} />\r\n                                                <div className=\"content\">\r\n                                                    {\r\n                                                        transformListMeta.map((val, index) => {\r\n                                                            let itemVal = item.data.head[dataAreaCode].rows[0].values[val.attrcode] || {\r\n                                                                value: '',\r\n                                                                display: ''\r\n                                                            };\r\n                                                            // 处理一下数据为空的情况\r\n                                                            itemVal.display = itemVal.display || '';\r\n                                                            itemVal.value = itemVal.value || '';\r\n                                                            if (val.itemtype !== 'datepicker' && val.itemtype !== 'datetimepicker') {\r\n                                                                let finalVal = itemVal && (itemVal.display || itemVal.value || '') || '';\r\n                                                                if (val.itemtype === 'number') { finalVal = formatNumber(finalVal) }\r\n                                                                return (\r\n                                                                    val.visible && (\r\n                                                                        <div className=\"item-inner\">\r\n                                                                            {`${val.label}：`}\r\n                                                                            <span style={{ paddingLeft: 8 }}>\r\n                                                                                {finalVal}\r\n                                                                            </span>\r\n                                                                        </div>\r\n                                                                    ));\r\n                                                            } else {\r\n\r\n                                                                let format = val.itemtype === 'datepicker' ? 'YYYY-MM-DD' : 'YYYY-MM-DD HH:mm:ss';\r\n                                                                let dateFlag = val.itemtype === 'datepicker' ? 'date' : 'datetime';\r\n                                                                return (\r\n                                                                    val.visible && (\r\n                                                                        <div className=\"item-inner\">\r\n                                                                            {`${val.label}：`}\r\n                                                                            <span\r\n                                                                                style={{ paddingLeft: 8 }}\r\n                                                                            >{`${(itemVal && itemVal.display ? formatDatetime(DongbaToLocalTime(moment(itemVal.display)).format(format), dateFlag) : formatDatetime(DongbaToLocalTime(moment(itemVal.value)).format(format), dateFlag)) || ''}`}</span>\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                );\r\n                                                            }\r\n                                                        })\r\n                                                    }\r\n                                                </div>\r\n                                                {item.complete && <span className=\"saved-mark\">{json[\"page-transferTable-0016\"] || \"已处理\"}</span>}\r\n                                            </li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                                {transformForm.list[0] ? (\r\n                                    <div\r\n                                        className=\"total-area\"\r\n                                        style={{ bottom: '7px' }}\r\n                                    >{json['page-transferTable-0014'] || '共计-1'}：<span\r\n                                        className=\"active\"\r\n                                    >{LangData ? LangData.get('page-transferTable-0012', { n: transformForm.list.length }) : transformForm.list.length + '条'}</span>\r\n                                    </div>\r\n                                ) : ''}\r\n                            </div>\r\n                        </div>\r\n                    ) : ''\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return <span>{this.getTransferListDom()}</span>\r\n    }\r\n}\r\n","/**\r\n * Created by wangshhj on 2018/1/16.\r\n */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Table as NCTable, NumberInput as NCNumber, Checkbox, ErrorPop } from '@platform/base';\r\nimport CreateTranferTable from './CreateTranferTable';\r\nimport CreateTranferList from './CreateTranferList';\r\nimport {\r\n    updateLastActiveFormData,\r\n    thounsandTransfer,\r\n    sortColumn,\r\n    updateTransferDataAfterSort,\r\n    updateColumnAfterSetting,\r\n    getExpandTableHeight,\r\n    iscludeCurrentData,\r\n    checkboxSwitchValue,\r\n    formatDot,\r\n    getcolsSettingParam,\r\n} from './methods';\r\nimport { getTableWidth } from './util'\r\nimport EllipsisToTooltip from './ellipsisToTooltip';\r\n// 精度\r\nimport { sum, ViewModel, getSysFieldid, isTimeType, getLangCode, changeTime, formatAcuracy, commafy, linkTo, formatDatetime, formatNumber } from '@platform/api';\r\nimport classnames from 'classnames';\r\nimport { lib } from '@platform/table-core';\r\nrequire('./index.less');\r\nconst { total } = lib;\r\n\r\nconst ComplexTable = total(NCTable.SortTable);\r\n// 页面级别配置项\r\n// const _DEFAULT = {\r\n//     test_env: NODE_ENV === 'test', // node执行环境是否是test\r\n// };\r\nconst defaultProps = {\r\n    //复选框\r\n    prefixCls: 'bee-table',\r\n    multiSelect: {\r\n        type: 'checkbox',\r\n        param: 'key',\r\n    },\r\n};\r\n\r\nconst hasObjProperty = function (obj) {\r\n    return !!(obj && Object.values(obj).length);\r\n};\r\n\r\nconst defaultColor = ['#111111', '#555555', '#111', '#555'];\r\n\r\n//创建转单\r\nexport function createTransferTable({\r\n    dataSource, // 转单缓存数据的key string\r\n    headTableId, // 转单主表ID string --表转单格的区域编码\r\n    bodyTableId, // 转单子表ID string\r\n    fullTableId, // 转单主子拉平ID string\r\n    editStatus = false, // 转单是否可以编辑\r\n    isMultiChild = false, // 判断转单是否是多来源的子\r\n    comType = 'hasCheckBox_child', //根据组件类型，判断表格是否带复选框 hasCheckBox/hasCheckBox_child有复选框和selectedList无复选框\r\n    showMasterIndex = true, // 主表是否要显示序号\r\n    showChildIndex = true, // 子表是否要显示序号\r\n    transferBtnText = '转单', // 右下角按钮\r\n    onTransferBtnClick, // 右下角按钮点击回调事件\r\n    containerSelector, // 转单的父容器\r\n    componentInitFinished, // 转单初始化结束后的回调\r\n    onChangeViewClick, // 切换视图的回调\r\n    showChangeViewBtn = true, //已选列表页面 切换主子表/拉平表 的按钮显示控制 Boolean\r\n    showSeletedArea = true, //有全部页签的多来源转单不显示已选列表所在灰条的控制参数\r\n    showSeletedBtn = true, //普通多来源转单不显示查看已选按钮\r\n    showGenerateBtn = true, // 控制是否显示生成按钮的参数\r\n    tableType = 'nest', //表格显示类型 nest:主子表 full:主子拉平 simple:单表\r\n    selectArea, //已选列表底部栏自定义区域\r\n    onCheckedChange, //勾选回调函数\r\n    onClearAll, //已选列表清空回调函数\r\n    onSelectedItemRemove, // 已选列表移除某条数据的回调函数\r\n    generateKeys, // 生成按钮需要保存的字段集合\r\n    customAreaOfSelectedHead, // 已选列表顶部自定义区域\r\n    headPkIds, // 多来源的时候由父组件传下来的参数，用于保存选中的其他页签的pk\r\n    bodyPkIds, // 多来源的时候由父组件传下来的参数，用于保存选中的其他页签的pk\r\n\r\n    cacheItem, // 需要缓存的字段  by gouyangf\r\n    editableItem, // 可编辑的字段 by guoyangf\r\n    afterEvent, // 可编辑字段的编辑后事件 by guoyangf\r\n\r\n    totalKey = [], // 自定义合计字段\r\n    totalTitle = [], // 自定义合计中文\r\n    isDrag, // 拖拽\r\n    sortType = { //排序的类型 Object\r\n        mode: 'single', //'multiple'(多列排序) 或'single'(单列排序)(如果前端排序的时候想多列排序，对象里就穿这个字段就可以了),\r\n        backSource: false, //false是前端排序，值为true为后端排序,默认false\r\n        sortFun: (sortInfoObj, sortData) => { //sortInfoObj:{field:是模板的dataIndex,order:\"ascend\"升序/\"descend\"降序} , sortData:[]排序后的数据\r\n            updateTransferDataAfterSort(sortData, headTableId, this, sortInfoObj);\r\n        },\r\n    },\r\n    onExpandedChange, //主子表点击加号的回调 function\r\n    customSortRule, //自定义排序规则\r\n    getMultiChildChangeWidth, //获取多来源有全部页签的共用底部灰条宽度的额方法 function\r\n    fieldid,\r\n    fieldId,\r\n    defaultOperateColumnHidden = false, // true  false\r\n    // 多模板pageId  传入\r\n    currentPageId,\r\n    cancelCustomRightMenu = false,\r\n    autoHeight = true,\r\n    fullDataRule = 'mainbody',\r\n}) {\r\n    if (dataSource) {\r\n        this.transferTableDataSource = dataSource;\r\n    }\r\n\r\n    /**\r\n     * this.state.transferTable Object\r\n     * {\r\n            allSelected:{} 被选中的单据信息\r\n            转单主表1 id:{\r\n                转单主表id1:{}\r\n                selected:{//当前表单选中的数据\r\n\r\n                }\r\n            }\r\n            转单主表1 id:{\r\n                转单主表id1:{}\r\n            }\r\n     * }\r\n     */\r\n    if (!this.state.transferTable.hasOwnProperty('allSelected')) {\r\n        this.state.transferTable['allSelected'] = {\r\n            activeTab: '0', //当前高亮tab\r\n            selectedShow: false, //显示已选列表\r\n            masterAmount: 0, //主表已选数量\r\n            bodyAmount: 0, //子表已选数量\r\n            masterCheckedId: [], //存放已选主表id，用于复选框半选\r\n            selIds: {}, //存放其他页签的主子表id\r\n            showFullTable: false, //已选列表中是否显示主子拉平\r\n            selectedData: {\r\n                selAll: false,\r\n                masterSelData: {},\r\n                childSelData: {},\r\n            },\r\n        };\r\n    }\r\n\r\n    if (!this.state.transferTable.hasOwnProperty(headTableId)) {\r\n        this.state.transferTable[headTableId] = {\r\n            [headTableId]: {\r\n                tableType,\r\n                bodyData: {},\r\n                outerData: [],\r\n                showFullTable: tableType === 'full',\r\n                firstTime: true,\r\n                bodyTableId,\r\n            },\r\n            selected: {\r\n                selectedShow: false,\r\n                masterAmount: 0, //主表已选数量\r\n                bodyAmount: 0, //子表已选数量\r\n                masterCheckedId: [], //存放已选主表id，用于复选框半选\r\n                selectedData: {\r\n                    selAll: false,\r\n                    masterSelData: {},\r\n                    childSelData: {},\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    if (!this.state.meta) { //拿到模板数据之后才做渲染\r\n        return false;\r\n    }\r\n\r\n    //总的转单的数据\r\n    let transferTable = this.state.transferTable[headTableId];\r\n    if (!transferTable.hasOwnProperty('isEllipsis')) {\r\n        transferTable['isEllipsis'] = true\r\n    }\r\n    //当前要渲染的转单的全部列表 数据\r\n    let currentTable = this.state.transferTable[headTableId][headTableId];\r\n\r\n    if (currentTable.showFullTable) { //是否要拉平展示\r\n        if (!this.state.meta[fullTableId]) { //模板里是否有配置拉平的字段\r\n            return false;\r\n        }\r\n        //headTableId = fullTableId;\r\n    } else {\r\n        if (!this.state.meta.hasOwnProperty(headTableId) || !this.state.meta[headTableId]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * currentTable.outerData 主表的数据 [{},{},...]  \r\n     * data:Array\r\n     */\r\n    let data = currentTable.outerData.map(item => {\r\n        item.values.headKey = item.values.key;\r\n        item.values.headTs = item.values.ts;\r\n        return item;\r\n    });\r\n\r\n    // let transformForm = this.state.transferTable[headTableId].transformForm;\r\n    this.onTransferBtnClick = onTransferBtnClick; //转单按钮回调函数--生成采购单按钮\r\n    this.onChangeViewClick = onChangeViewClick; //切换视图回调函数 ---切换按钮\r\n    this.onCheckedChange = onCheckedChange; //复选框勾选回调函数 \r\n    this.onClearAll = onClearAll; //已选列表清空回调函数\r\n\r\n    //表格的列模板信息\r\n    //主表模板\r\n    let columns = this.state.meta[headTableId] && this.state.meta[headTableId].items.map((val, index) => {\r\n        sortColumn(val, sortType, customSortRule);\r\n        // 清理required 属性  不然会导致表头错行\r\n        if (val && val.required) {\r\n            delete val.required;\r\n        }\r\n        return val;\r\n    });\r\n    //子表模板\r\n    let bodyColumn = bodyTableId && this.state.meta[bodyTableId] ? this.state.meta[bodyTableId].items.map((val, index) => {\r\n        sortColumn(val, sortType, customSortRule);\r\n        // 清理required 属性  不然会导致表头错行\r\n        if (val && val.required) {\r\n            delete val.required;\r\n        }\r\n        return val;\r\n    }) : [];\r\n\r\n    //主子拉平模板\r\n    let fullColumns = fullTableId && this.state.meta[fullTableId] ? this.state.meta[fullTableId].items.map((val, index) => {\r\n        sortColumn(val, sortType, customSortRule);\r\n        // 清理required 属性  不然会导致表头错行\r\n        if (val && val.required) {\r\n            delete val.required;\r\n        }\r\n        return val;\r\n    }) : [];\r\n\r\n    // 是否遍历模板的状态 Boolean  查找是否有配合计字段istotal为true的，遍历到就为true\r\n    let traversalStatus = this.myState.status.traversalStatus;\r\n\r\n    //选择主/子表时记录主表id id:主表id flag:选中/取消选中\r\n    const setMasterId = (id, flag) => {\r\n        let { masterCheckedId, selectedData } = transferTable.selected;\r\n        if (!masterCheckedId.includes(id) && flag) {\r\n            masterCheckedId.push(id);\r\n        } else if (masterCheckedId.indexOf(id) !== -1 && !selectedData.selAll) {\r\n            masterCheckedId.splice(masterCheckedId.indexOf(id), 1);\r\n        }\r\n    };\r\n\r\n    //判断合计行是否显示\r\n    const traversalColumns = columns => {\r\n        for (let items of columns) {\r\n            if (items.istotal) { //是都 要显示合计行\r\n                this.myState.status.totalStatusOfTransferTable = true;//判断合计行是否显示\r\n                this.myState.status.traversalStatus = true;\r\n            } else if (items.data) {\r\n                for (let item of items.data) {\r\n                    if (item.istotal) {\r\n                        this.myState.status.totalStatusOfTransferTable = true;\r\n                        this.myState.status.traversalStatus = true;\r\n                    }\r\n                }\r\n            }\r\n            if (this.myState.status.traversalStatus) {\r\n                break;\r\n            }\r\n        }\r\n        traversalColumn.call(this, columns[0].data, 'head');\r\n        traversalColumn.call(this, columns[1].data, 'full');\r\n        traversalColumn.call(this, columns[2].data, 'body');\r\n    };\r\n\r\n    //设置主表、子表、拉平表的合计行是否显示\r\n    const traversalColumn = (column, key) => {\r\n        if (column) {\r\n            for (let items of column) {\r\n                if (items.istotal) {\r\n                    this.myState.status[`${key}TotalStatusOfTransferTable`] = true;\r\n                    this.myState.status[`${key}traversalStatus`] = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //查看是否遍历了合计状态\r\n    // 去除  部分情况下  模板发生了变化  但是合计并没有更新\r\n    // if (!traversalStatus) {\r\n    let columnsArr = [\r\n        { data: columns, title: 'columns' },\r\n        { data: fullColumns, title: 'columns' },\r\n        {\r\n            data: bodyColumn,\r\n            title: 'columns',\r\n        },\r\n    ];\r\n    traversalColumns.bind(this, columnsArr)();\r\n    // }\r\n\r\n    //判断子表是否全选\r\n    const isChildCheckAll = parents => {\r\n        let innerDataLen = currentTable.bodyData.data[parents.key].rows.length;\r\n        let childSelLen = Object.keys(transferTable.selected.selectedData.childSelData[parents.key]).length;\r\n        if (innerDataLen === childSelLen) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    //判断主表是否全选\r\n    const isMasterCheckAll = () => {\r\n        // let outerDataLen = currentTable.outerData.length;\r\n        // let bodyDataLen = Object.keys(currentTable.bodyData.data).reduce((total, next, item) => {\r\n        //     return total += currentTable.bodyData.data[next].rows.length;\r\n        // }, 0);\r\n        // let masterSelLen = transferTable.selected.masterCheckedId.length;\r\n        // let bodySelLen = Object.keys(transferTable.selected.selectedData.childSelData).reduce((total, next, item) => {\r\n        //     return total += Object.keys(transferTable.selected.selectedData.childSelData[next]).length;\r\n        // }, 0);\r\n        // if (tableType === 'simple') {\r\n        //     if (outerDataLen === masterSelLen) {\r\n        //         return true;\r\n        //     }\r\n        // } else if (bodyDataLen >= 0 && bodyDataLen <= bodySelLen) {\r\n        //     return true;\r\n        // } else if (bodyDataLen === 0 && bodyDataLen === bodySelLen) {\r\n        //     if (outerDataLen === masterSelLen) {\r\n        //         return true;\r\n        //     }\r\n        // }\r\n        // return false;\r\n        let { isSelectAll } = iscludeCurrentData(transferTable, headTableId);\r\n\r\n        return isSelectAll;\r\n    };\r\n\r\n    /**\r\n     * 主子表显示状态  切换子表的复选框的时候设置 allSelected、childSelData、masterSelData 里的选中数据\r\n     *切换选中状态行的数据 record：{} \r\n     * 被选中子表的主表的数据 parents：{} 为了取key去作为属性去保存选中的数据信息\r\n     * 是否选中 flag：Boolean \r\n     * 看是主表还是子表选中 type：String  body/head\r\n     */\r\n    const setAllSelectedValue = ({ record, parents, flag, type }) => {\r\n        let parent = parents;\r\n        let allSelected = this.state.transferTable.allSelected;\r\n        let childSelData = allSelected.selectedData.childSelData;\r\n        let masterSelData = allSelected.selectedData.masterSelData;\r\n        if (type === 'body') {\r\n            if (flag) {\r\n                if (!allSelected.masterCheckedId.includes(parent.key)) allSelected.masterCheckedId.push(parent.key);\r\n                if (!allSelected.selIds.hasOwnProperty(parent.key)) {\r\n                    allSelected.selIds[parent.key] = [record.key];\r\n                } else {\r\n                    if (!allSelected.selIds[parent.key].includes(record.key)) allSelected.selIds[parent.key].push(record.key);\r\n                }\r\n                masterSelData[parent.key] = {\r\n                    sel: true,\r\n                    data: parent,\r\n                };\r\n                if (!childSelData.hasOwnProperty(parent.key)) {\r\n                    childSelData[parent.key] = {\r\n                        [record.key]: {\r\n                            sel: true,\r\n                            data: {\r\n                                childId: record.key,\r\n                                values: record,\r\n                            },\r\n\r\n                        },\r\n                    };\r\n                } else {\r\n                    if (!childSelData[parent.key].hasOwnProperty(record.key)) {\r\n                        childSelData[parent.key][record.key] = {\r\n                            sel: true,\r\n                            data: {\r\n                                childId: record.key,\r\n                                values: record,\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                allSelected.selIds[parent.key] = allSelected.selIds[parent.key].filter(item => item !== record.key);\r\n                if (!allSelected.selIds[parent.key].length) delete allSelected.selIds[parent.key];\r\n                if (childSelData[parent.key].hasOwnProperty(record.key)) delete childSelData[parent.key][record.key];\r\n                if (!Object.keys(childSelData[parent.key]).length) {\r\n                    delete childSelData[parents.key];\r\n                    delete childSelData[parents.key];\r\n                    allSelected.masterCheckedId = allSelected.masterCheckedId.filter(item => item !== parents.key);\r\n                }\r\n            }\r\n        } else if (type === 'head') {\r\n            let curKey = record.headKey || record.key; //主子拉平取主表id\r\n            if (flag) {\r\n                let bodyData = transferTable[headTableId].bodyData.data;\r\n                let selectedBodyData = {};\r\n                let selIdsBodyData = {};\r\n                if (!allSelected.masterCheckedId.includes(curKey)) allSelected.masterCheckedId.push(curKey);\r\n                masterSelData[curKey] = {\r\n                    sel: true,\r\n                    data: record,\r\n                };\r\n                for (let key of Object.keys(bodyData)) {\r\n                    let itemBodyData = {};\r\n                    let itemSelIdsData = [];\r\n                    if (key === curKey) {\r\n                        for (let item of bodyData[key].rows) {\r\n                            itemBodyData[item.childId] = {\r\n                                sel: true,\r\n                                data: {\r\n                                    childId: item.childId,\r\n                                    values: item.values,\r\n                                },\r\n                            };\r\n                            if (!itemSelIdsData.includes(item.childId)) itemSelIdsData.push(item.childId);\r\n                        }\r\n                        selectedBodyData[key] = itemBodyData;\r\n                        selIdsBodyData[key] = itemSelIdsData;\r\n                    }\r\n\r\n                }\r\n                allSelected.selectedData.childSelData = { ...childSelData, ...selectedBodyData };\r\n                allSelected.selIds = { ...allSelected.selIds, ...selIdsBodyData };\r\n            } else {\r\n                allSelected.masterCheckedId = allSelected.masterCheckedId.filter(item => item !== curKey);\r\n                delete masterSelData[curKey];\r\n                delete childSelData[curKey];\r\n                delete allSelected.selIds[curKey];\r\n            }\r\n        }\r\n        // 有个数据没有子数据  但是应该也算一行数据\r\n        allSelected.bodyAmount = Object.values(allSelected.selIds).reduce((total, now) => total += (now.length || 1), 0);\r\n        allSelected.masterAmount = allSelected.masterCheckedId.length;\r\n    };\r\n    //===========================子表添加复选框===========================================\r\n\r\n    //所有选中的子表条数总合 所有主表的条数总合 的处理\r\n    //transferTable Object\r\n    const getAmount = transferTable => {\r\n        let selected = transferTable.selected;\r\n        let selectedData = selected.selectedData;\r\n        let bodyAmount = 0;//所有选中的子表条数总合\r\n        for (let item of Object.keys(selectedData.childSelData)) {\r\n            // 有个数据没有子数据  但是应该也算一行数据\r\n            bodyAmount += (Object.keys(selectedData.childSelData[item]).length || 1);\r\n        }\r\n        return {\r\n            bodyAmount,\r\n            masterAmount: Object.keys(selectedData.masterSelData).length, //所有主表的条数总合\r\n        };\r\n    };\r\n\r\n    /*\r\n     * 子表复选框单个勾选 修改数据里的allSelected、和selected里的一些选中信息\r\n     * @param {*} text  \r\n     * @param {Object} record 当前行的数据 \r\n     * @param {Number} index 索引\r\n     * @param {Object} parents 取名应该为parent，是选中子表的主表数据\r\n     * @param {Number} parentsIndex  索引\r\n     * @param {Boolean} bool \r\n     * @param {Boolean} isOnCheckedChange \r\n     * bool和isOnCheckedChange都是为了控制不给业务组复选框切换 传两次数据的  修复条件\r\n     */\r\n    const onCheckboxChangeChild = (text, record, index, parents, parentsIndex, bool = false, isOnCheckedChange = true) => {\r\n        let selected = transferTable.selected;\r\n        let selectedData = selected.selectedData;\r\n        let master = selectedData.childSelData[parents.key];\r\n        let flag = true;\r\n        if (!master) {\r\n            selectedData.childSelData[parents.key] = {\r\n                [record.key]: {\r\n                    sel: true,\r\n                    data: record,\r\n                    // masterData: parents\r\n                },\r\n            };\r\n            selectedData.masterSelData[parents.key] = {\r\n                sel: true,\r\n                data: parents,\r\n            };\r\n            setAllSelectedValue({ record, parents, flag: true, type: 'body' }); // 为多来源转单设置选中数据\r\n            // setAllSelVal('body', true, parents.key, record.key); //多来源有全部页签需要单独统计已选数据\r\n            // //判断主表是否全选\r\n            if (isMasterCheckAll()) {\r\n                selectedData.selAll = true;\r\n            }\r\n            if (isChildCheckAll(parents)) {\r\n                setMasterId(parents.key, true);\r\n            }\r\n        } else {\r\n            let child = master[record.key];\r\n            flag = !child;\r\n            if (!child) {\r\n                selectedData.childSelData[parents.key][record.key] = {\r\n                    sel: true,\r\n                    data: record,\r\n                    // masterData: parents\r\n                };\r\n                selectedData.masterSelData[parents.key] = {\r\n                    sel: true,\r\n                    data: parents,\r\n                };\r\n                setAllSelectedValue({ record, parents, flag: true, type: 'body' }); // 为多来源转单设置选中数据\r\n                setAllSelVal('body', true, parents.key, record.key); //多来源有全部页签需要单独统计已选数据\r\n                // //判断子表数据是否全选\r\n                if (isChildCheckAll(parents)) {\r\n                    setMasterId(parents.key, true);\r\n                }\r\n                //判断主表是否全选\r\n                if (isMasterCheckAll()) {\r\n                    selectedData.selAll = true;\r\n                }\r\n            } else {\r\n                delete selectedData.childSelData[parents.key][record.key];\r\n                let childAll = selectedData.childSelData[parents.key];\r\n                if (Object.keys(childAll).length === 0) {\r\n                    delete selectedData.childSelData[parents.key];\r\n                    delete selectedData.masterSelData[parents.key];\r\n                }\r\n                setAllSelectedValue({ record, parents, flag: false, type: 'body' }); // 为多来源转单设置选中数据\r\n\r\n                // setAllSelVal('body', false, parents.key, record.key); //多来源有全部页签需要单独统计已选数据\r\n                selectedData.selAll = false;\r\n                setMasterId(parents.key, false);\r\n            }\r\n        }\r\n        let amountData = getAmount.call(this, transferTable);\r\n        selected.bodyAmount = amountData.bodyAmount;\r\n        selected.masterAmount = amountData.masterAmount;\r\n        this.state.transferTable[headTableId] = transferTable;\r\n        this.setState(\r\n            { transferTable: this.state.transferTable },\r\n            () => {\r\n                if (typeof bool === 'boolean') {\r\n                    isOnCheckedChange && onCheckedChange && onCheckedChange(flag, JSON.parse(JSON.stringify(record)), index, null, parentsIndex);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    /*多来源有全部页签需要单独统计已选数据 切换选中状态的时候对selIds进行更改\r\n     * \r\n     * @param {String} type head/body 被勾选的类型是主表还是子表\r\n     * @param {Boolean} status  选中状态\r\n     * @param {String} headId 主表id\r\n     * @param {String} bodyId 子表id\r\n     */\r\n    const setAllSelVal = (type, status, headId, bodyId) => {\r\n        window.transferTable = this.state.transferTable;\r\n        let allSelected = this.state.transferTable.allSelected;\r\n        if (allSelected) {\r\n            if (status) {\r\n                if (!allSelected.selIds[headId]) {\r\n                    if (type === 'head') {\r\n                        //主表勾选\r\n                        allSelected.selIds[headId] = [];\r\n                    } else {\r\n                        //子表勾选\r\n                        allSelected.selIds[headId] = [bodyId];\r\n                    }\r\n                } else if (bodyId && !allSelected.selIds[headId].includes(bodyId)) {\r\n                    //子表勾选\r\n                    allSelected.selIds[headId].push(bodyId);\r\n                }\r\n            } else {\r\n                if (type === 'head') {\r\n                    //主表取消勾选\r\n                    delete allSelected.selIds[headId];\r\n                } else {\r\n                    //子表取消勾选\r\n                    let selIds = allSelected.selIds;\r\n                    if (selIds[headId]) {\r\n                        selIds[headId].splice(selIds[headId].indexOf(bodyId), 1);\r\n                        if (selIds[headId].length === 0) {\r\n                            delete selIds[headId];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //判断主表或子表是否有选中项\r\n    const isHaveCheck = () => {\r\n        let masterCheckFlag = false;\r\n        let childCheckFlag = false;\r\n        let masterChecklen = Object.keys(transferTable.selected.selectedData.masterSelData).length;\r\n        let datalen = currentTable.outerData.length;\r\n        if (masterChecklen > 0 && masterChecklen < datalen) {\r\n            masterCheckFlag = true; //主表有选中项,且非全选\r\n        }\r\n        let childChecklen = Object.keys(transferTable.selected.selectedData.childSelData).length;\r\n        if (childChecklen > 0) {\r\n            childCheckFlag = true;\r\n        }\r\n        if (masterCheckFlag || childCheckFlag) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    //将当前页所有数据加入/取消已选择 flag: Boolean\r\n    const selectAllMaster = flag => {\r\n        let { outerData } = currentTable;\r\n        outerData.map((item, index) => {\r\n            let hValues = item.values || item;\r\n            if (!hValues.saga_status || hValues.saga_status.value !== '1') { // socket 错误数据过滤\r\n                switchMasterChecked(flag, item.values, item.values, index, true);\r\n            }\r\n        });\r\n    };\r\n\r\n    //============================================主表添加复选框==================================\r\n    //主表复选框全选点击事件 selAll: Boolean true为全部选中，false为全部取消\r\n    const onAllCheckChange = selAll => {\r\n        transferTable.selected.selectedData.selAll = selAll;\r\n        selectAllMaster(selAll);\r\n        this.state.transferTable[headTableId] = transferTable;\r\n        this.setState({ transferTable: this.state.transferTable });\r\n    };\r\n\r\n    /*主表复选框单个勾选\r\n     * @param {text} 暂时未发现用处，可console.log看看\r\n     * @param {record} Object  选中或取消当前行的数据\r\n     * @param {index} Number 选中或取消当前行的下标\r\n     * @param {bool} Boolean 控制回调函数是否执行\r\n     *\r\n     * */\r\n    const onCheckboxChange = (text, record, index, bool) => {\r\n        let curKey = record.headKey || record.key; //主子拉平取主表id\r\n        switchMasterChecked(!transferTable.selected.selectedData.masterSelData[curKey], text, record, index, bool);\r\n    };\r\n\r\n    //主表切换勾选状态 flag:开关状态，默认选中\r\n    const switchMasterChecked = (flag = true, text, record, index, bool) => {\r\n        let selected = transferTable.selected;\r\n        let selectedData = transferTable.selected.selectedData;\r\n        let bodyData = currentTable.bodyData.data;\r\n        let curKey = record.headKey || record.key; //主子拉平取主表id\r\n        let delBodyData;\r\n        //选中\r\n        if (flag) {\r\n            selectedData.masterSelData[curKey] = {\r\n                sel: true,\r\n                data: record,\r\n            };\r\n            // setAllSelVal('head', true, curKey); //多来源有全部页签需要单独统计已选数据\r\n            setAllSelectedValue({ record, parents: curKey, flag: true, type: 'head' });\r\n            let innerData = bodyData[curKey];\r\n            if (innerData) {\r\n                selectedData.childSelData[curKey] = {};\r\n                innerData.rows.map((item, index) => {\r\n                    selectedData.childSelData[curKey][item.values.key] = {\r\n                        sel: true,\r\n                        data: item,\r\n                    };\r\n                    // setAllSelVal('body', true, curKey, item.values.key);\r\n                });\r\n            }\r\n            setMasterId(curKey, true); //选择主表时记录主表id\r\n            //判断主表是否全选\r\n            if (isMasterCheckAll()) {\r\n                selectedData.selAll = true;\r\n            }\r\n        } else {\r\n            //移除\r\n            selectedData.selAll = false;\r\n            setMasterId(curKey, false);\r\n            // setAllSelVal('head', false, curKey); //多来源有全部页签需要单独统计已选数据\r\n            setAllSelectedValue({ record, flag: false, type: 'head' });\r\n\r\n            if (selectedData.masterSelData[curKey]) {\r\n                delete selectedData.masterSelData[curKey];\r\n            }\r\n            if (selectedData.childSelData[curKey]) {\r\n                delBodyData = selectedData.childSelData[curKey]; //记录被删除的子表数据\r\n                delete selectedData.childSelData[curKey];\r\n            }\r\n        }\r\n        let amountData = getAmount.call(this, transferTable);\r\n        selected.bodyAmount = amountData.bodyAmount;\r\n        selected.masterAmount = amountData.masterAmount;\r\n        this.state.transferTable[headTableId] = transferTable;\r\n        this.setState(\r\n            { transferTable: this.state.transferTable },\r\n            () => {\r\n                if (typeof bool === 'object' || bool === true) { // 控制回调方法是否执行 为了改已选列表移除的问题 NCCLOUD-163594\r\n                    let bdata = flag ? selectedData.childSelData[curKey] : delBodyData;\r\n                    let bodySelData = bdata ? Object.values(bdata).map(item => item.data.values || item.data) : []; //勾选主表获取子表数据\r\n                    onCheckedChange && onCheckedChange(flag, JSON.parse(JSON.stringify(record)), index, JSON.parse(JSON.stringify(bodySelData)));\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    /**\r\n     * 表格行选中状态获取\r\n     * @param {Array} childSelData \r\n     * @param {Array} masterSelData \r\n     * @param {Array} recordKey \r\n     * @param {Array} isFull  拉平\r\n     */\r\n    const getCheckedStatus = (childSelData = {}, masterSelData = {}, recordKey, isFull = false) => {\r\n        let bodyData = transferTable[headTableId].bodyData.data[recordKey], // 所有的body数据\r\n            status = 'empty';\r\n        // console.log(masterSelData, childSelData, bodyData, recordKey);\r\n\r\n        // 拉平时以子表为主 只有全选和不选\r\n        if (isFull) {\r\n            let ifff = (childSelData[recordKey] || (masterSelData && masterSelData[recordKey]));\r\n            return ifff ? 'full' : status;\r\n        }\r\n\r\n        // 主表是否存在这条数据\r\n        let res = masterSelData && masterSelData[recordKey];\r\n\r\n        // 子表是否存在这条数据\r\n        if (bodyData) {\r\n            for (let item of bodyData.rows) {\r\n                if (childSelData[item.childId]) {\r\n                    status = 'indeterminate';\r\n                } else {\r\n                    res = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return res ? 'full' : status;\r\n    };\r\n\r\n    //主子拉平切换勾选状态\r\n    const onCheckboxChangeFull = (text, record, index) => {\r\n        let selected = transferTable.selected;\r\n        let selectedData = transferTable.selected.selectedData;\r\n        let master = selectedData.childSelData[record.headKey];\r\n        // selectedData.childSelData[record.headKey][record.key] // 这个没有值\r\n        // master = master[record.key] ? master : null;\r\n        let outerData = transferTable[headTableId].outerData;\r\n        let bodyData = transferTable[headTableId].bodyData;\r\n        let nowItem = bodyData.data[record.headKey].rows.filter(item => {\r\n            return item.childId === record.key;\r\n        });\r\n        let masterVal = {};\r\n        for (let item of outerData) {\r\n            if (item.rowId === record.headKey) {\r\n                masterVal = item.values;\r\n            }\r\n        }\r\n        let allSelected = this.state.transferTable.allSelected && this.state.transferTable.allSelected.selectedData;\r\n        let flag = true;\r\n        // 1、如果bodyData找到当前数据 代表是子表的数据 并且 selected中找不到对应的childData \r\n        // 1、如果bodyData找不到当前数据 代表是无子表的数据 并且 selected 中找不到对应的masterSelData\r\n        let shouldChecked = (nowItem && nowItem[0] && (!master || !master[record.key])) || ((!nowItem || !nowItem[0]) && !selectedData.masterSelData[record.headKey]);\r\n\r\n        if (shouldChecked) {\r\n            // 处理一下不存在的问题\r\n            selectedData.childSelData[record.headKey] = selectedData.childSelData[record.headKey] || {};\r\n            nowItem && nowItem[0] && nowItem[0].values && (selectedData.childSelData[record.headKey][record.key] = {\r\n                sel: true,\r\n                data: nowItem[0].values,\r\n            });\r\n\r\n            selectedData.masterSelData[record.headKey] = {\r\n                sel: true,\r\n                data: masterVal,\r\n            };\r\n            //记录全部多来源主子拉平的勾选数据\r\n            if (allSelected) {\r\n                // 处理一下不存在的问题\r\n                allSelected.childSelData[record.headKey] = allSelected.childSelData[record.headKey] || {};\r\n                nowItem && nowItem[0] && nowItem[0].values && (allSelected.childSelData[record.headKey][record.key] = {\r\n                    sel: true,\r\n                    data: nowItem[0].values,\r\n                });\r\n\r\n                allSelected.masterSelData[record.headKey] = {\r\n                    sel: true,\r\n                    data: masterVal,\r\n                };\r\n\r\n                // 同步一下数据到 selectedData\r\n                // selectedData.childSelData[record.headKey] = allSelected.childSelData[record.headKey];\r\n                // selectedData.masterSelData[record.headKey] = allSelected.masterSelData[record.headKey];\r\n\r\n            }\r\n            setAllSelVal('body', true, record.headKey, record.key);\r\n            // 两种情况  要设置masterId\r\n            if (!master || bodyData.data[record.headKey].rows.length === Object.keys(selectedData.childSelData[record.headKey]).length) {\r\n                setMasterId && setMasterId(record.headKey, true);\r\n            }\r\n            //判断主表是否全选\r\n            if (isMasterCheckAll()) {\r\n                selectedData.selAll = true;\r\n                if (allSelected) {\r\n                    allSelected.selAll = true;\r\n                }\r\n            }\r\n        } else {\r\n            flag = false;\r\n            delete selectedData.childSelData[record.headKey][record.key];\r\n            let childAll = selectedData.childSelData[record.headKey];\r\n            if (Object.keys(childAll).length === 0) {\r\n                delete selectedData.childSelData[record.headKey];\r\n                delete selectedData.masterSelData[record.headKey];\r\n            }\r\n            selectedData.selAll = false;\r\n            //删除全部多来源主子拉平的勾选数据\r\n            if (allSelected) {\r\n                delete allSelected.childSelData[record.headKey][record.key];\r\n                let childAll = allSelected.childSelData[record.headKey];\r\n                if (Object.keys(childAll).length === 0) {\r\n                    delete allSelected.childSelData[record.headKey];\r\n                    delete allSelected.masterSelData[record.headKey];\r\n                }\r\n                allSelected.selAll = false;\r\n            }\r\n            setMasterId(record.headKey, false);\r\n            setAllSelVal('body', false, record.headKey, record.key);\r\n        }\r\n        let amountData = getAmount.call(this, transferTable);\r\n        selected.bodyAmount = amountData.bodyAmount;\r\n        selected.masterAmount = amountData.masterAmount;\r\n        this.state.transferTable[headTableId] = transferTable;\r\n\r\n        this.setState(\r\n            { transferTable: this.state.transferTable },\r\n            () => {\r\n                onCheckedChange && onCheckedChange(flag, JSON.parse(JSON.stringify(record)), index);\r\n            },\r\n        );\r\n    };\r\n\r\n    /**\r\n     * 获取数据\r\n     * @param {Array} outerData \r\n     * @param {Array} bodyData \r\n     */\r\n    const getTableData = (outerData, bodyData) => {\r\n        let head = [],\r\n            body = [];\r\n        for (let od of outerData) {\r\n            let hValues = od.values || od;\r\n            if (hValues.saga_status && hValues.saga_status.value == '1') { // socket 错误数据过滤\r\n                continue;\r\n            }\r\n            head.push(od.values || od);\r\n            if (bodyData.data && bodyData.data[od.rowId] && bodyData.data[od.rowId].rows) {\r\n                for (let item of bodyData.data[od.rowId].rows) {\r\n                    let bValues = item.values || item;\r\n                    if (bValues.saga_status && bValues.saga_status.value == '1') { // socket 错误数据过滤\r\n                        continue;\r\n                    }\r\n                    body.push(item.values || item);\r\n                }\r\n            }\r\n        }\r\n        return { body, head };\r\n    };\r\n\r\n    /**\r\n     * 转单表格表头和表体主表添加复选框列\r\n     * @param {*} columns \r\n     * @param {*Object} json 多语\r\n     */\r\n    const renderColumnsMultiSelect = (columns, json, indexColWidth = 80, tableType) => {\r\n        const { multiSelect } = defaultProps;\r\n        let showFullTable = transferTable[headTableId].showFullTable;\r\n        let headTableType = transferTable[headTableId].tableType;\r\n        // 添加的序号列\r\n        let indexCol = [\r\n            {\r\n                label: <span style={{ display: 'block', textAlign: 'left' }}>{json['page-transferTable-0007'] || '序号-3'}</span>,\r\n                attrcode: 'numberindex',\r\n                itemtype: 'customer',\r\n                dataIndex: 'numberindex',\r\n                visible: true,\r\n                width: showFullTable || headTableType==='simple' ? 45 : indexColWidth,\r\n                className: 'col-customer-numberindex',\r\n                render: (text, record, index) => {\r\n                    return <span style={{ display: 'block', textAlign: 'left' }}>{index + 1}</span>;\r\n                },\r\n            },\r\n        ];\r\n        let newColumn = [].concat(columns);\r\n\r\n        let checkboxDisabled = !transferTable[headTableId].outerData.length;\r\n        if (showMasterIndex) { // 已选列表时 不设置序号列  可能会有 展开的问题\r\n            newColumn = indexCol.concat(newColumn);\r\n        }\r\n        if (!showMasterIndex && tableType === 'selectedAndExpand') { // 已选列表 不设置序号 但是要设置 空列 放置展开按钮\r\n            newColumn = [\r\n                {\r\n                    label: <span style={{ display: 'block', textAlign: 'left' }} />,\r\n                    attrcode: 'numberindex',\r\n                    itemtype: 'customer',\r\n                    dataIndex: 'numberindex',\r\n                    visible: true,\r\n                    width: 30,\r\n                    className: 'col-customer-noindexcol',\r\n                    render: (text, record, index) => {\r\n                        return <span style={{ display: 'block', textAlign: 'left' }} />;\r\n                    },\r\n                },\r\n            ].concat(newColumn);\r\n        }\r\n        if (multiSelect && multiSelect.type === 'checkbox') {\r\n            let { isSelectAll: selAll, isIndeterminate: indeterminate } = iscludeCurrentData(transferTable, headTableId);\r\n            // (transferTable.selected.selectedData.selAll && Object.keys(transferTable.selected.selectedData.masterSelData).length\r\n            // console.log(indeterminate);\r\n            //复选框模板[{}]\r\n            newColumn.unshift({\r\n                /* 表头复选框*/\r\n                label: (\r\n                    <Checkbox\r\n                        className=\"table-checkbox\"\r\n                        disabled={checkboxDisabled}\r\n                        checked={selAll}\r\n                        // indeterminate={indeterminate && !selAll}\r\n                        indeterminate={indeterminate}//半选\r\n                        onChange={() => {\r\n                            onAllCheckChange.call(this, !selAll);\r\n                            if (!selAll) {\r\n                                //全选事件\r\n                                let { head: headData, body: bodyData } = getTableData(currentTable.outerData, currentTable.bodyData);\r\n                                onCheckedChange && onCheckedChange(!selAll, JSON.parse(JSON.stringify(headData)), 'all', JSON.parse(JSON.stringify(bodyData)));\r\n                            } else {\r\n                                //全消钩子函数\r\n                                if (typeof onClearAll === 'function') {\r\n                                    onClearAll();\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                ),\r\n                onCellClick: (record, e) => {\r\n                    let ck = record.key || record.headKey;\r\n                    let values = record.values || record;\r\n                    let index = -1;\r\n                    (currentTable.outerData || []).some((item, i) => {\r\n                        let values = item.values || item;\r\n                        if ((values.key || values.headKey) === ck) {\r\n                            index = i;\r\n                            return true;\r\n                        }\r\n                    });\r\n                    if (index == -1 || (values && values.saga_status && values.saga_status.value === '1')) {\r\n                        return;\r\n                    }\r\n                    // console.log(index, 'xxxxx');\r\n                    showFullTable ? onCheckboxChangeFull.call(this, '', record, index) : onCheckboxChange.call(this, '', record, index)\r\n                },\r\n                attrcode: 'checkbox',\r\n                itemtype: 'customer',\r\n                dataIndex: 'checkbox',\r\n                visible: true,\r\n                width: showFullTable || headTableType==='simple'? 54 : 80,\r\n                fixed: 'left',\r\n                className: 'col-customer-checkbox',\r\n                render: (text, record, index) => { //表体主表复选框\r\n                    let ck = record.key || record.headKey, // 当前的key  拉平的时候子表的主键为主\r\n                        childSelData = transferTable.selected.selectedData.childSelData,\r\n                        masterSelData = transferTable.selected.selectedData.masterSelData,\r\n                        checkedStatus = getCheckedStatus(childSelData[record.headKey || record.key], masterSelData, ck, showFullTable);\r\n                    // console.log(record, childSelData, masterSelData);\r\n                    // Socket改造\r\n                    // let { billpkname, billtype, errorViewType } = this.nativeSocketBillInfo;\r\n                    let values = record.values || record;\r\n                    return values && values.saga_status && values.saga_status.value === '1' ? (\r\n                        <ErrorPop\r\n                            record={record}\r\n                        />\r\n                    ) : (\r\n                            <Checkbox\r\n                                className=\"table-checkbox\"\r\n                                checked={checkedStatus === 'full'}\r\n                                indeterminate={checkedStatus === 'indeterminate'}\r\n                                onClick={showFullTable ? onCheckboxChangeFull.bind(this, text, record, index) : onCheckboxChange.bind(this, text, record, index)}\r\n                            />\r\n                        );\r\n\r\n                },\r\n            });\r\n        }\r\n        return newColumn;\r\n    };\r\n\r\n    /*\r\n     * 子表添加复选框列和序号\r\n     * @param {Array} columns 渲染子表的每一列的属性数据 [{},{},...] \r\n     * @param {*} records \r\n     * @param {*} indexs \r\n     * @param {*} comType \r\n     * @param {*} json \r\n     */\r\n    const renderColumnsMultiSelectChild = (columns, records, indexs, comType, json) => {\r\n        let { multiSelect } = defaultProps;\r\n        let indexCol = [\r\n            {\r\n                label: <span bbq=\"已选展开列序号\" style={{ display: 'block', textAlign: 'left' }}>{json['page-transferTable-0007'] || '序号-2'}</span>,\r\n                attrcode: 'numberindex',\r\n                itemtype: 'customer',\r\n                dataIndex: 'numberindex',\r\n                visible: true,\r\n                width: 70,\r\n                className: 'col-customer-numberindex',\r\n                render: (text, record2, index) => {\r\n                    return (<span style={{ display: 'block', textAlign: 'left' }} >{index + 1}</span>);\r\n                },\r\n            },\r\n        ]; // 添加序号列\r\n        let newColumn = columns;\r\n        let oprationLabel = json['page-transferTable-0006'] ? json['page-transferTable-0006'] : '操作-4';\r\n        /*国际化处理 操作*/\r\n        if (showChildIndex) {\r\n            newColumn = indexCol.concat(newColumn);\r\n        }\r\n\r\n        //  根据组件类型，判断是否带复选框  // 按逻辑看 这里永远不会走\r\n        if (comType == 'hasCheckBox_child') {\r\n            if (multiSelect && multiSelect.type === 'checkbox') {\r\n                let parId = transferTable.selected.selectedData.childSelData[records.key];\r\n                // 主表有状态 那么子表就不需要状态 saga\r\n                let pValues = records.values || records;\r\n                let pSaga_status = pValues && pValues.saga_status && pValues.saga_status.value === '1';\r\n\r\n                let defaultColumns = [\r\n                    {\r\n                        label: '',\r\n                        attrcode: 'checkbox',\r\n                        itemtype: 'customer',\r\n                        dataIndex: 'checkbox',\r\n                        width: 40,\r\n                        className: 'col-customer-checkbox',\r\n                        fixed: 'left',\r\n                        visible: true,\r\n                        onCellClick: (record, e) => {\r\n                            let ck = record.key;\r\n                            let values = record.values || record;\r\n                            let index = -1;\r\n                            let bodyData = ((currentTable.bodyData.data || {})[records.key] || {}).rows || [];\r\n\r\n                            bodyData.some((item, i) => {\r\n                                let values = item.values || item;\r\n                                if (values.key === ck) {\r\n                                    index = i;\r\n                                    return true;\r\n                                }\r\n                            });\r\n\r\n                            // console.log(bodyData, index, 'xxxxx');\r\n\r\n                            if (index == -1 || pSaga_status || (values && values.saga_status && values.saga_status.value === '1')) {\r\n                                return;\r\n                            }\r\n                            onCheckboxChangeChild.call(this, '', record, index, records, indexs)\r\n                        },\r\n                        render: (text, record, index) => {\r\n                            // Socket改造\r\n                            //let { billpkname, billtype, errorViewType } = this.nativeSocketBillInfo;\r\n\r\n                            let values = record.values || record;\r\n                            return (values && values.saga_status && values.saga_status.value === '1') || pSaga_status ? (\r\n                                <ErrorPop\r\n                                    record={record}\r\n                                />\r\n                            ) : (\r\n                                    <Checkbox\r\n                                        className=\"table-checkbox\"\r\n                                        checked={!!(parId && parId[record.key])}\r\n                                        onChange={onCheckboxChangeChild.bind(this, text, record, index, records, indexs)}\r\n                                    />\r\n                                );\r\n                        },\r\n                    },\r\n                ];\r\n                newColumn = defaultColumns.concat(newColumn);\r\n            }\r\n        } else if (comType == 'selectedList' && defaultOperateColumnHidden !== true) { // 部分情况下  用户期望移除子表操作列\r\n            //已选列表增加操作列\r\n            let oprColumn = {\r\n                label: <span> {oprationLabel} </span>,\r\n                attrcode: 'operate',\r\n                itemtype: 'customer',\r\n                dataIndex: 'operate',\r\n                width: 100,\r\n                //fixed: \"right\",\r\n                visible: true,\r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <div\r\n                            className=\"row-remove\"\r\n                            bbq=\"子表移除\"\r\n                            onClick={() => {\r\n                                //移除子表\r\n                                onSelectedItemRemove && onSelectedItemRemove(record);\r\n                                onCheckboxChangeChild(text, record, index, records, index, true, false);\r\n                            }}\r\n                        >\r\n                            {json['page-transferTable-0001'] || '移除'}{/*国际化处理 移除*/}\r\n                        </div>\r\n                    );\r\n                },\r\n            };\r\n            newColumn = [...newColumn, oprColumn];\r\n        }\r\n\r\n        return newColumn;\r\n    };\r\n\r\n    //已选列表主子拉平移除\r\n    const clearSelectedFullData = (text, record, index, bool) => {\r\n        let selected = transferTable.selected;\r\n        let selectedData = transferTable.selected.selectedData;\r\n        let childId = this.state.transferTable[headTableId][headTableId].childId;\r\n        let headId = record.headKey;//转单主表id\r\n        let bodyId = record[childId].value;//转单子表id\r\n        delete selectedData.childSelData[headId][bodyId];\r\n        let childAll = selectedData.childSelData[headId];\r\n        if (Object.keys(childAll).length === 0) {\r\n            delete selectedData.childSelData[headId];\r\n            delete selectedData.masterSelData[headId];\r\n        }\r\n        setAllSelVal('body', false, headId, bodyId); //多来源有全部页签需要单独统计已选数据\r\n        selectedData.selAll = false;\r\n        setMasterId(headId, false);\r\n        this.state.transferTable[headTableId] = transferTable;\r\n        let amountData = getAmount.call(this, transferTable);\r\n        selected.bodyAmount = amountData.bodyAmount;\r\n        selected.masterAmount = amountData.masterAmount;\r\n        this.setState({ transferTable: this.state.transferTable });\r\n    };\r\n\r\n    //已选列表清空事件\r\n    const handleClearAllSelected = () => {\r\n        let allSelected = this.state.transferTable.allSelected;\r\n        if (allSelected) {\r\n            allSelected.masterCheckedId = []; //清空已选主表id\r\n            allSelected.selectedData.selAll = false; //取消全选\r\n            allSelected.selectedData.masterSelData = {};\r\n            allSelected.selectedData.childSelData = {};\r\n            allSelected.masterAmount = 0;\r\n            allSelected.bodyAmount = 0;\r\n            allSelected.selIds = {};\r\n        }\r\n        transferTable.selected.masterCheckedId = []; //清空已选主表id\r\n        transferTable.selected.selectedData.selAll = false; //取消全选\r\n        transferTable.selected.selectedData.masterSelData = {};\r\n        transferTable.selected.selectedData.childSelData = {};\r\n        transferTable.selected.masterAmount = 0;\r\n        transferTable.selected.bodyAmount = 0;\r\n        this.setState(\r\n            { transferTable: this.state.transferTable },\r\n            () => {\r\n                onClearAll && onClearAll();\r\n            },\r\n        );\r\n    };\r\n\r\n    if (data && currentTable.firstTime) {\r\n        currentTable.firstTime = false;\r\n    }\r\n\r\n    //  根据组件类型，判断是否带复选框\r\n    let column = columns;\r\n    let classByType = null;\r\n    if (comType == 'hasCheckBox' || comType == 'hasCheckBox_child') {\r\n        classByType = 'hasCheckBox';\r\n    }\r\n\r\n    /**\r\n     * 陈顺风  还款单\r\n     * @param {*} item \r\n     * @param {*} value \r\n     * @param {*} index \r\n     * @param {*} outerRecordKey \r\n     * @param {*Object} record  被编辑行的全部数据\r\n     * @param {*} scale 精度\r\n     */\r\n    const editableJSX = (item, value, index, outerRecordKey, record, scale) => {\r\n        switch (item.itemtype) {\r\n            case 'number':\r\n                return (\r\n                    <NCNumber\r\n                        value={value}\r\n                        scale={scale}\r\n                        autoFocus={true}\r\n                        onChange={newValue => {\r\n                            // 因为需要在onblur的时候传输入框初始值给业务组，所以需判断初始值是否被保存过，如果没有保存过，则将初始值保存\r\n                            if (!this.myState.transferTableEditOldValueIsSaved) {\r\n                                this.myState.transferTableEditOldValueIsSaved = true;\r\n                                this.myState.transferTableEditOldValue = value;\r\n                            }\r\n                            // 实时更新数据， 以防鼠标滑动导致表格重新渲染的时候输入框的值还原回去\r\n                            let transferTable = this.state.transferTable;\r\n                            let itemValueObj = null;\r\n                            if (outerRecordKey) {\r\n                                itemValueObj = transferTable[headTableId][headTableId].bodyData.data[outerRecordKey].rows[index].values[item.attrcode];\r\n                            } else {\r\n                                itemValueObj = transferTable[headTableId][headTableId].outerData[index].values[item.attrcode];\r\n                            }\r\n                            itemValueObj.value = newValue;\r\n                        }}\r\n                        onBlur={newValue => {\r\n                            // 在鼠标脱焦后 将输入框的值保存状态初始化为false，以待下次编辑的时候出发onChange使用\r\n                            this.myState.transferTableEditOldValueIsSaved = false;\r\n                            let transferTable = this.state.transferTable;\r\n                            let itemValueObj = null;\r\n                            if (outerRecordKey) {\r\n                                itemValueObj = transferTable[headTableId][headTableId].bodyData.data[outerRecordKey].rows[index].values[item.attrcode];\r\n                            } else {\r\n                                itemValueObj = transferTable[headTableId][headTableId].outerData[index].values[item.attrcode];\r\n                            }\r\n                            let oldValue = this.myState.transferTableEditOldValue;\r\n                            itemValueObj.isEdit = false;\r\n                            itemValueObj.value = formatDot(newValue, scale);\r\n                            record[item.attrcode].value = newValue;\r\n                            if (transferTable &&\r\n                                headTableId &&\r\n                                transferTable[headTableId] &&\r\n                                transferTable[headTableId].selected &&\r\n                                transferTable[headTableId].selected.selectedData &&\r\n                                transferTable[headTableId].selected.selectedData.childSelData &&\r\n                                record &&\r\n                                record.key &&\r\n                                record.parentRowId &&\r\n                                transferTable[headTableId].selected.selectedData.childSelData[record.parentRowId] &&\r\n                                transferTable[headTableId].selected.selectedData.childSelData[record.parentRowId][record.key] &&\r\n                                transferTable[headTableId].selected.selectedData.childSelData[record.parentRowId][record.key].data &&\r\n                                item &&\r\n                                item.attrcode &&\r\n                                transferTable[headTableId].selected.selectedData.childSelData[record.parentRowId][record.key].data[item.attrcode]\r\n                            ) {\r\n                                transferTable[headTableId].selected.selectedData.childSelData[record.parentRowId][record.key].data[item.attrcode].value = newValue;\r\n                            }\r\n                            record[item.attrcode].isEdit = false;\r\n                            if (typeof afterEvent === 'function') {\r\n                                afterEvent(item.attrcode, newValue, record, index, oldValue);\r\n                            }\r\n                            this.setState(\r\n                                { transferTable: transferTable },\r\n                            );\r\n                        }}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n                return <span>{value}</span>;\r\n                break;\r\n        }\r\n    };\r\n\r\n    // 'switch' 根据value显示 ’是‘或 ’否‘\r\n    const switchValue = (value, json) => {\r\n        if (value) {\r\n            return (json && json['page-transferTable-0020']) || '是';\r\n        } else {\r\n            return (json && json['page-transferTable-0021']) || '否';\r\n        }\r\n    };\r\n\r\n    // 用来处理number类型的值的精度的 data是值， scal为精度\r\n    const getScaleData = (data, scal) => {\r\n        let value = String(data).replace(/,/g, '');\r\n        let scale = Number(scal);\r\n        if (value) {\r\n            let len = scale >= 0 ? value.split('.')[0].length + scale + 1 : value.split('.')[0].length;\r\n            if (value.indexOf('.') !== -1) {\r\n                let arr = value.split('.');\r\n                if (!Number.isNaN(scale) && scale !== -1) {\r\n                    if (scale === 0) {\r\n                        value = String(value).split('.')[0];\r\n                    } else {\r\n                        value = String(value).padEnd(len, '0');\r\n                    }\r\n                }\r\n            } else {\r\n                if (!Number.isNaN(scale) && scale !== -1) {\r\n                    if (scale === 0) {\r\n                        value = String(value);\r\n                    } else {\r\n                        let str = value + '.';\r\n                        value = str.padEnd(Number(len), '0');\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n        return commafy(value);\r\n    };\r\n\r\n    // 获取 表格的排序状态\r\n    const getColumnsSortStatus = (column, outerRecordKey) => {\r\n        let transferTable = this.state.transferTable,\r\n            currentTransferTable = transferTable[headTableId],\r\n            currentTable = currentTransferTable[headTableId],\r\n            selectedTable = currentTransferTable.selected,\r\n            allSelectedTable = transferTable.allSelected,\r\n            sortParam = [],\r\n            res = {\r\n                order: 'flatscend',\r\n                orderNum: '',\r\n            };\r\n\r\n        // 判断表格类型 判断表格状态\r\n        if (selectedTable.selectedShow || allSelectedTable.selectedShow) {\r\n            if (currentTable.showFullTable || allSelectedTable.showFullTable) {\r\n                sortParam = selectedTable.fullSortInfoObj || currentTransferTable.sortInfoObj || [];\r\n            } else if (outerRecordKey) {\r\n                sortParam = (selectedTable[outerRecordKey] && selectedTable[outerRecordKey].childSortInfoObj) || [];\r\n            } else {\r\n                sortParam = selectedTable.mainSortInfoObj || currentTransferTable.sortInfoObj || [];\r\n            }\r\n        } else {\r\n            if (currentTable.showFullTable || allSelectedTable.showFullTable) {\r\n                sortParam = currentTable.fullSortInfoObj || currentTransferTable.sortInfoObj || [];\r\n            } else if (outerRecordKey) {\r\n                sortParam = (currentTable[outerRecordKey] && currentTable[outerRecordKey].childSortInfoObj) || [];\r\n            } else {\r\n                sortParam = currentTable.mainSortInfoObj || currentTransferTable.sortInfoObj || [];\r\n            }\r\n        }\r\n\r\n        sortParam.forEach(item => {\r\n            if (column.attrcode === item.field) {\r\n                res.order = item.order;\r\n                res.orderNum = item.orderNum;\r\n                res.field = item.field;\r\n                res.isSort = true;\r\n            }\r\n        });\r\n        // res.isSort && console.log(res, sortParam);\r\n        return res;\r\n    };\r\n\r\n    // 处理模板 在模板数据上加checkbox、序号或者操作列\r\n    /*\r\n    * column： 原模板数据\r\n    * outerRecordKey： 主表 行数据的的主键\r\n    * expander： 最后一行是否要固定\r\n    * json： 多语资源\r\n    *\r\n    * */\r\n    const createNewCol = ({ column, outerRecordKey, bool, expander, columnType, json }) => {\r\n\r\n        let result = [];\r\n        let pageId = currentPageId || (this.state && this.state.meta.pageid);\r\n        if (expander && column.length && column[column.length - 1].attrcode === 'operate') {\r\n            column[column.length - 1].fixed = 'right';\r\n        }\r\n        column.map(item => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let orderStatus = getColumnsSortStatus(item, outerRecordKey);\r\n            if (orderStatus.order) {\r\n                item.order = orderStatus.order;\r\n                item.orderNum = orderStatus.orderNum;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                item.dataIndex = item.attrcode;\r\n                render = (text, record, index) => {\r\n                    let hyperlinkflag = item.hyperlinkflag;\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let recordScale = record[item.attrcode].scale ? record[item.attrcode].scale : item.scale ? item.scale : 0;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n                        if (isTimeType(item.itemtype)) { //时区类型的控件\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype == 'switch') {\r\n                            dom = switchValue(value, json);\r\n                        } else if (item.itemtype == 'checkbox_switch') {\r\n                            dom = checkboxSwitchValue(value, editStatus, json);\r\n                        }\r\n                        let isEdit = record[item.attrcode].isEdit;\r\n                        let disabled = item.disabled;\r\n                        let realScale = recordScale;\r\n                        if (recordScale === '-1' && dom) {\r\n                            let arr = String(dom).split('.');\r\n                            if (arr.length && arr[1]) realScale = arr[1].length;\r\n                        }\r\n                        if (editStatus) {\r\n                            let domShow = dom;\r\n                            if (item.itemtype === 'number') {\r\n                                let val = formatDot(dom, recordScale);\r\n                                domShow = formatAcuracy(val, realScale);\r\n                                domShow = formatNumber(domShow);\r\n                            }\r\n\r\n                            return isEdit && !disabled ? (\r\n                                <div\r\n                                    fieldid={getSysFieldid(item.attrcode)}\r\n                                    className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}\r\n                                >\r\n                                    {editableJSX(item, dom, index, outerRecordKey, record, realScale)}\r\n                                </div>\r\n                            ) : (\r\n                                    <span\r\n                                        className={\r\n                                            classnames({\r\n                                                'number-td-span-wrapper editor-td-span-wrapper': item.itemtype === 'number',\r\n                                                'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                                'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                            })\r\n                                        }\r\n                                        fieldid={getSysFieldid(item.attrcode)}\r\n                                        // 会导致行高不是标准30\r\n                                        // style={{ display: 'inline-block', width: '100%', height: '28px', lineHeight: '28px' }}\r\n                                        onClick={() => {\r\n                                            if (editableItem && !editableItem.includes(item.attrcode)) {\r\n                                                return;\r\n                                            }\r\n                                            let transferTable = this.state.transferTable;\r\n                                            if (outerRecordKey) {\r\n                                                transferTable[headTableId][headTableId].bodyData.data[outerRecordKey].rows[\r\n                                                    index\r\n                                                ].values[item.attrcode].isEdit = true;\r\n                                            } else {\r\n                                                transferTable[headTableId][headTableId].outerData[index].values[\r\n                                                    item.attrcode\r\n                                                ].isEdit = true;\r\n                                            }\r\n                                            this.setState({ transferTable });\r\n                                        }}\r\n                                    >\r\n                                        <EllipsisToTooltip overlay={domShow} >\r\n                                            <span>\r\n                                                {domShow}\r\n                                            </span>\r\n                                        </EllipsisToTooltip>\r\n                                    </span>\r\n                                );\r\n                        } else {\r\n                            if (item.itemtype === 'number') {\r\n                                dom = formatDot(dom, recordScale);\r\n                                dom = formatAcuracy(dom, realScale);\r\n                                dom = formatNumber(dom);\r\n                            }\r\n                            return (\r\n                                <span\r\n                                    className={\r\n                                        classnames({\r\n                                            'number-td-span-wrapper': item.itemtype === 'number',\r\n                                            'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                            'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        })\r\n                                    }\r\n                                    fieldid={getSysFieldid(item.attrcode)}\r\n                                >\r\n                                    <EllipsisToTooltip overlay={dom}>\r\n                                        {hyperlinkflag && dom ? (\r\n                                            <a\r\n                                                href=\"javascript:;\"\r\n                                                className={'hyper-link'}\r\n                                                onClick={e => {\r\n                                                    e.stopPropagation();\r\n                                                    let moduleId = columnType === 'child' ? bodyTableId : columnType === 'full' ? fullTableId : headTableId;\r\n\r\n                                                    let metaAreaPageId = pageId;\r\n                                                    if (this.state && this.state.meta && this.state.meta[moduleId] && this.state.meta[moduleId].pageid) {\r\n                                                        metaAreaPageId = this.state.meta[moduleId].pageid;\r\n                                                    }\r\n                                                    linkTo(metaAreaPageId, moduleId, item.attrcode, value || dom);\r\n                                                }}\r\n                                            >\r\n                                                {dom}\r\n                                            </a>\r\n                                        ) : (<span>{dom}&nbsp;</span>)}\r\n\r\n                                    </EllipsisToTooltip>\r\n                                </span>\r\n                            );\r\n                        }\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index,\r\n                                )}\r\n                                noEllipsis\r\n                            >\r\n                                <div\r\n                                    className={classnames(\r\n                                        'col-customer-render-unit',\r\n                                        {\r\n                                            'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                            'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        })\r\n                                    }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        );\r\n                    };\r\n                }\r\n            }\r\n            if (item.visible) {\r\n                result.push({\r\n                    ...item,\r\n                    render,\r\n                    width,\r\n                    key: item.attrcode,\r\n                    dataIndex: item.dataIndex || item.attrcode,\r\n                    title:\r\n                        <span\r\n                            className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : 'text-td-span-wrapper'}`}\r\n                            style={{ color: defaultColor.includes(item.color) ? '' : item.color }}\r\n                            fieldid={getSysFieldid(item.attrcode)}\r\n                        >\r\n                            {item.label}\r\n                        </span>,\r\n                });\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n\r\n    // 设置数据\r\n    const createNewData = (data, columns) => {\r\n        let datas = [];\r\n        data.map((val, index) => {\r\n            val = val.values || val;\r\n            for (let item of Object.keys(val)) {\r\n                let itemData = val[item];\r\n                if (itemData && typeof itemData === 'object' && itemData.hasOwnProperty('scale')) {\r\n                    val[item].value = formatDot(itemData.value, val[item].scale);\r\n                }\r\n            }\r\n            // datas.push(JSON.parse(JSON.stringify(val)));\r\n            datas.push(val);\r\n        });\r\n        return datas;\r\n    };\r\n\r\n    // 保留合计的最长小数位精度 nowVal: 当前要加的值， totalVal： 之前合计好的值\r\n    const getTheLongestPrecision = (nowVal, totalVal) => {\r\n        if (nowVal === '' || nowVal === null || nowVal === 'null') {\r\n            return totalVal;\r\n        }\r\n        let nowValArr = String(nowVal).split('.');\r\n        let totalValArr = String(totalVal).split('.');\r\n        let nowValLen = nowValArr.length >= 2 ? String(nowValArr[1]).length : 0;\r\n        let totalValLen = totalValArr.length >= 2 ? String(totalValArr[1]).length : 0;\r\n        let addVal = Number.parseFloat(totalVal);\r\n        if (typeof Number(nowVal) === 'number' && !Number.isNaN(Number(nowVal))) {\r\n            nowVal = thounsandTransfer(nowVal, 'number');\r\n            totalVal = thounsandTransfer(totalVal, 'number');\r\n            addVal = Number.parseFloat(nowVal) + Number.parseFloat(Number(totalVal));\r\n        } else {\r\n            return totalVal;\r\n        }\r\n\r\n        let addValArr = String(addVal).split('.');\r\n        let addValLen = addValArr.length >= 2 ? String(addValArr[1]).length : 0;\r\n        if (totalValLen >= nowValLen) {\r\n            let zeroO = '';\r\n            for (let i = 0; i < totalValLen - addValLen; i++) {\r\n                zeroO += '0';\r\n            }\r\n            let bool = String(addVal).includes('.') ? `${addVal}${zeroO}` : `${addVal}.${zeroO}`;\r\n            return Number(bool).toFixed(totalValLen);\r\n        } else {\r\n            let zeroO = '';\r\n            for (let i = 0; i < nowValLen - addValLen; i++) {\r\n                zeroO += '0';\r\n            }\r\n            let bool = String(addVal).includes('.') ? `${addVal}${zeroO}` : `${addVal}.${zeroO}`;\r\n            return Number(bool).toFixed(nowValLen);\r\n        }\r\n    };\r\n\r\n    /*\r\n    * 创建合计行表格的模板\r\n    * column： 模板数据\r\n    * showIndex： 是否显示序号\r\n    * json： 多语json\r\n    * */\r\n    const createSelectColumns = (column, showIndex, json, isChild) => {\r\n        let result = [];\r\n        result.push({\r\n            label: <span />,\r\n            attrcode: 'checkbox',\r\n            itemtype: 'customer',\r\n            fixed: 'left',\r\n            dataIndex: 'checkbox',\r\n            visible: true,\r\n            width: isChild ? 70 : 80,\r\n            className: 'col-customer-checkbox col-customer-total',\r\n            render: (text, record, index) => {\r\n                return <span title={json['page-transferTable-0010'] || '合计-1'}>{json['page-transferTable-0010'] || '合计-1'}</span>;\r\n            },\r\n        });\r\n        column.map(item => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                render = (text, record, index) => {\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n                        if (isTimeType(item.itemtype)) {\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype === 'number') {\r\n                            dom = formatNumber(dom);\r\n                        }\r\n                        return (\r\n                            <span className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}>\r\n                                <EllipsisToTooltip overlay={dom}>\r\n                                    <span\r\n                                        className={classnames({\r\n                                            'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                            'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        })}>\r\n                                        {dom}&nbsp;</span>\r\n                                </EllipsisToTooltip>\r\n                            </span>\r\n                        );\r\n\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                inverse={true}\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index,\r\n                                )}\r\n                                noEllipsis\r\n                            >\r\n                                <div\r\n                                    className={classnames(\r\n                                        'col-customer-render-unit',\r\n                                        {\r\n                                            'single-line-and-ellipsis': this.state.transferTable[headTableId]['isEllipsis'],\r\n                                            'three-line-and-ellipsis': !this.state.transferTable[headTableId]['isEllipsis'],\r\n                                        })\r\n                                    }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        );\r\n                    };\r\n                }\r\n            }\r\n            if (item.visible && item.attrcode !== 'checkbox' && item.attrcode !== 'numberindex') {\r\n                result.push({ ...item, render, width, key: item.attrcode, title: item.label });\r\n            }\r\n        });\r\n        if (result[1] && !showIndex) {\r\n            // result[1].width =  result[1].width -20\r\n        }\r\n        if (defaultOperateColumnHidden !== true) {\r\n            result.push({\r\n                label: <span>{json['page-transferTable-0006'] || '操作-2'}</span>, /*国际化处理 操作*/\r\n                attrcode: 'operate',\r\n                itemtype: 'customer',\r\n                fixed: 'right',\r\n                dataIndex: 'operate',\r\n                visible: true,\r\n                width: 100,\r\n                render: (text, record, index) => {\r\n                    return <span>&nbsp;</span>;\r\n                },\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /*\r\n    * 计算合计数据\r\n    * data 选中的整体数据\r\n    * column： 模板数据\r\n    * record： 展开行的主表数据\r\n    * */\r\n    const processingTotalDataChild = (data, column, record) => {\r\n        let key = record.key;\r\n        let childData = data[key];\r\n        let outerData = {};\r\n        let totalKey = [];\r\n        let totalScale = {};\r\n\r\n        for (let item of column) {\r\n            outerData[item['attrcode']] = { value: '', display: '' };\r\n            if (item.istotal && item.itemtype === 'number') {\r\n                totalKey.push(item.attrcode);\r\n                totalScale[item.attrcode] = item.scale;\r\n            }\r\n        }\r\n        if (childData) {\r\n            for (let items of Object.keys(childData)) {\r\n                let values = childData[items].data.values || childData[items].data;\r\n                for (let i of totalKey) {\r\n                    if (values[i] && typeof values[i] === 'object') {\r\n                        let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n                        let value = values[i] ? String(values[i].value) ? String(values[i].value).replace(/,/g, '') : 0 : 0;\r\n                        if (!outerData[i].value) {\r\n                            outerData[i].scale = scale;\r\n                            outerData[i].value = getScaleData(value, scale);\r\n                        } else {\r\n                            let totalData = sum(Number.parseFloat(value), Number.parseFloat(String(outerData[i].value).replace(/,/g, '')));\r\n                            outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                            outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        return [outerData];\r\n    };\r\n\r\n    //表格展开显示的内容\r\n    //渲染子表表格数据及复选框\r\n    const expandedRowRender = (record, index, comType, json) => {\r\n        let newColumn = bodyColumn;\r\n        let { showChildIndex, sortType } = this.props;\r\n        let isTotal = this.myState.status.bodyTotalStatusOfTransferTable;\r\n        let curKey = record.headKey || record.key;\r\n        let TotalDataChild = processingTotalDataChild.call(\r\n            this,\r\n            transferTable.selected.selectedData.childSelData,\r\n            newColumn,\r\n            record,\r\n        );\r\n        if (newColumn instanceof Array && newColumn.length > 0) {\r\n            newColumn = renderColumnsMultiSelectChild.call(this, newColumn, record, index, comType, json);\r\n            if ((currentTable.bodyData && Object.keys(currentTable.bodyData).length && currentTable.bodyData.data.hasOwnProperty(curKey)) || (\r\n                transferTable && transferTable.selected && transferTable.selected.selectedData && comType === 'selectedList'\r\n            )) {\r\n                let data = null,\r\n                    expandTableHeight = 0,\r\n                    $thisDom = ReactDOM.findDOMNode(this);\r\n                let expandTableBodyHeight = 0;//展开子表表体的高度\r\n                //已选列表的子表移除时需要删除行数据\r\n                if (comType === 'selectedList') {\r\n                    data = createNewData(\r\n                        Object.values(transferTable.selected.selectedData.childSelData[curKey] || {}).map(\r\n                            item => item.data,\r\n                        ),\r\n                    );\r\n                    $thisDom = $thisDom.querySelector('.selected-list-wrapper') || $thisDom;\r\n                } else {\r\n                    data = createNewData(\r\n                        currentTable.bodyData.data[record.key].rows || currentTable.bodyData.data[record.key],\r\n                    );\r\n                }\r\n                expandTableHeight = getExpandTableHeight(data, isTotal, $thisDom);\r\n                expandTableBodyHeight = getExpandTableHeight(data, isTotal, $thisDom, true);\r\n                let width = getTableWidth('selected-list');\r\n                return (\r\n                    <div className=\"transfertable-expand-wraper\" style={{ height: `${expandTableHeight}px`, width: '100%' }}>\r\n                        <ComplexTable\r\n                            columns={createNewCol({ column: newColumn, outerRecordKey: curKey, expander: true, columnType: 'child', json })}\r\n                            data={data}\r\n                            isTotal={isTotal}\r\n                            isDrag={isDrag}\r\n                            lazyload={true}\r\n                            totalBodyHeight={30}\r\n                            totalData={TotalDataChild}\r\n                            totalColumns={createSelectColumns.call(this, bodyColumn, showChildIndex, json, true)}\r\n                            scroll={{ x: true, y: expandTableBodyHeight || 300 }}\r\n                            sort={sortType}\r\n                            updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                            bodyStyle={{ minHeight: '30px' }}\r\n                            tableType='transfer'\r\n                            //折行回调\r\n                            foldingRowChange={isEllipsis => {\r\n                                this.state.transferTable[headTableId]['isEllipsis'] = isEllipsis\r\n                                this.setState({ transferTable: this.state.transferTable })\r\n                            }}\r\n                            bodyDisplayInRow={this.state.transferTable[headTableId]['isEllipsis']}\r\n                            colsSettingParam={getcolsSettingParam.call(this, this.state.meta, bodyTableId)}\r\n                            cancelCustomRightMenu={cancelCustomRightMenu}\r\n                        />\r\n                    </div>\r\n\r\n                );\r\n            }\r\n        }\r\n        console.log('没有找到子表数据呀！！');\r\n        return <div />;\r\n    };\r\n\r\n    //设置已选列表columns\r\n    /*\r\n    * json: 多语\r\n    * isFull：判断已选列表的表格是否是主子拉平表\r\n    * */\r\n    const setSelectedColumns = (columns, json = {}, isFull) => {\r\n        let result = [];\r\n        let bool = currentTable.showFullTable || tableType === 'simple';\r\n        let label = json['page-transferTable-0006'] ? json['page-transferTable-0006'] : '操作-3';\r\n        /*国际化处理 操作*/\r\n        let operateColumn = bool ? {\r\n            title: <span>{label}</span>,\r\n            attrcode: 'operate',\r\n            itemtype: 'customer',\r\n            dataIndex: 'operate',\r\n            width: 100,\r\n            fixed: 'right',\r\n            visible: true,\r\n            render: (text, record, index) => {\r\n                return (\r\n                    <div\r\n                        className=\"row-remove\"\r\n                        onClick={() => {\r\n                            //移除主表\r\n                            let selData = this.state.transferTable[headTableId].selected.selectedData;\r\n                            let tableType = this.state.transferTable[headTableId][headTableId].tableType;\r\n                            let childSelData = selData.childSelData[record.key] || selData.childSelData[record.headKey];\r\n                            let bodys = [];\r\n                            if (childSelData) {\r\n                                for (let headKey of Object.keys(childSelData)) {\r\n                                    // liuyjv修改解决返回数据不一致bug\r\n                                    bodys.push(childSelData[headKey].data.values ? childSelData[headKey].data.values : childSelData[headKey].data);\r\n                                }\r\n                            }\r\n                            onSelectedItemRemove && onSelectedItemRemove(record, isFull ? [] : bodys);\r\n                            !currentTable.showFullTable\r\n                                ? onCheckboxChange(text, record, index, true)\r\n                                : clearSelectedFullData(text, record, index, true);\r\n                        }}\r\n                    >\r\n                        {json['page-transferTable-0001'] || '移除'}{/*国际化处理 移除*/}\r\n                    </div>\r\n                );\r\n            },\r\n        } : {\r\n                title: label,\r\n                attrcode: 'operate',\r\n                itemtype: 'customer',\r\n                dataIndex: 'operate',\r\n                width: 100,\r\n                visible: true,\r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <div\r\n                            className=\"row-remove\"\r\n                            // href=\"javascript:viod(0);\"  // a 标签\r\n                            onClick={() => {\r\n                                //移除主表\r\n                                let selData = this.state.transferTable[headTableId].selected.selectedData;\r\n                                let tableType = this.state.transferTable[headTableId][headTableId].tableType;\r\n                                let childSelData = selData.childSelData[record.key] || selData.childSelData[record.headKey];\r\n                                let bodys = [];\r\n                                if (childSelData) {\r\n                                    for (let headKey of Object.keys(childSelData)) {\r\n                                        // liuyjv修改解决返回数据不一致bug\r\n                                        bodys.push(childSelData[headKey].data.values ? childSelData[headKey].data.values : childSelData[headKey].data);\r\n                                    }\r\n                                }\r\n                                onSelectedItemRemove && onSelectedItemRemove(record, bodys);\r\n                                !currentTable.showFullTable\r\n                                    ? onCheckboxChange(text, record, index, true)\r\n                                    : clearSelectedFullData(text, record, index, true);\r\n                            }}\r\n                        >\r\n                            {json['page-transferTable-0001'] || '移除'}{/*国际化处理 移除*/}\r\n                        </div>\r\n                    );\r\n                },\r\n            };\r\n        columns &&\r\n            columns.map(item => {\r\n                if (item.attrcode !== 'checkbox' && item.label !== label) {\r\n                    result.push(item);\r\n                }\r\n            });\r\n        return [...result, operateColumn];\r\n    };\r\n\r\n    //统计已选列表数量\r\n    const getSelectedAmount = () => {\r\n        let transferTable = this.state.transferTable;\r\n        let bodyAmount = 0,\r\n            masterAmount = 0;\r\n        for (let item of Object.keys(transferTable)) {\r\n            if (item !== 'allSelected') {\r\n                let selected = transferTable[item].selected;\r\n                masterAmount += selected.masterAmount ? Number(selected.masterAmount) : 0;\r\n                bodyAmount += selected.bodyAmount ? Number(selected.bodyAmount) : 0;\r\n            }\r\n        }\r\n        return { masterAmount, bodyAmount };\r\n    };\r\n\r\n    //获取已选列表主表数据\r\n    const getMasterData = data => {\r\n        let masterSelData = Object.values(data.masterSelData),\r\n            selected = transferTable.selected,\r\n            mainSortInfoObj = selected.mainSortInfoObj;\r\n        masterSelData = masterSelData.map(item => item.data);\r\n\r\n        return masterSelData;\r\n    };\r\n\r\n    //获取已选列表主子拉平数据\r\n    const getSelectedFullData = data => {\r\n        let { masterSelData, childSelData } = data;\r\n        let result = [];\r\n        for (let key of Object.keys(childSelData)) {\r\n            // 存在 没有子表元素的主表数据\r\n            if (hasObjProperty(childSelData[key])) {\r\n                Object.values(childSelData[key]).forEach(item => {\r\n                    // let childVal = JSON.parse(JSON.stringify(item.data.values || item.data || {}));\r\n                    // let headData = JSON.parse(JSON.stringify(masterSelData[key].data || {}));\r\n                    // 为了万行\r\n                    let childVal = Object.assign({}, item.data.values || item.data || {});\r\n                    let headData = Object.assign({}, masterSelData[key].data || {});\r\n\r\n                    childVal.headKey = headData.key || headData.headKey;\r\n                    // delete headData.headKey;\r\n                    // delete headData.key;\r\n                    let newData = Object.assign({}, childVal, headData); //合并后的主子拉平数据\r\n                    if (newData.headKey) newData.headKey = key;\r\n                    newData.key = childVal.key;\r\n                    result.push(newData);\r\n                });\r\n            } else {\r\n                // 没有就取主表数据\r\n                // let newData = JSON.parse(JSON.stringify(masterSelData[key].data));\r\n                // 为了万行\r\n                let newData = masterSelData[key].data;\r\n                newData.headKey = key;\r\n                newData.key = key;\r\n                result.push(newData);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //点击生成转单去下游转单的按钮\r\n    const handleGenerateClick = () => {\r\n        let selIds = [];\r\n        let selId = [];\r\n        if (!isMultiChild) { // 转单不是多来源的子\r\n            //获取已选列表主子表id\r\n            let masterData = transferTable.selected.selectedData.masterSelData;\r\n            let childSelData = transferTable.selected.selectedData.childSelData;\r\n            if (masterData) {\r\n                for (let key of Object.keys(masterData)) {\r\n                    let hValues = masterData[key].data;\r\n                    if (hValues.saga_status && hValues.saga_status.value === '1') {\r\n                        // eslint-disable-next-line no-continue\r\n                        continue;\r\n                    }\r\n                    let bodys = [];\r\n                    let head = {};\r\n                    if (childSelData) {\r\n                        let childData = transferTable.selected.selectedData.childSelData[key];\r\n                        if (childData) {\r\n                            for (let id of Object.keys(childData)) {\r\n                                let values = childData[id].data.values || childData[id].data;\r\n                                if (values.saga_status && values.saga_status.value === '1') {\r\n                                    // eslint-disable-next-line no-continue\r\n                                    continue;\r\n                                }\r\n                                let itemsJson = {};\r\n                                if (cacheItem) {\r\n                                    cacheItem.forEach(item => {\r\n                                        let itemValue = values[item];\r\n                                        if (itemValue) { //选中的子表数据里有要缓存的字段，\r\n                                            itemsJson[item] = itemValue;\r\n                                        } else { //选中的子表数据里有要缓存的字段就从主表数据里找\r\n                                            let masterSelData = transferTable.selected.selectedData.masterSelData[key];\r\n                                            let masterSelDataVal = masterSelData.data.values || masterSelData.data;\r\n                                            let masterItemValue = masterSelDataVal[item];\r\n                                            masterItemValue && (itemsJson[item] = masterItemValue);\r\n                                        }\r\n                                    });\r\n                                }\r\n                                if (generateKeys && generateKeys.body && generateKeys.body.length > 0) {\r\n                                    let bodyKeyVal = {};\r\n                                    for (let val of generateKeys.body) {\r\n                                        bodyKeyVal[val] = values[val] && values[val].value;\r\n                                    }\r\n                                    bodys.push({\r\n                                        bodyKeyVal,\r\n                                        ...itemsJson,\r\n                                    });\r\n                                } else {\r\n                                    bodys.push({\r\n                                        pk: id,\r\n                                        ts: values.ts && values.ts.value,\r\n                                        ...itemsJson,\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (generateKeys && generateKeys.head && generateKeys.head.length > 0) {\r\n                        for (let val of generateKeys.head) {\r\n                            head[val] = masterData[key].data[val] && masterData[key].data[val].value;\r\n                        }\r\n                    } else {\r\n                        // 兼容一下特殊情况的判断\r\n                        let headTs = masterData[key].ts ? masterData[key].ts : (masterData[key].data && masterData[key].data.ts && masterData[key].data.ts.value);\r\n                        headTs = masterData[key].data.headTs ? masterData[key].data.headTs.value : headTs;\r\n                        head = {\r\n                            pk: key,\r\n                            ts: headTs,\r\n                        };\r\n                    }\r\n                    let itemsJson = {};\r\n                    if (cacheItem) {\r\n                        cacheItem.forEach(item => {\r\n                            // if(childSelData && childSelData[key] && childSelData[key].data && childSelData[key].data[item]){\r\n                            //     let itemValue = childSelData[key].data[item];\r\n                            //     itemValue && (itemsJson[item] = itemValue);\r\n                            // }\r\n\r\n                            let itemValue = masterData[key].data[item];\r\n                            itemValue && (itemsJson[item] = itemValue);\r\n                        });\r\n                    }\r\n                    selIds.push({\r\n                        head,\r\n                        bodys,\r\n                        ...itemsJson,\r\n                    });\r\n                }\r\n            }\r\n            ViewModel.setData('transferIds', selIds);\r\n            this.state.transferTable[headTableId] = transferTable;\r\n        } else { // 转单是多来源的子\r\n            let allTranferTableData = this.state.transferTable;\r\n            let selfMasterData = transferTable.selected.selectedData.masterSelData;\r\n            let selfChildData = transferTable.selected.selectedData.childSelData;\r\n\r\n            for (let ID of Object.keys(allTranferTableData)) {\r\n                if (ID === 'allSelected') {\r\n                    let selected = allTranferTableData.allSelected;\r\n                    let masterData = JSON.parse(JSON.stringify(selected.selectedData.masterSelData));\r\n                    let childData = JSON.parse(JSON.stringify(selected.selectedData.childSelData));\r\n                    let bodys = [];\r\n                    let selfBodys = [];\r\n                    for (let key of Object.keys(masterData)) {\r\n                        let hValues = masterData[key].data;\r\n                        if (hValues.saga_status && hValues.saga_status.value === '1') {\r\n                            // eslint-disable-next-line no-continue\r\n                            continue;\r\n                        }\r\n                        if (childData[key]) {\r\n                            for (let id of Object.keys(childData[key])) {\r\n                                let values = childData[key][id].data.values || childData[key][id].data;\r\n                                if (values.saga_status && values.saga_status.value === '1') {\r\n                                    // eslint-disable-next-line no-continue\r\n                                    continue;\r\n                                }\r\n                                bodyPkIds &&\r\n                                    bodyPkIds.map(pk => {\r\n                                        let cData = childData[key][id].data.values || childData[key][id].data;\r\n                                        if (cData.hasOwnProperty(pk)) {\r\n                                            bodys.push({\r\n                                                [pk]: id,\r\n                                                pk: id,\r\n                                                ts: values.ts && values.ts.value,\r\n                                            });\r\n                                        }\r\n                                    });\r\n                            }\r\n                        }\r\n                        if (selfChildData[key]) {\r\n                            for (let id of Object.keys(selfChildData[key])) {\r\n                                let values = selfChildData[key][id].data.values || selfChildData[key][id].data;\r\n                                if (values.saga_status && values.saga_status.value === '1') {\r\n                                    // eslint-disable-next-line no-continue\r\n                                    continue;\r\n                                }\r\n                                bodyPkIds &&\r\n                                    bodyPkIds.map(pk => {\r\n                                        let cData = selfChildData[key][id].data.values || selfChildData[key][id].data;\r\n                                        if (cData.hasOwnProperty(pk)) {\r\n                                            selfBodys.push({\r\n                                                [pk]: id,\r\n                                                pk: id,\r\n                                                ts: values.ts && values.ts.value,\r\n                                            });\r\n                                        }\r\n                                    });\r\n                            }\r\n                        }\r\n                        headPkIds &&\r\n                            headPkIds.map(pk => {\r\n                                if (masterData[key].data.hasOwnProperty(pk)) {\r\n                                    selIds.push({\r\n                                        head: {\r\n                                            [pk]: key,\r\n                                            pk: key,\r\n                                            ts: masterData[key].data.ts && masterData[key].data.ts.value,\r\n                                        },\r\n                                        bodys,\r\n                                    });\r\n                                }\r\n\r\n                                if (selfMasterData[key] && selfMasterData[key].data.hasOwnProperty(pk)) {\r\n                                    selId.push({\r\n                                        head: {\r\n                                            [pk]: key,\r\n                                            pk: key,\r\n                                            ts: selfMasterData[key].data.ts && selfMasterData[key].data.ts.value,\r\n                                        },\r\n                                        bodys: selfBodys,\r\n                                    });\r\n                                }\r\n                            });\r\n                        bodys = [];\r\n                    }\r\n                }\r\n            }\r\n            ViewModel.setData('multiTransferIds', selIds);\r\n            ViewModel.setData('transferIds', selId);\r\n        }\r\n        if (typeof onTransferBtnClick === 'function') {\r\n            // 用来创建下游转单卡片的时候判断是否创建ref\r\n            ViewModel.setData('isCreateTransferList', true);\r\n            onTransferBtnClick(selIds);\r\n        }\r\n    };\r\n\r\n    //点击切换视图\r\n    const handleChangeView = () => {\r\n        if (typeof onChangeViewClick === 'function') {\r\n            onChangeViewClick();\r\n        }\r\n    };\r\n\r\n    //将主子表数据拼成主子拉平数据\r\n    const createFullData = data => {\r\n        let { outerData, bodyData, fullSortData } = data;\r\n        let result = [];\r\n        let headData = {};\r\n        const CurrentFullDataRule = fullDataRule || 'mainbody';\r\n        if (fullSortData) {\r\n            return fullSortData;\r\n        }\r\n        if (bodyData && bodyData.data) {\r\n            // 为了排序  我豁出去了 以外层数据为标准  可以排序数据\r\n            if (Array.isArray(outerData)) {\r\n                outerData.forEach(oitem => {\r\n                    let key = oitem.rowId;\r\n                    // headData[key] = JSON.parse(JSON.stringify(oitem.values));\r\n                    // 不进行拷贝了  不然大数据内存增长较大\r\n                    headData[key] = oitem.values;\r\n                    //子表有数据时，拉平\r\n                    if (bodyData.data[key] && bodyData.data[key].rows && bodyData.data[key].rows.length) {\r\n                        bodyData.data[key].rows.map(item => {\r\n                            let newData = Object.assign(\r\n                                // JSON.parse(JSON.stringify(item.values)),\r\n                                // 不进行拷贝了  不然大数据内存增长较大\r\n                                // JSON.parse(JSON.stringify(item.values)),\r\n                                // JSON.parse(JSON.stringify(headData[key])),\r\n                                {},\r\n                                item.values,\r\n                                headData[key],\r\n                            ); //合并后的主子拉平数据\r\n\r\n                            if (Object.prototype.toString.call(CurrentFullDataRule) == '[object Function]') {\r\n                                // console.log(CurrentFullDataRule);\r\n                                newData = CurrentFullDataRule(headData[key], item.values) || {};\r\n                            }\r\n                            if (CurrentFullDataRule === 'bodymain') {\r\n                                // console.log(CurrentFullDataRule);\r\n                                newData = Object.assign(\r\n                                    {},\r\n                                    headData[key],\r\n                                    item.values,\r\n                                );\r\n                            }\r\n                            if (CurrentFullDataRule === 'body') {\r\n                                // console.log(CurrentFullDataRule);\r\n                                newData = Object.assign(\r\n                                    {},\r\n                                    item.values,\r\n                                );\r\n                                newData.headKey = key;\r\n                            }\r\n                            if (CurrentFullDataRule === 'main') {\r\n                                // console.log(CurrentFullDataRule);\r\n                                newData = Object.assign(\r\n                                    {},\r\n                                    headData[key],\r\n                                );\r\n                            }\r\n\r\n                            if (!newData.headKey) newData.headKey = key;\r\n                            newData.key = item.values.key;\r\n                            newData.headTs = headData[key]['ts'];\r\n                            result.push(newData);\r\n                        });\r\n                        //子表无数据时，只去主表数据作为拉平数据\r\n                    } else {\r\n                        let newData = headData[key];\r\n                        newData.headKey = key;\r\n                        newData.key = key;\r\n                        newData.headTs = headData[key]['ts'];\r\n                        result.push(newData);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        for (let val of result) {\r\n            for (let item of Object.keys(val)) {\r\n                let itemData = val[item];\r\n                if (itemData && itemData.hasOwnProperty('scale')) {\r\n                    val[item].value = formatDot(itemData.value, val[item].scale);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /* 主子表展开收起按钮的回调\r\n     * @param {*Array} expandedPks 当前转单展开的所有主表的pk\r\n     */\r\n    const onExpandedRowsChange = expandedPks => {\r\n        // console.log('展开收起回调',expandedPks)\r\n        if (typeof onExpandedChange === 'function') onExpandedChange(expandedPks);\r\n    };\r\n    let selectedAmount = getSelectedAmount(); //已选数据数量\r\n    // //==================转单部分========================\r\n    return (\r\n        <CreateTranferTable\r\n            _this={this}\r\n            // bodyAmount={bodyAmount}\r\n            bodyColumn={bodyColumn}\r\n            classByType={classByType}\r\n            column={column}\r\n            columns={columns}\r\n            comType={comType}\r\n            componentInitFinished={componentInitFinished}\r\n            createNewCol={createNewCol}\r\n            createFullData={createFullData}\r\n            createNewData={createNewData}\r\n            currentTable={currentTable}\r\n            customAreaOfSelectedHead={customAreaOfSelectedHead}\r\n            renderColumnsMultiSelect={renderColumnsMultiSelect}\r\n            dataSource={dataSource}\r\n            defaultProps={defaultProps}\r\n            expandedRowRender={expandedRowRender}\r\n            fullColumns={fullColumns}\r\n            getMasterData={getMasterData}\r\n            getSelectedFullData={getSelectedFullData}\r\n            getScaleData={getScaleData}\r\n            getTheLongestPrecision={getTheLongestPrecision}\r\n            handleClearAllSelected={handleClearAllSelected}\r\n            handleChangeView={handleChangeView}\r\n            showChangeViewBtn={showChangeViewBtn}\r\n            handleGenerateClick={handleGenerateClick}\r\n            isTotal={this.myState.status.totalStatusOfTransferTable} //是否显示合计行 具体用到拿个要细查代码决定\r\n            isHeadTotal={this.myState.status.headTotalStatusOfTransferTable}//否显示合计行 具体用到拿个要细查代码决定 主表是否合计\r\n            isBodyTotal={this.myState.status.bodyTotalStatusOfTransferTable}//否显示合计行 具体用到拿个要细查代码决定 子表是否合计\r\n            isFullTotal={this.myState.status.fullTotalStatusOfTransferTable}//否显示合计行 具体用到拿个要细查代码决定 拉平表是否合计\r\n            isMultiChild={isMultiChild}\r\n            onCheckedChange={onCheckedChange}\r\n            onCheckboxChangeChild={onCheckboxChangeChild}\r\n            selectArea={selectArea}\r\n            selectedAmount={selectedAmount}\r\n            setSelectedColumns={setSelectedColumns}\r\n            showChildIndex={showChildIndex}\r\n            showSeletedArea={showSeletedArea}\r\n            showSeletedBtn={showSeletedBtn}\r\n            showGenerateBtn={showGenerateBtn}\r\n            showMasterIndex={showMasterIndex}\r\n            tableType={tableType}\r\n            transferBtnText={transferBtnText}\r\n            transferTable={transferTable}\r\n            totalKey={totalKey}\r\n            totalTitle={totalTitle}\r\n            isDrag={isDrag}\r\n            sortType={sortType}\r\n            containerSelector={containerSelector}\r\n            getMultiChildChangeWidth={getMultiChildChangeWidth}\r\n            onExpandedRowsChange={onExpandedRowsChange}\r\n            meta={this.state.meta}\r\n            headTableId={headTableId}\r\n            bodyTableId={bodyTableId}\r\n            fullTableId={fullTableId}\r\n            defaultOperateColumnHidden={defaultOperateColumnHidden}\r\n            autoHeight={autoHeight}\r\n            cancelCustomRightMenu={cancelCustomRightMenu}\r\n            fieldId={fieldId}\r\n        />\r\n    );\r\n}\r\n\r\n//创建卡片型转单列表\r\nexport function createTransferList({\r\n    headcode, // 表单表头的区域编码\r\n    bodycode, // 表体表格的区域编码\r\n    transferListId,\r\n    dataSource,\r\n    componentInitFinished,\r\n    onTransferItemClick,\r\n    onTransferItemSelected,\r\n    onUpdateLastActiveFormData,\r\n    onGrandSonsDataUpdate,\r\n}) {\r\n    if (dataSource) {\r\n        this.transferTableDataSource = dataSource;\r\n    }\r\n\r\n    if (headcode) {\r\n        this.transferListCardHeadCode = headcode;\r\n    }\r\n\r\n    this.myState.transferListAreas = { headcode, bodycode };\r\n\r\n    if (!this.myState.transferList.hasOwnProperty(transferListId)) {\r\n        this.myState.transferList[transferListId] = {\r\n            // selected: {\r\n            //     selectedShow: false,\r\n            //     masterAmount: 0, //主表已选数量\r\n            //     bodyAmount: 0, //子表已选数量\r\n            //     masterCheckedId: [], //存放已选主表id，用于复选框半选\r\n            //     selectedData: {\r\n            //         selAll: false,\r\n            //         masterSelData: {},\r\n            //         childSelData: {}\r\n            //     }\r\n            // },\r\n            transformForm: {\r\n                //转单列表\r\n                activeIndex: 0,\r\n                show: true, //是否显示转单视图\r\n                listData: {}, //转单列表数据\r\n                list: [],\r\n                first: 0, //记录页面第几次进入的\r\n            },\r\n        };\r\n    }\r\n\r\n    // if (!this.state.meta) {\r\n    //     return false;\r\n    // }\r\n    // if (!this.state.meta[transferListId] || !this.myState.transferList[transferListId]) {\r\n    //     return false;\r\n    // }\r\n    // //转单模板信息\r\n    // let transformListMeta = this.state.meta[transferListId].items;\r\n\r\n    let transferList = this.myState.transferList;\r\n\r\n    let transformForm = transferList[transferListId].transformForm;\r\n\r\n    let dataAreaCode = headcode;\r\n\r\n    this.onTransferItemClick = onTransferItemClick;\r\n\r\n    this.onTransferItemSelected = onTransferItemSelected;\r\n\r\n    const _pageScope = this;\r\n\r\n    //默认选中第一条转单\r\n    if (transformForm.first === 0) {\r\n        transformForm.first++;\r\n    } else if (transformForm.first === 1) {\r\n        transformForm.list[0] &&\r\n            onTransferItemSelected && onTransferItemSelected(\r\n                transformForm.list[0].data,\r\n                transformForm.list[0].complete,\r\n                transformForm.activeIndex,\r\n                'edit',\r\n            );\r\n        transformForm.first++;\r\n\r\n    }\r\n\r\n    //点击缩略显示区\r\n    const handleTransformListClick = (v, index) => {\r\n        let formStatus = _pageScope.form.getFormStatus(headcode);\r\n\r\n        // 孙表的更新回调\r\n        onGrandSonsDataUpdate && onGrandSonsDataUpdate(transferListId, formStatus === 'browse');\r\n\r\n        if (headcode && bodycode) updateLastActiveFormData.call(this, transferListId, headcode, bodycode, formStatus === 'browse', onUpdateLastActiveFormData);\r\n\r\n        transformForm.activeIndex = index;\r\n        this.setState(\r\n            { transformForm },\r\n            () => {\r\n                if (typeof onTransferItemSelected === 'function') {\r\n                    let status = !transformForm.list[index].complete ? 'edit' : transformForm.list[index].formStatus;\r\n                    onTransferItemSelected(v, transformForm.list[index].complete, index, status);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    let flag = transformForm.show && transformForm.list && transformForm.list.length > 1;\r\n\r\n    return (\r\n        <CreateTranferList\r\n            // ref={(dom) => {this.myState.transferListRef = dom}}\r\n            _this={this}\r\n            dataAreaCode={dataAreaCode}\r\n            dataSource={dataSource}\r\n            componentInitFinished={componentInitFinished}\r\n            flag={flag}\r\n            handleTransformListClick={handleTransformListClick}\r\n            transformForm={transformForm}\r\n            transferListId={transferListId}\r\n        //transformListMeta={transformListMeta}\r\n        />\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { withViewModel, getSysFieldid, getMultiLang, sum, changeTime, getLangCode, isTimeType, myBrowser, formatDatetime, formatNumber } from '@platform/api'\r\nimport { Table as NCTable, Tabs as NCTabs, Button, BackBtn as NCBackBtn, ToggleViewBtn as NCToggleViewBtn, Tooltip as NCTooltip } from '@platform/base'\r\nimport EllipsisToTooltip from './ellipsisToTooltip';\r\nimport {\r\n    getLongScale,\r\n    numberDispose,\r\n    getMultiChildChangeWidth,\r\n    resizeEvent,\r\n    getScrollTop,\r\n    updateColumnAfterSetting,\r\n    whenTransferTableUnmount,\r\n    getcolsSettingParam,\r\n} from './methods';\r\nimport classnames from 'classnames';\r\nimport { lib } from '@platform/table-core';\r\nconst { total } = lib;\r\n\r\nconst ComplexTable = total(NCTable.SortTable);\r\n\r\n// 已选列表 来一个唯一标识 用作js样式计算  // 为啥要计算高度  ！！！！！！！！\r\nlet uniqueTagCls = 'unique-tag' + (new Date().getTime());\r\n\r\nconst NCTabPane = NCTabs.TabPane;\r\nconst defaultColor = ['#111111', '#555555', '#111', '#555'];\r\n\r\n@withViewModel\r\nexport default class CreateMultiTransferTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        (this.ViewModel = this.props.ViewModel), (this.expandArrId = this.props.events && this.props.events.expandArr);\r\n        this.state = {\r\n            switchViewState: 'evenUp',\r\n            selectedTop: 0,\r\n            multiTransfertableHeight: 0, // 多来源转单高度容器\r\n            selectedHeight: 0,\r\n            top: 0,\r\n            height: 0,\r\n            json: {},\r\n            LangData: null,\r\n            transferTableHeight: 0,\r\n            selectedListBoxHeight: 0,\r\n\r\n            listHeight: 0, //\r\n            selectedListHeight: 0,\r\n            fixedWidth: 0, //多来源有全部页签共用的底部灰条的宽度\r\n\r\n        };\r\n        this.activeTab = '';\r\n        this.multiTransfertableMain = React.createRef();\r\n        this.multiTransfertableSelectedList = React.createRef();\r\n        // ---------\r\n        this.setTimeIndex = null;\r\n        this.transferTableClient = null;\r\n        this.isTransferTableSetHeight = false;\r\n        this.isSelectedListSetHeight = false;\r\n        this.transferTableHeight = null;\r\n        this.modalBodyClient = null;\r\n        this.modalBodyHeight = 0;\r\n\r\n        // ---------\r\n        this.transfertableMainIsModalSChild = false;\r\n        this.total = null;\r\n        this.doing = true; // 用来阻止事件的\r\n        this.setListHeightIsDone = false; // 用来阻止事件的\r\n        this.setSelectListHeightIsDone = false; // 用来阻止事件的\r\n        this.setModalHeightIsDone = false; // 用来阻止事件的\r\n\r\n        /***获取当前浏览器类型*/\r\n        this.myBrowser = myBrowser();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { showAll } = this.props;\r\n        if (showAll) {\r\n            let callback = (json, bool, LangData) => {\r\n                this.setState({ json, LangData }, () => {\r\n                    this.dealDataFromTransferListBack();\r\n                });\r\n            };\r\n            getMultiLang({ moduleId: 'page-transferTable', callback });\r\n        } else {\r\n            this.dealDataFromTransferListBack();\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.onresizeEvents({ isIntl: true });\r\n        }, 200);\r\n        window.onresize = () => {\r\n            this.onresizeEvents({ windowResize: true });\r\n        };\r\n        // 设置一个接收装置 接收父级page所传递的信息\r\n        let _this = this.props._this;\r\n        // 查询区\r\n        _this.infoExchangeController.subscribe('heightChange', (name, { area }) => {\r\n            if (area === 'searchArea') {\r\n                console.log('侦测到查询区变化，进行高度毁灭打击！');\r\n                setTimeout(() => {\r\n                    this.onresizeEvents({ windowResize: true });\r\n                }, 20);\r\n            } else {\r\n                console.log(area);\r\n            }\r\n        });\r\n        // 弹窗resize\r\n        _this.infoExchangeController.subscribe('modelResizeEnd', (name, { indexInfo, className, id }) => {\r\n            console.log('侦测到弹窗resize变化，随风起舞吧！');\r\n            setTimeout(() => {\r\n                this.onresizeEvents({ windowResize: true });\r\n            }, 20);\r\n        });\r\n        // console.log(_this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let { _this } = this.props;\r\n        if (_this.state.multiDelete) {//供应链刘奇的转单上下游是多页，下游保存单据后，上游需要更新删除保存后的数据\r\n            this.dealDataFromTransferListBack(false);\r\n            _this.state.multiDelete = false;\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.onresize = null;\r\n        let { _this, dataSource } = this.props;\r\n        whenTransferTableUnmount.call(_this, dataSource);\r\n        // 可能需要清理 这里清理了 别人就不能用了  可以考虑 topic模式\r\n        _this.infoExchangeController && _this.infoExchangeController.unsubscribe('heightChange');\r\n        _this.infoExchangeController && _this.infoExchangeController.unsubscribe('modelResizeEnd');\r\n    }\r\n\r\n\r\n    /**\r\n     * 转单下游回到上游以后，检测保存过的数据，然后删除\r\n     */\r\n    dealDataFromTransferListBack = (isWillMount = true) => {\r\n        let { _this, dataSource, componentInitFinished, tabActiveIndex, onTabClick } = this.props;\r\n        if (onTabClick && typeof onTabClick === 'function' && tabActiveIndex) {\r\n            onTabClick(tabActiveIndex);\r\n            _this.setState({\r\n                transferTable: data.transferTable\r\n            });\r\n        }\r\n        if (dataSource) {\r\n            let data = this.ViewModel.getData(dataSource);\r\n            if (data && data.transferTable && Object.keys(data.transferTable).length) {\r\n                if (onTabClick && typeof onTabClick === 'function') {\r\n                    if (data.transferTable.allSelected && data.transferTable.allSelected.activeTab) {\r\n                        this.activeTab = tabActiveIndex || data.transferTable.allSelected.activeTab;\r\n                        onTabClick(tabActiveIndex || data.transferTable.allSelected.activeTab);\r\n                    }\r\n                }\r\n                let pk = this.ViewModel.getData(`${dataSource}_PK`) || []; // 下有转单保存的pk， 需要在缓存中删除\r\n                let ID = this.ViewModel.getData(`${dataSource}_ID`) || {}; // 主表子表每条数据的的key， 删除缓存中保存过的单据要用\r\n                let transferTableRelation = data.transferTableRelation; // 单据关系 子表key对应得主表key\r\n\r\n                this.processingData(data.transferTable, pk, transferTableRelation, ID);\r\n                _this.setState(\r\n                    {\r\n                        transferTable: data.transferTable\r\n                    },\r\n                    () => {\r\n                        // 清除一下\r\n                        // this.ViewModel.setData(dataSource, null);\r\n                        //执行数据初始化周期函数\r\n                        if (isWillMount && typeof componentInitFinished == 'function') {\r\n                            componentInitFinished();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    * 设置多来源转单所在模态框的高\r\n    *\r\n    * */\r\n    setModalTransferTableHeight = () => {\r\n        let { transferTable, showAll } = this.props;\r\n        let selectedShow = showAll && transferTable.allSelected.selectedShow;\r\n        let modalBodySelector = document.querySelector('.u-modal-body');\r\n        let modalBodyNowClient = modalBodySelector ? modalBodySelector.getBoundingClientRect() : null;\r\n        let transferTableTop = this.multiTransfertableMain && this.multiTransfertableMain.current && this.multiTransfertableMain.current.getBoundingClientRect && this.multiTransfertableMain.current.getBoundingClientRect().top;\r\n        let transferTableHeight = 0;\r\n        // 判断是设置全部列表的高度还是设置已选列表的高度\r\n        if (selectedShow) {\r\n            if (!this.setSelectListHeightIsDone) {\r\n                transferTableHeight = modalBodyNowClient.bottom - transferTableTop; // 15 是modal的paddingBottom\r\n\r\n                this.setState({\r\n                    transferTableHeight,\r\n                    selectedListHeight: transferTableHeight,\r\n                }, () => {\r\n                    this.setSelectListHeightIsDone = true;\r\n                    this.showTransferTableTimer = null;\r\n                });\r\n            }\r\n        } else {\r\n            if (!this.setListHeightIsDone) {\r\n                transferTableHeight = modalBodyNowClient.bottom - transferTableTop; // 15 是modal的paddingBottom \r\n                this.setState({\r\n                    transferTableHeight,\r\n                    listHeight: transferTableHeight,\r\n                }, () => {\r\n                    this.setListHeightIsDone = true;\r\n                    this.showTransferTableTimer = null;\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // 判断转单是不是放在modal中的\r\n    transferTableIsInModal = () => {\r\n        let modalSelector = document.querySelector('.u-modal-body');\r\n        let transfertableNowCurrent = this.multiTransfertableMain.current,\r\n            result = [],\r\n            father = transfertableNowCurrent.parentNode;\r\n        while (father && father.tagName != 'BODY') {\r\n            result.push(father);\r\n            father = father.parentNode;\r\n        }\r\n        this.doing = false;\r\n        this.transfertableMainIsModalSChild = result.includes(modalSelector);\r\n    }\r\n\r\n    /*\r\n    * 设置转单组件自适应宽高\r\n    * isIntl: Boolean 页面是否初始化 （didMount的时候会设置为true）\r\n    * windowResize：Boolean 窗口是否在变化宽高\r\n    * */\r\n    onresizeEvents = ({ isIntl, windowResize }) => {\r\n        let { showAll, transferTable } = this.props;\r\n        let selectedShow = transferTable.allSelected.selectedShow && showAll;\r\n        let windowHeight = getScrollTop();\r\n        let transferTableTop = this.multiTransfertableMain && this.multiTransfertableMain.current && this.multiTransfertableMain.current.getBoundingClientRect && this.multiTransfertableMain.current.getBoundingClientRect().top;\r\n        resizeEvent(isIntl, windowResize, selectedShow, transferTableTop, windowHeight, this);\r\n    }\r\n\r\n    // 自定义合计\r\n    customAggregate = () => {\r\n        let { totalKey, totalTitle, getTheLongestPrecision, transferTable } = this.props;\r\n        let allSelected = transferTable['allSelected'].selectedData;\r\n        let masterSelData = allSelected.masterSelData;\r\n        let childSelData = allSelected.childSelData;\r\n        let data = [];\r\n        let values = totalKey.reduce((total, now) => {\r\n            total[now.join('_')] = 0;\r\n            return total;\r\n        }, {});\r\n        for (let [name, item] of Object.entries(masterSelData)) {\r\n            let masterValue = item.data;\r\n            for (let item of totalKey) {\r\n                let outKey = item.join('_');\r\n\r\n                for (let key of item) {\r\n                    if (masterValue.hasOwnProperty(key)) {\r\n                        values[outKey] = getTheLongestPrecision(String(masterValue[key].value), String(values[outKey]));\r\n                        values[outKey] = numberDispose(values[outKey]);\r\n                    }\r\n                }\r\n            }\r\n            if (childSelData.hasOwnProperty(name)) {\r\n                for (let [na, it] of Object.entries(childSelData[name])) {\r\n                    let childValue = it.data.values ? it.data.values : it.data;\r\n                    for (let item of totalKey) {\r\n                        let outKey = item.join('_');\r\n                        for (let key of item) {\r\n                            if (childValue.hasOwnProperty(key)) {\r\n                                values[outKey] = getTheLongestPrecision(String(childValue[key].value), String(values[outKey]));\r\n                                values[outKey] = numberDispose(values[outKey]);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        totalKey.map((item, index) => {\r\n            let key = item.join('_');\r\n            data.push({\r\n                title: totalTitle[index],\r\n                value: values[key],\r\n                key\r\n            });\r\n        });\r\n        return data.length ? (\r\n            <div style={{ display: 'inline-block' }}>\r\n                {data.map(item => {\r\n                    return (\r\n                        <span\r\n                            style={{ display: 'inline-block', marginRight: '20px' }}\r\n                            key={item.key}\r\n                        >\r\n                            {`${item.title}: ${item.value}`}\r\n                        </span>\r\n                    );\r\n                })}\r\n            </div>\r\n        ) : '';\r\n    }\r\n\r\n    //关闭已选列表\r\n    closeSelectedList = () => {\r\n        let { _this, showAllList } = this.props;\r\n        _this.state.transferTable.allSelected.selectedShow = false;\r\n        _this.setState({\r\n            transferTable: _this.state.transferTable\r\n        }, () => {\r\n            this.onresizeEvents({ isIntl: true, windowResize: false });\r\n            showAllList && showAllList();\r\n        });\r\n    };\r\n\r\n    //查看已选列表\r\n    viewSelectedList = () => {\r\n        let { _this, showAll, transferTable, allHeadId, getAllSelectedData, onSelectedBtnClick } = this.props;\r\n\r\n        if (!showAll) {\r\n            getAllSelectedData();//获取多来源转单已选数据\r\n        } else {\r\n            let transferTable = JSON.parse(JSON.stringify(_this.state.transferTable));\r\n            let allSelected = JSON.parse(JSON.stringify(_this.state.transferTable.allSelected));\r\n            for (let items of Object.keys(transferTable)) {\r\n                if (items !== 'allSelected') {\r\n                    let selected = transferTable[items].selected;\r\n                    let childS = selected.selectedData.childSelData;\r\n                    let masterS = selected.selectedData.masterSelData;\r\n                    for (let item of Object.keys(masterS)) {\r\n                        if (Object.keys(masterS).length) {\r\n                            if (!allSelected.selectedData.masterSelData.hasOwnProperty(item)) {\r\n                                allSelected.masterCheckedId.push(item);\r\n                                allSelected.selIds[item] = [];\r\n                                allSelected.selectedData.masterSelData[item] = masterS[item];\r\n                            }\r\n                        }\r\n                    }\r\n                    for (let item of Object.keys(childS)) {\r\n                        if (Object.keys(childS).length) {\r\n                            if (!allSelected.selectedData.childSelData.hasOwnProperty(item)) {\r\n                                allSelected.selectedData.childSelData[item] = childS[item];\r\n                                for (let ite of Object.keys(childS[item])) {\r\n                                    allSelected.selIds[item].push(ite);\r\n                                }\r\n                            } else {\r\n                                for (let ite of Object.keys(childS[item])) {\r\n                                    if (!allSelected.selectedData.childSelData[item].hasOwnProperty(ite)) {\r\n                                        allSelected.selectedData.childSelData[item][ite] = childS[item][ite];\r\n                                        allSelected.selIds[item].push(ite);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    allSelected.masterAmount = allSelected.masterCheckedId.length;\r\n                    for (let item of Object.keys(allSelected.selIds)) {\r\n                        // 有个数据没有子数据  但是应该也算一行数据\r\n                        allSelected.bodyAmount += (allSelected.selIds[item].length || 1);\r\n                    }\r\n                }\r\n            }\r\n            _this.state.transferTable.allSelected = allSelected;\r\n        }\r\n        if (!_this.state.meta[allHeadId]) {\r\n            console.error('没有加载全部页签模板');\r\n            return false;\r\n        }\r\n        transferTable.allSelected.selectedShow = !transferTable.allSelected.selectedShow; //已选列表弹窗显示状态\r\n        _this.setState({\r\n            transferTable: _this.state.transferTable\r\n        },\r\n            () => {\r\n                this.onresizeEvents({ isIntl: false, windowResize: false });\r\n                if (typeof onSelectedBtnClick === 'function') {\r\n                    onSelectedBtnClick();\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    /*\r\n    * 处理合计数据\r\n    * selected: Object 计算合计选中的数据\r\n    * tableType：String 判断主子表结构、主子拉平结构或者单表结构 （nest/full/simple）\r\n    * column：Array 合计行的模板数据\r\n    * showFullTable：Boolean 判断是表示是否为拉平显示\r\n    * */\r\n    processingTotalData = (selected, tableType, column, showFullTable) => {\r\n        let { getTheLongestPrecision, getScaleData } = this.props;\r\n        let outerData = {};\r\n        let totalKey = [];\r\n        let totalScale = {};\r\n\r\n        for (let item of column) {\r\n            outerData[item['attrcode']] = { value: '', display: '' };\r\n            if (item.istotal && item.itemtype === 'number') {\r\n                totalKey.push(item.attrcode);\r\n                totalScale[item.attrcode] = item.scale;\r\n            }\r\n        }\r\n        if (tableType === 'master') {\r\n            for (let items of Object.keys(selected.masterSelData)) {\r\n                let values = selected.masterSelData[items].data;\r\n\r\n                for (let i of totalKey) {\r\n                    if (values[i] && typeof values[i] === 'object') {\r\n                        if (values[i] && typeof values[i] === 'object') {\r\n                            if (!outerData[i].value) {\r\n                                outerData[i].scale = values[i].scale;\r\n                                outerData[i].value = values[i].value;\r\n                            } else {\r\n                                outerData[i].scale = getLongScale(values[i].value, outerData[i].value);\r\n                                outerData[i].value = getTheLongestPrecision(values[i].value, outerData[i].value);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if (showFullTable && tableType === 'full') {\r\n            let childSelData = selected.childSelData;\r\n            let masterSelData = selected.masterSelData;\r\n            if (childSelData) {\r\n                for (let items of Object.keys(childSelData)) {\r\n                    for (let item of Object.keys(childSelData[items])) {\r\n                        for (let i of totalKey) {\r\n                            if (\r\n                                childSelData[items][item].data.values\r\n                                    ? childSelData[items][item].data.values.hasOwnProperty(i)\r\n                                    : childSelData[items][item].data.hasOwnProperty(i)\r\n                            ) {\r\n                                let values = childSelData[items][item].data.values || childSelData[items][item].data;\r\n                                if (values[i] && typeof values[i] === 'object') {\r\n                                    if (values[i] && typeof values[i] === 'object') {\r\n                                        if (!outerData[i].value) {\r\n                                            outerData[i].scale = values[i].scale;\r\n                                            outerData[i].value = values[i].value;\r\n                                        } else {\r\n                                            outerData[i].scale = getLongScale(values[i].value, outerData[i].value);\r\n                                            outerData[i].value = getTheLongestPrecision(values[i].value, outerData[i].value);\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let items of Object.keys(masterSelData)) {\r\n                let values = masterSelData[items].data.values || masterSelData[items].data;\r\n\r\n                for (let i of totalKey) {\r\n                    if (values.hasOwnProperty(i)) {\r\n                        if (values[i] && typeof values[i] === 'object') {\r\n                            let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n                            let value = values[i] ? values[i].value : 0;\r\n                            if (!outerData[i].value) {\r\n                                outerData[i].scale = scale;\r\n                                outerData[i].value = getScaleData(value, scale);\r\n                            } else {\r\n                                let totalData = sum(Number.parseFloat(value), Number.parseFloat(outerData[i].value.replace(/,/g, '')));\r\n                                outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                                outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return [outerData];\r\n    };\r\n\r\n    /*\r\n    * 设置已选模板\r\n    * column：Array 模板数据\r\n    * */\r\n    createSelectColumns = (column, showIndex) => {\r\n        let result = [];\r\n        let { headTableId } = this.props;\r\n        result.push({\r\n            label: this.state.json['page-transferTable-0007'] || '序号-5',\r\n            attrcode: 'numberindex',\r\n            itemtype: 'customer',\r\n            dataIndex: 'numberindex',\r\n            fixed: 'left',\r\n            visible: true,\r\n            width: 80,\r\n            className: 'col-customer-numberindex',\r\n            render: (text, record2, index) => {\r\n                return <span title={this.state.json['page-transferTable-0010'] || '合计-2'}>{this.state.json['page-transferTable-0010'] || '合计-2'}</span>;\r\n            }\r\n        });\r\n        column.map((item) => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                render = (text, record, index) => {\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n                        if (isTimeType(item.itemtype)) {\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype === 'number') {\r\n                            dom = formatNumber(dom);\r\n                        }\r\n                        return (\r\n                            <span className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}>\r\n                                <EllipsisToTooltip overlay={dom}>\r\n                                    <span className={classnames({\r\n                                        'single-line-and-ellipsis': this.state.transferTable['allSelected']['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable['allSelected']['isEllipsis'],\r\n                                    })}>{dom}</span>\r\n                                </EllipsisToTooltip>\r\n                            </span>\r\n                        );\r\n\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index\r\n                                )}\r\n                                noEllipsis\r\n                            >\r\n                                <div className={classnames(\r\n                                    'col-customer-render-unit',\r\n                                    {\r\n                                        'single-line-and-ellipsis': this.state.transferTable['allSelected']['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable['allSelected']['isEllipsis'],\r\n                                    })\r\n                                }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        );\r\n                    };\r\n                }\r\n            }\r\n            if (item.visible && item.attrcode !== 'checkbox' && item.attrcode !== 'numberindex') {\r\n                result.push({\r\n                    ...item,\r\n                    render,\r\n                    width,\r\n                    key: item.attrcode,\r\n                    title: <span\r\n                        className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}\r\n                        style={{ color: defaultColor.includes(item.color) ? '' : item.color }}\r\n                    >{item.label}\r\n                    </span>\r\n                });\r\n            }\r\n        });\r\n        // if (result[1] && !showIndex) {\r\n\r\n        // }\r\n        if (result.length) {\r\n            result[result.length - 1].render = () => {\r\n                <span />;\r\n            };\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /*\r\n   * 页面初始化的时候去除下游保存过的数据\r\n   * transferTable：Object 转单数据 （this.state.transferTable）\r\n   * pk：Array 下游保存过的所有单据主键\r\n   * headTableId：String 转单ID\r\n   * */\r\n    processingData = (transferTable, pk, relation, ID) => {\r\n\r\n        let { params } = this.props;\r\n        if (pk.length) {\r\n            for (let items of Object.keys(transferTable)) {\r\n                let headTableId = '';\r\n                let onCheckedChange = null;\r\n                for (let headId of params) {\r\n                    if (items === headId.headTableId) {\r\n                        headTableId = headId.headTableId;\r\n                        onCheckedChange = headId.onCheckedChange;\r\n                        break;\r\n                    }\r\n                }\r\n                if (items !== 'allSelected') {\r\n                    if (transferTable.hasOwnProperty(headTableId)) {\r\n                        let data = Object.keys(transferTable[items][headTableId]['bodyData']).length\r\n                            ? transferTable[items][headTableId]['bodyData']['data']\r\n                            : {};\r\n                        let outerData = transferTable[items][headTableId]['outerData'];\r\n                        let selected = transferTable[items]['selected']['selectedData'];\r\n                        let masterCheckedId = transferTable[items]['selected'] && transferTable[items]['selected'].masterCheckedId;\r\n                        let childSelect = selected && selected.childSelData;\r\n                        let masterSelect = selected && selected.masterSelData;\r\n\r\n                        // 上游选择了多子数据\r\n                        // 如果下游只保存了一个数据 这里就有问题了 \r\n                        // transferTable[items][headTableId]['outerData'] = transferTable[items][headTableId]['outerData'].filter(it => {\r\n                        //     return !pk.includes(it.rowId) && !masterCheckedId.includes(it.rowId)\r\n                        // });\r\n\r\n                        transferTable[items][headTableId]['outerData'] = outerData.length ? outerData.filter(item => {\r\n                            if (pk.includes(item.rowId)) {\r\n                                return false;\r\n                            }\r\n                            if (data && Object.keys(data).length && data[item.rowId] && data[item.rowId].rows) {\r\n                                // 这里需要先记录下 初始数据  不然会导致没有子级的数据返回时被删除\r\n                                let originLength = data[item.rowId].rows.length;\r\n                                data[item.rowId].rows = data[item.rowId].rows.filter(citem => {\r\n                                    return !pk.includes(citem.childId);\r\n                                });\r\n                                // 如果子集都没有了 父级也不需要了？？？  这里注意 一定要一开始有子集  然后才能移除父级\r\n                                if (originLength && data[item.rowId].rows.length === 0) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        }) : [];\r\n                        // 还有一个全选的状态也需要处理下  TODO\r\n                        if (pk && pk.length > 0) {\r\n                            selected && (selected.selAll = false);\r\n                        }\r\n\r\n                        if (Object.keys(childSelect).length) {\r\n                            for (let items of Object.keys(childSelect)) {\r\n                                let onChecked = {\r\n                                    body: [],\r\n                                    head: {}\r\n                                };\r\n                                let headIndex = Object.keys(data).indexOf(items);\r\n                                for (let val of Object.keys(childSelect[items])) {\r\n                                    if (pk.includes(val)) {\r\n                                        delete childSelect[items][val];\r\n                                    } else {\r\n                                        onChecked.body.push(\r\n                                            childSelect[items][val].data.values ?\r\n                                                childSelect[items][val].data.values :\r\n                                                childSelect[items][val].data\r\n                                        );\r\n                                    }\r\n                                }\r\n                                if (!Object.keys(childSelect[items]).length) {\r\n                                    masterCheckedId = masterCheckedId.filter(masterItems => {\r\n                                        return masterItems !== items;\r\n                                    });\r\n                                    delete childSelect[items];\r\n                                    delete masterSelect[items];\r\n                                }\r\n                                if (masterSelect.hasOwnProperty(items)) {\r\n                                    onChecked.head = masterSelect[items].data;\r\n                                }\r\n                                if (Object.keys(onChecked.head).length && typeof onCheckedChange === 'function') {\r\n                                    onCheckedChange(true, onChecked.head, headIndex, onChecked.body);\r\n                                }\r\n                            }\r\n                            for (let val of Object.keys(data)) {\r\n                                data[val].rows = data[val].rows.filter(it => {\r\n                                    return !pk.includes(it.childId);\r\n                                });\r\n\r\n                            }\r\n                        } else if (!Object.keys(childSelect).length && Object.keys(masterSelect).length) {\r\n                            let arr = [];\r\n                            for (let items of Object.keys(masterSelect)) {\r\n                                if (pk.includes(items)) {\r\n                                    arr.push(items);\r\n                                    masterCheckedId = masterCheckedId.filter((i) => {\r\n                                        return i !== items;\r\n                                    });\r\n                                } else {\r\n                                    if (typeof onCheckedChange === 'function') {\r\n                                        onCheckedChange(true, masterSelect[items].data, Object.keys(masterSelect).indexOf(items), []);\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                            for (let item of arr) {\r\n                                delete masterSelect[item];\r\n                            }\r\n\r\n                            let outD = transferTable[items][headTableId].outerData;\r\n                            transferTable[items][headTableId].outerData = outD.filter((item, index) => {\r\n                                return !arr.includes(item.rowId);\r\n                            });\r\n                        }\r\n                        // 赋值哟\r\n                        transferTable[items]['selected'] && (transferTable[items]['selected'].masterCheckedId = masterCheckedId);\r\n                        transferTable[items]['selected'].bodyAmount = Object.keys(selected.childSelData).reduce((total, item) => {\r\n                            // 有个数据没有子数据  但是应该也算一行数据\r\n                            return total += (Object.keys(selected.childSelData[item]).length || 1);\r\n                        }, 0);\r\n                        transferTable[items]['selected'].masterAmount = Object.keys(selected.masterSelData).length;\r\n                        if (data) {\r\n                            for (let item of Object.keys(data)) {\r\n                                let rows = [];\r\n                                let itemRows = data[item]['rows'] || data[item];\r\n                                for (let i = 0; i < itemRows.length; i++) {\r\n                                    if (!pk.includes(itemRows[i]['childId'])) {\r\n                                        rows.push(itemRows[i]);\r\n                                    }\r\n                                }\r\n                                data[item].rows = rows;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let selIds = transferTable.allSelected ? transferTable.allSelected.selIds : null;\r\n                    let selectedData = transferTable.allSelected.selectedData;\r\n                    let childSelData = selectedData.childSelData;\r\n                    let masterSelData = selectedData.masterSelData;\r\n                    let masterCheckedId = transferTable.allSelected.masterCheckedId || [];\r\n                    let bodyAmount = 0;\r\n                    if (selIds) {\r\n\r\n                        for (let item of Object.keys(selIds)) {\r\n                            transferTable.allSelected.selIds[item] = selIds[item].filter(i => {\r\n                                return !pk.includes(i);\r\n                            });\r\n                            if (!selIds[item].length) {\r\n                                masterCheckedId = masterCheckedId.filter((i) => {\r\n                                    return i !== item;\r\n                                });\r\n                                delete selIds[item];\r\n                            }\r\n                        }\r\n                        for (let item of Object.keys(childSelData)) {\r\n                            for (let i of Object.keys(childSelData[item])) {\r\n                                if (pk.includes(i)) {\r\n                                    delete childSelData[item][i];\r\n                                }\r\n                            }\r\n                            if (!Object.keys(childSelData[item]).length) {\r\n                                masterCheckedId = masterCheckedId.filter(masterItems => {\r\n                                    return masterItems !== item;\r\n                                });\r\n                                delete masterSelData[item];\r\n                                delete childSelData[item];\r\n                            }\r\n                        }\r\n                        for (let item of Object.keys(selIds)) {\r\n                            if (selIds[item]) {\r\n                                // 有个数据没有子数据  但是应该也算一行数据\r\n                                bodyAmount += (selIds[item].length || 1);\r\n                            }\r\n                        }\r\n                        transferTable.allSelected.masterCheckedId = masterCheckedId;\r\n                        transferTable.allSelected.masterAmount = Object.keys(selIds).length;\r\n                        transferTable.allSelected.bodyAmount = bodyAmount;\r\n                    }\r\n                }\r\n            }\r\n            // 后续可以优化下\r\n            // 由于刘奇那边有个统计  所以这里触发一下onCheckedChange  NCCLOUD-158999\r\n        } else if (this.props.onCheckedChange) {\r\n            for (let items of Object.keys(transferTable)) {\r\n                let onCheckedChange = null,\r\n                    headTableId = '';\r\n                for (let headId of params) {\r\n                    if (items === headId.headTableId) {\r\n                        headTableId = headId.headTableId;\r\n                        onCheckedChange = headId.onCheckedChange;\r\n                        break;\r\n                    }\r\n                }\r\n                if (items !== 'allSelected' && transferTable.hasOwnProperty(headTableId)) {\r\n                    let dataKeys = Object.keys(Object.keys(transferTable[items][headTableId]['bodyData']).length ? transferTable[items][headTableId]['bodyData']['data'] : {}),\r\n                        selected = transferTable[items]['selected']['selectedData'],\r\n                        childSelect = selected && selected.childSelData,\r\n                        childSelectKeys = Object.keys(childSelect),\r\n                        masterSelect = selected && selected.masterSelData,\r\n                        masterSelectKeys = Object.keys(masterSelect);\r\n                    if (childSelectKeys.length) {\r\n                        for (let citems of childSelectKeys) {\r\n                            let onChecked = {\r\n                                body: [],\r\n                                head: masterSelect[citems] ? masterSelect[citems].data : {}\r\n                            };\r\n                            let childSelectItem = childSelect[citems],\r\n                                childSelectItemsKeys = Object.keys(childSelectItem);\r\n                            for (let item of childSelectItemsKeys) {\r\n                                onChecked.body.push(childSelectItem[item].data.values ? childSelectItem[item].data.values : childSelectItem[item].data);\r\n                            }\r\n                            if (Object.keys(onChecked.head).length && typeof onCheckedChange === 'function') {\r\n                                let headIndex = dataKeys.indexOf(citems);\r\n                                onCheckedChange(true, JSON.parse(JSON.stringify(onChecked.head)), headIndex, JSON.parse(JSON.stringify(onChecked.body)));\r\n                            }\r\n                        }\r\n                    } else if (masterSelectKeys.length) {\r\n                        for (let mitems of masterSelectKeys) {\r\n                            if (!pk.includes(mitems)) {\r\n                                if (typeof onCheckedChange === 'function') {\r\n                                    onCheckedChange(true, JSON.parse(JSON.stringify(masterSelect[mitems].data)), masterSelectKeys.indexOf(mitems), []);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            console.log('么得数据！么得PK！');\r\n        }\r\n    };\r\n\r\n    /*\r\n    *  控制行展开图标是否显示，当子表模板找不到并且子表数据为空数组时，设置展开图标隐藏\r\n        headTableId:String 转单主表ID\r\n        record:将要渲染的这行主表的数据\r\n        index：将要渲染的这行主表的索引\r\n        函数返回false显示展开icon，反之不显示\r\n    */\r\n    haveExpandIcon = (headTableId, isSelected, record, index) => {\r\n        let { bodyColumn, currentTable, transferTable } = this.props,\r\n            haveBodyData;\r\n\r\n\r\n        // console.log(bodyColumn);\r\n        if (isSelected) {\r\n            let childSelData = transferTable.allSelected.selectedData.childSelData,\r\n                expand = childSelData ? (childSelData[record.key] || {}) : {},\r\n                childSelDatalen = Object.keys(expand) && Object.keys(expand).length;\r\n            return !childSelDatalen;\r\n        } else {\r\n            if (transferTable &&\r\n                transferTable[headTableId] &&\r\n                transferTable[headTableId].outerData\r\n            ) {\r\n                // 为了解决滑动加载index不正确问题  不能使用index了\r\n                // let rowId = transferTable[headTableId].outerData[index].rowId;\r\n                let rowId = record.key || record.headKey;\r\n                if (currentTable &&\r\n                    currentTable.bodyData &&\r\n                    currentTable.bodyData.data &&\r\n                    currentTable.bodyData.data[rowId]\r\n                ) {\r\n                    if (currentTable.bodyData.data[rowId].rows.length > 0) {\r\n                        haveBodyData = true; // TODO 无用代码 待清理\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            _this,\r\n            clearAllSelectedData,\r\n            createNewCol, //处理模板 在模板数据上加checkbox、序号或者操作列 的方法\r\n            cutParams,\r\n            isHeadTotal, //主表是否合计\r\n            isFullTotal, //拉平表是否合计\r\n            params,\r\n            expandedRowRender,\r\n            fullColumns,\r\n            getMasterData,\r\n            headPkIds,\r\n            bodyPkIds,\r\n            getSelectedFullData,\r\n            handleChangeView,\r\n            showChangeViewBtn,\r\n            handleGenerateClick,\r\n            handleTabClick,\r\n            showAll,\r\n            showSeletedBtn,\r\n            showGenerateBtn,\r\n            isDrag,\r\n            selectArea,\r\n            selectedHeaderRender,\r\n            selectedAmount,\r\n            setSelectedColumns,\r\n            transferBtnText,\r\n            transferTable,\r\n            totalKey,\r\n            totalTitle,\r\n            containerSelector,\r\n            sortType,\r\n            onExpandedChange,\r\n            meta,\r\n            allHeadId,\r\n            allFullTableId,\r\n            cancelCustomRightMenu,\r\n            isShowBodyAmount,\r\n            autoHeight,\r\n            headTableId,\r\n        } = this.props;\r\n        let {\r\n            json,\r\n            LangData,\r\n            listHeight, // 整个单据的高度 42为底部灰条高度 5预留滚动条的位置， 35表格头部的高度\r\n            selectedListHeight,\r\n            fixedWidth,\r\n        } = this.state;\r\n        //外层容器宽度\r\n        let containerWidth = document.querySelector(containerSelector) && document.querySelector(containerSelector).clientWidth;\r\n        let fixedCss = this.transfertableMainIsModalSChild ? {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            width: 'auto', left: '0', right: '0'\r\n        } : { width: 'auto', left: '15px', right: '15px' };\r\n\r\n        let allListCSS = (!showAll || (showAll && !transferTable.allSelected.selectedShow)) ? {} : {\r\n            height: 0,\r\n            width: 0,\r\n            opacity: 0\r\n        };\r\n        let allListCSScls = (!showAll || (showAll && !transferTable.allSelected.selectedShow)) ? 'showAllListCssCls' : '';\r\n        // 已选列表转单css\r\n        let showSelectedListCSS = (showAll && transferTable.allSelected.selectedShow) ? 'showSelectedList' : '';\r\n        let selectedColumn = createNewCol(undefined, this.state.json);\r\n        let selectedFullColumn = createNewCol(fullColumns, this.state.json, 'full');\r\n        let selectNestTotalColumns = this.createSelectColumns(setSelectedColumns(createNewCol(undefined, this.state.json), this.state.json), true, this.state.json);\r\n        let selectFullTotalColumns = this.createSelectColumns(setSelectedColumns(selectedFullColumn, this.state.json), true, this.state.json);\r\n        selectedListHeight = autoHeight ? selectedListHeight : 400;\r\n        listHeight = autoHeight ? listHeight : 400;\r\n        let transferTableMainHeight = (showAll && transferTable.allSelected.selectedShow) ? selectedListHeight : listHeight;\r\n        // 浏览器修正 滚动条多8px\r\n        let browserDiff = this.myBrowser === 'Firefox' || this.myBrowser === 'IE' ? 8 : 0;\r\n        // 有合计行的表格scroll高度\r\n        let selectedTotalTableScrollYHeight = selectedListHeight - 35 - 45 - 42 - 54 - (browserDiff * 2), // 54 是已选列表界面头部按钮区域的高度\r\n            // 已选列表无合计行表格的scroll高度\r\n            selectedNoTotalTableScrollYHeight = selectedListHeight - 35 - 42 - 54 - browserDiff;\r\n\r\n        const getCurrentFieldId = () => {\r\n            if (Array.isArray(params)) {\r\n                let activeIndex = this.activeTab || 0;\r\n                return params[activeIndex].fieldId;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={`multitransfer-container multi-transfertable-main transfertable-main-${this.myBrowser || 'chrome'}`}\r\n                ref={this.multiTransfertableMain}\r\n                style={{\r\n                    // 这个高度 在页面resize的时候 不能重新计算\r\n                    height: `${transferTableMainHeight ? transferTableMainHeight + 'px' : 'auto'}`,\r\n                    position: 'relative',\r\n                    overflow: 'hidden'\r\n                }}\r\n            >\r\n                <div style={allListCSS} className={allListCSScls}>\r\n                    <NCTabs\r\n                        activeKey={String(_this.state.transferTable.allSelected.activeTab)}\r\n                        onChange={(key) => {\r\n                            this.activeTab = key;\r\n                            handleTabClick(key);\r\n                            // 这里加这个方法是可以解决切换页签不计算的问题  但是也会导致多渲染一次  bbqin\r\n                            this.onresizeEvents({ windowResize: true });\r\n                        }}\r\n                        animated={false}\r\n                    >\r\n                        {/* 全部列表*/}\r\n                        {params &&\r\n                            params.map((item, index) => {\r\n                                let { tabName, searchArea, onTabClick, containerSelector, ...transferParams } = item;\r\n                                transferParams.showSeletedArea = !showAll; //有全部页签的多来源不显示单个已选列表\r\n                                transferParams.showSeletedBtn = showAll; //普通多来源不显示查看已选按钮\r\n                                transferParams.showGenerateBtn = showGenerateBtn; //普通多来源不显示查看已选按钮\r\n\r\n                                return cutParams.includes(index) ? (\r\n                                    ''\r\n                                ) : (\r\n                                        <NCTabPane tab={item.tabName} key={index}>\r\n                                            <div className=\"multi-transfer-container\">\r\n                                                {/* 查询区域 */}\r\n                                                <div className={`${searchArea ? 'transfer-search-container' : 'transfer-search-container-space'}`}>\r\n                                                    {searchArea && searchArea()}\r\n                                                </div>\r\n                                                {/* 转单区域 */}\r\n                                                <div>\r\n                                                    {_this.transferTable.createTransferTable({\r\n                                                        ...transferParams,\r\n                                                        isMultiChild: true,\r\n                                                        headPkIds,\r\n                                                        bodyPkIds,\r\n                                                        containerSelector,\r\n                                                        showChangeViewBtn,\r\n                                                        getMultiChildChangeWidth: getMultiChildChangeWidth.bind(this),\r\n                                                        onExpandedChange,\r\n                                                        meta\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </NCTabPane>\r\n                                    );\r\n                            })}\r\n                    </NCTabs>\r\n\r\n                </div>\r\n                <div className={`${showSelectedListCSS} selected-list-wrapper`}>\r\n                    { //有全部页签-----已选列表\r\n                    }\r\n                    <div className=\"selected-list\">\r\n                        <div className=\"header-area\">\r\n                            <span className=\"selected-icon-back-btn\">\r\n                                <NCBackBtn\r\n                                    onClick={this.closeSelectedList}\r\n                                    className=\"back-transfer-list\"\r\n                                />\r\n                            </span>\r\n                            <span className=\"header-title\">{json['page-transferTable-0002'] || '已选列表'}</span>\r\n                            <div className=\"header-right\">\r\n                                <div className=\"header-right-inner\">\r\n                                    <span className=\"header-right-change-view-area\">\r\n                                        {showChangeViewBtn === true && (\r\n                                            <NCToggleViewBtn\r\n                                                tooltips={[json['page-transferTable-0023'], json['page-transferTable-0022']]}\r\n                                                className=\"selected-toggle-view\"\r\n                                                expand={!!transferTable.allSelected.showFullTable}\r\n                                                onClick={handleChangeView.bind(this)}\r\n                                            />\r\n                                        )}\r\n                                    </span>\r\n                                    <span className=\"clear-selected-item-view-btn\">\r\n                                        <Button\r\n                                            className=\"item\"\r\n                                            onClick={clearAllSelectedData.bind(this)}\r\n                                            fieldid=\"clearAll\"\r\n                                        >\r\n                                            {\r\n                                                json['page-transferTable-0013'] || '清空'\r\n                                            }\r\n                                        </Button>\r\n                                    </span>\r\n                                    <div className=\"header-right-custom-area\">{selectedHeaderRender && selectedHeaderRender()}</div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        {showAll ? (\r\n                            <div\r\n                                className=\"content-area\"\r\n                                ref={this.multiTransfertableSelectedList}\r\n                            >\r\n                                <div fieldid={getSysFieldid('selected-list_table')} className={`${uniqueTagCls}`}>\r\n                                    {!transferTable.allSelected.showFullTable ? //主子/单表\r\n                                        (isHeadTotal && selectedColumn ? (\r\n                                            <ComplexTable\r\n                                                className=\"insertTable multi-transfer-selected-wrapper multi-transfertable-total-selected-wrapper\"\r\n                                                // createNewCol 处理所有的列使其符合规范  createNewCol() 默认生成非固定列的主体部分\r\n                                                columns={setSelectedColumns(selectedColumn, this.state.json)}\r\n                                                sort={sortType}\r\n                                                data={getMasterData(transferTable.allSelected.selectedData, params)}\r\n                                                expandedRowRender={(record, index) => expandedRowRender(record, index, this.state.json, uniqueTagCls)}\r\n                                                haveExpandIcon={this.haveExpandIcon.bind(this, allHeadId, true) || undefined}\r\n                                                rowKey={(record) => record.key}\r\n                                                scroll={{ x: true, y: selectedTotalTableScrollYHeight }}\r\n                                                isTotal={true}\r\n                                                // lazyload={false}\r\n                                                isDrag={isDrag}\r\n                                                bodyStyle={{ height: selectedTotalTableScrollYHeight }}\r\n                                                totalData={this.processingTotalData(\r\n                                                    transferTable.allSelected.selectedData,\r\n                                                    'master',\r\n                                                    selectedColumn,\r\n                                                    false\r\n                                                )}\r\n                                                totalColumns={selectNestTotalColumns}//合计行表格的模板数据\r\n                                                updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                                tableType='transfer'\r\n                                                foldingRowChange={isEllipsis => {\r\n                                                    _this.state.transferTable['allSelected']['isEllipsis'] = isEllipsis\r\n                                                    _this.setState({ transferTable: _this.state.transferTable })\r\n                                                }}\r\n                                                bodyDisplayInRow={_this.state.transferTable['allSelected']['isEllipsis']}\r\n                                                cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                                colsSettingParam={getcolsSettingParam.call(_this, meta, allHeadId)}\r\n                                            />\r\n                                        )\r\n                                            : (\r\n                                                <ComplexTable\r\n                                                    className=\"insertTable multi-transfer-selected-wrapper\"\r\n                                                    columns={setSelectedColumns(selectedColumn, this.state.json)}\r\n                                                    sort={sortType}\r\n                                                    data={getMasterData(transferTable.allSelected.selectedData, params)}\r\n                                                    expandedRowRender={(record, index) => expandedRowRender(record, index, this.state.json, uniqueTagCls)}\r\n                                                    haveExpandIcon={this.haveExpandIcon.bind(this, allHeadId, true) || undefined}\r\n                                                    rowKey={(record) => record.key}\r\n                                                    scroll={{ x: true, y: selectedNoTotalTableScrollYHeight }}\r\n                                                    // lazyload={false}\r\n                                                    isDrag={isDrag}\r\n                                                    bodyStyle={{ height: selectedNoTotalTableScrollYHeight }}\r\n                                                    updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                                    tableType='transfer'\r\n                                                    //折行回调\r\n                                                    foldingRowChange={isEllipsis => {\r\n                                                        _this.state.transferTable['allSelected']['isEllipsis'] = isEllipsis\r\n                                                        _this.setState({ transferTable: _this.state.transferTable })\r\n\r\n                                                    }}\r\n                                                    bodyDisplayInRow={_this.state.transferTable['allSelected']['isEllipsis']}\r\n                                                    colsSettingParam={getcolsSettingParam.call(_this, meta, allHeadId)}\r\n                                                    cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                                />\r\n                                            )\r\n                                        ) : //拉平\r\n                                        (isFullTotal && selectedFullColumn ? (\r\n                                            <ComplexTable\r\n                                                className=\"insertTable total-table-wrapper multi-transfer-selected-wrapper\"\r\n                                                lazyload={true}\r\n                                                isDrag={isDrag}\r\n                                                columns={setSelectedColumns(selectedFullColumn, this.state.json)}\r\n                                                sort={sortType}\r\n                                                data={getSelectedFullData(transferTable.allSelected.selectedData, params)}\r\n                                                scroll={{ x: true, y: selectedTotalTableScrollYHeight }}\r\n                                                isTotal={true}\r\n                                                totalData={this.processingTotalData(\r\n                                                    transferTable.allSelected.selectedData,\r\n                                                    'full',\r\n                                                    setSelectedColumns(selectedFullColumn, this.state.json),\r\n                                                    true\r\n                                                )}\r\n                                                totalColumns={selectFullTotalColumns}\r\n                                                bodyStyle={{ height: selectedTotalTableScrollYHeight }}\r\n                                                updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                                tableType='transfer'\r\n                                                //折行回调\r\n                                                foldingRowChange={isEllipsis => {\r\n                                                    _this.state.transferTable['allSelected']['isEllipsis'] = isEllipsis\r\n                                                    _this.setState({ transferTable: _this.state.transferTable })\r\n                                                }}\r\n                                                bodyDisplayInRow={_this.state.transferTable['allSelected']['isEllipsis']}\r\n                                                colsSettingParam={getcolsSettingParam.call(_this, meta, allFullTableId)}\r\n                                                cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                            />\r\n                                        )\r\n                                            : (\r\n                                                <ComplexTable\r\n                                                    className=\"insertTable multi-transfer-selected-wrapper\"\r\n                                                    lazyload={true}\r\n                                                    isDrag={isDrag}\r\n                                                    columns={setSelectedColumns(createNewCol(fullColumns, this.state.json, 'full'), this.state.json)}\r\n                                                    sort={sortType}\r\n                                                    data={getSelectedFullData(transferTable.allSelected.selectedData, params)}\r\n                                                    scroll={{ x: true, y: selectedNoTotalTableScrollYHeight }}\r\n                                                    bodyStyle={{ height: selectedNoTotalTableScrollYHeight }}\r\n                                                    updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                                                    tableType='transfer'\r\n                                                    //折行回调\r\n                                                    foldingRowChange={isEllipsis => {\r\n                                                        _this.state.transferTable['allSelected']['isEllipsis'] = isEllipsis\r\n                                                        _this.setState({ transferTable: _this.state.transferTable })\r\n                                                    }}\r\n                                                    bodyDisplayInRow={_this.state.transferTable['allSelected']['isEllipsis']}\r\n                                                    colsSettingParam={getcolsSettingParam.call(_this, meta, allFullTableId)}\r\n                                                    cancelCustomRightMenu={cancelCustomRightMenu}\r\n                                                />\r\n                                            ))\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ) : ''}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {// 有全部页签----底部固定灰条\r\n                    showAll ? (\r\n                        <div className=\"fixed-bottom-outer\" style={fixedCss} fieldid={getSysFieldid('bottom-area')}>\r\n                            <div className=\"fixed-bottom-container bottom-area-container\">\r\n                                {showSeletedBtn && (\r\n                                    <div className=\"area-left\">\r\n                                        {_this.state.transferTable.allSelected.selectedShow ? (\r\n                                            <Button className=\"middle-btn\" onClick={this.closeSelectedList} fieldid=\"alllist\">\r\n                                                {this.state.json['page-transferTable-0003'] || '全部列表-2'} {/*国际化处理 全部列表*/}\r\n                                            </Button>\r\n                                        ) : (\r\n                                                <Button\r\n                                                    className=\"middle-btn\"\r\n                                                    fieldid=\"selected\"\r\n                                                    onClick={this.viewSelectedList}\r\n                                                // disabled={selectedAmount.bodyAmount == 0}\r\n                                                >\r\n                                                    {this.state.json['page-transferTable-0004'] || '查看已选-2'} {/*国际化处理 全部列表*/}\r\n                                                </Button>\r\n                                            )}\r\n                                    </div>\r\n                                )}\r\n\r\n                                <div className=\"area-center\">\r\n                                    <span>\r\n                                        {/* <span>\r\n                                            {LangData && LangData.get('page-transferTable-0015', { n: selectedAmount.masterAmount }) || `合计: ${selectedAmount.masterAmount}条`}\r\n                                        </span> */}\r\n                                        <span>\r\n                                            {this.state.json['page-transferTable-0010']}\r\n                                            :\r\n                                            <span>{selectedAmount.masterAmount}</span>\r\n                                            {this.state.json['page-transferTable-0017']}\r\n                                        </span>\r\n                                        {isShowBodyAmount && (\r\n                                            <span\r\n                                                style={{ marginLeft: 8 }}\r\n                                            >\r\n                                                {this.state.json['page-transferTable-0018']}\r\n                                                :\r\n                                                <span>{selectedAmount.bodyAmount}</span>\r\n                                                {this.state.json['page-transferTable-0019']}\r\n                                            </span>\r\n                                        )}\r\n                                    </span>\r\n                                </div>\r\n                                {selectArea ? (\r\n                                    <div className=\"area-custom\">\r\n                                        {selectArea && typeof selectArea == 'function' && selectArea()}\r\n                                    </div>\r\n                                ) : (\r\n                                        ''\r\n                                    )}\r\n                                {totalKey.length && totalTitle.length ? (\r\n                                    <span>\r\n                                        {this.customAggregate()}\r\n                                    </span>\r\n                                ) : ''}\r\n                                {cutParams.map((item, index) => {\r\n                                    let hideHtml = {};\r\n                                    if (index != transferTable.allSelected.activeTab) {\r\n                                        hideHtml = { display: 'none' };\r\n                                    }\r\n                                    return (\r\n                                        item.selectArea && (\r\n                                            <div className=\"area-custom\" style={hideHtml}>\r\n                                                {typeof item.selectArea == 'function' && item.selectArea()}\r\n                                            </div>\r\n                                        )\r\n                                    );\r\n                                })}\r\n\r\n                                {showGenerateBtn && (\r\n                                    <div className=\"area-right\">\r\n                                        <Button\r\n                                            //fieldid=\"generate\"\r\n                                            fieldid={getCurrentFieldId() || \"generate\"}\r\n                                            className=\"main-button large-btn\"\r\n                                            onClick={handleGenerateClick.bind(this)}\r\n                                            disabled={isShowBodyAmount ? selectedAmount.bodyAmount === 0 && selectedAmount.masterAmount === 0 : selectedAmount.masterAmount === 0}\r\n                                        >\r\n                                            {transferBtnText}\r\n                                        </Button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                            ''\r\n                        )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nCreateMultiTransferTable.defaultProps = {\r\n    isTotal: true\r\n};\r\n","/**\r\n * 多来源转单\r\n * Created by liyaoh on 2018/5/22.\r\n */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport EllipsisToTooltip from './ellipsisToTooltip';\r\nimport CreateMultiTransferTable from './CreateMultiTransferTable';\r\nimport { isTimeType, getLangCode, changeTime, formatAcuracy, commafy, getSysFieldid, ViewModel, sum, linkTo, formatNumber, formatDatetime } from '@platform/api'\r\nimport { Table as NCTable } from '@platform/base'\r\nimport {\r\n    thounsandTransfer,\r\n    formatDot,\r\n    linkage,\r\n    sortColumn,\r\n    updateTransferDataAfterSort,\r\n    updateColumnAfterSetting,\r\n    getExpandTableHeight,\r\n    checkboxSwitchValue,\r\n    getcolsSettingParam,\r\n} from './methods';\r\n\r\nimport { lib } from '@platform/table-core';\r\nimport classnames from 'classnames';\r\nrequire('./index.less');\r\n\r\nconst { total } = lib;\r\n\r\nconst ComplexTable = total(NCTable.SortTable);\r\n\r\nconst defaultColor = ['#111111', '#555555', '#111', '#555'];\r\n\r\nconst hasObjProperty = function (obj) {\r\n    return !!(obj && Object.values(obj).length);\r\n};\r\n\r\n//创建转单 params:单来源转单参数\r\nexport function createMultiTransferTable({\r\n    showAll = false,\r\n    allHeadId, // 全部页签的转单主表ID\r\n    allBodyId, // 全部页签的转单子表ID\r\n    allFullTableId, // 全部页签的转单主子拉平ID\r\n    dataSource, // 缓存ID\r\n    headPkIds, // 点击生成按钮的时候需要保存的所有页签主表IDs 集合\r\n    bodyPkIds, // 点击生成按钮的时候需要保存的所有页签子表IDs 集合\r\n    containerSelector, // 转单的容器元素，用来计算转单的宽\r\n    componentInitFinished, //componentInitFinished 转单初始化完后的回调函数\r\n    transferBtnText, // 生成下游转单的按钮的title\r\n    showSeletedBtn = true, //转单显示查看已选按钮\r\n    showGenerateBtn = true, //显示 生成下游转单的按钮\r\n    onTransferBtnClick, // 点击生成按钮的回调函数\r\n    onCheckedChange, // 切换复选框选中状态的回调函数\r\n    onSelectedBtnClick, //查看已选列表按钮的点击回调函数\r\n    onChangeViewClick, // 切换视图的回调函数\r\n    showChangeViewBtn = true, //已选列表页面 切换主子表/拉平表 的按钮显示控制 Boolean\r\n    showAllList, // 点击全部列表的回调函数\r\n    onTabClick, // 页签切换的回调函数\r\n    selectArea, // 底部灰条自定义区域\r\n    selectedHeaderRender, // 已选列表头部自定义区域\r\n    onClearAll, // 全消回调函数\r\n    onSelectedItemRemove, //已选列表清除回调\r\n    tabActiveIndex, // 设置显示params中定义的第几个tab （默认为'0'，params参数第一个参数的下标）类型Number / String 类型\r\n    hideTabs, // 设置隐藏params中定义的哪几个tab （默认为全不隐藏） 类型Arry 如： ['0', '2'] 则隐藏params中第1个和第三个tab\r\n    totalKey = [], // 自定义总计字段\r\n    totalTitle = [], // 自定义总计名\r\n    isDrag = false, // 自定义总计名\r\n    sortType = {\r\n        mode: 'single', //'multiple'(多列排序) 或'single'(单列排序)(如果前端排序的时候想多列排序，对象里就穿这个字段就可以了),\r\n        backSource: false, //false是前端排序，值为true为后端排序,默认false\r\n        sortFun: (sortInfoObj, sortData) => { //sortInfoObj:{field:是模板的dataIndex,order:\"ascend\"升序/\"descend\"降序} , sortData:[]排序后的数据\r\n            updateTransferDataAfterSort(sortData, allHeadId, this, sortInfoObj);\r\n        },\r\n    },\r\n    cancelCustomRightMenu = false,\r\n    onExpandedChange, //主子表点击加号的回调 function\r\n    customSortRule, //自定义排序规则\r\n    fieldid,\r\n    currentPageId,\r\n    isShowBodyAmount = true,\r\n    autoHeight = true,\r\n},\r\n    params, //Array 多个页签的转单参数 具体参数可以参考create.js里createTransferTable的参数\r\n) {\r\n    if (dataSource) {\r\n        this.transferTableDataSource = dataSource;\r\n    }\r\n    if (!this.state.transferTable.hasOwnProperty('allSelected')) {\r\n        this.state.transferTable['allSelected'] = {\r\n            activeTab: tabActiveIndex || '0', //当前高亮tab\r\n            selectedShow: false, //显示已选列表\r\n            masterAmount: 0, //主表已选数量\r\n            bodyAmount: 0, //子表已选数量\r\n            masterCheckedId: [], //存放已选主表id，用于复选框半选\r\n            selIds: {}, //存放其他页签的主子表id\r\n            showFullTable: false, //已选列表中是否显示主子拉平\r\n            isEllipsis: true,\r\n            selectedData: {\r\n                selAll: false,\r\n                masterSelData: {},\r\n                childSelData: {},\r\n            },\r\n        };\r\n        if (tabActiveIndex) {\r\n            onTabClick && onTabClick(tabActiveIndex);\r\n        }\r\n    }\r\n\r\n    this.state.transferTable['allSelected']['params'] = Array.isArray(params) ?\r\n        params.map(item => ({ bodyTableId: item.bodyTableId, headTableId: item.headTableId, fullTableId: item.fullTableId,fieldId:item.fieldId }))\r\n        : [];\r\n\r\n    const _this = this;\r\n    let bodyColumns = allBodyId && this.state.meta[allBodyId] ? this.state.meta[allBodyId].items.map((val, index) => {\r\n        sortColumn(val, sortType, customSortRule);\r\n        // 清理required 属性  不然会导致表头错行\r\n        if (val && val.required) {\r\n            delete val.required;\r\n        }\r\n        return val;\r\n    }) : [];\r\n\r\n    let headColumns = allHeadId && this.state.meta[allHeadId] ? this.state.meta[allHeadId].items.map((val, index) => {\r\n        sortColumn(val, sortType, customSortRule);\r\n        // 清理required 属性  不然会导致表头错行\r\n        if (val && val.required) {\r\n            delete val.required;\r\n        }\r\n        return val;\r\n    }) : [];\r\n\r\n    let fullColumns = allFullTableId && this.state.meta[allFullTableId] ? this.state.meta[allFullTableId].items.map((val, index) => {\r\n        sortColumn(val, sortType, customSortRule);\r\n        // 清理required 属性  不然会导致表头错行\r\n        if (val && val.required) {\r\n            delete val.required;\r\n        }\r\n        return val;\r\n    }) : []; //主子拉平模板\r\n\r\n    let { transferTable } = this.state;\r\n\r\n    let traversalStatus = this.myState.status.traversalStatus; // 是否遍历模板的状态\r\n\r\n    // 根据表单类型从模板中判断表格是否是有合计的表格\r\n\r\n    //判断合计行是否显示\r\n    const traversalColumns = columns => {\r\n        for (let items of columns) {\r\n            if (items.istotal) {\r\n                this.myState.status.totalStatusOfTransferTable = true;\r\n                this.myState.status.traversalStatus = true;\r\n            } else if (items.data) {\r\n                for (let item of items.data) {\r\n                    if (item.istotal) {\r\n                        this.myState.status.totalStatusOfTransferTable = true;\r\n                        this.myState.status.traversalStatus = true;\r\n                    }\r\n                }\r\n            }\r\n            if (this.myState.status.traversalStatus) {\r\n                break;\r\n            }\r\n        }\r\n        traversalColumn.call(this, columns[0].data, 'head');\r\n        traversalColumn.call(this, columns[1].data, 'full');\r\n        traversalColumn.call(this, columns[2].data, 'body');\r\n    };\r\n\r\n    //设置主表、子表、拉平表的合计行是否显示\r\n    const traversalColumn = (column, key) => {\r\n        if (column) {\r\n            for (let items of column) {\r\n                if (items.istotal) {\r\n                    this.myState.status[`${key}TotalStatusOfTransferTable`] = true;\r\n                    this.myState.status[`${key}traversalStatus`] = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //查看是否遍历了合计状态\r\n    if (!traversalStatus) {\r\n        let columnsArr = [\r\n            { data: headColumns, title: 'columns' },\r\n            { data: fullColumns, title: 'columns' },\r\n            {\r\n                data: bodyColumns,\r\n                title: 'columns',\r\n            },\r\n        ];\r\n        traversalColumns.bind(this, columnsArr)();\r\n    }\r\n    this.onTabClick = onTabClick;\r\n    this.onClearAll = onClearAll;\r\n    this.onSelectedItemRemove = onSelectedItemRemove; //已选列表清除回调\r\n    // 设置默认隐藏后的剩余params\r\n    let cutParams = [];\r\n    let paramsLength = params.length;\r\n    if (hideTabs) {\r\n        for (let i = 0; i < paramsLength; i++) {\r\n            if (hideTabs.includes(i)) {\r\n                cutParams.push(i);\r\n            }\r\n        }\r\n    } else {\r\n        cutParams = params;\r\n    }\r\n\r\n    const switchValue = (value, json) => {\r\n        if (value) {\r\n            return (json && json['page-transferTable-0020']) || '是';\r\n        } else {\r\n            return (json && json['page-transferTable-0021']) || '否';\r\n        }\r\n    };\r\n\r\n    // 处理模板\r\n    const createNewCol = (column, json, columnType) => {\r\n        let result = [];\r\n        let pageId = currentPageId || (this.state && this.state.meta.pageid);\r\n        if (!this.state.meta[allHeadId] && !column) {\r\n            // return false 会导致报错\r\n            return [];\r\n        }\r\n        let columnData = column || this.state.meta[allHeadId].items;\r\n        columnData.map(item => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                render = (text, record, index) => {\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let scale = record[item.attrcode].scale;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n\r\n                        if (isTimeType(item.itemtype)) {\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype == 'switch') {\r\n                            dom = switchValue(value, json);\r\n                        } else if (item.itemtype == 'checkbox_switch') {\r\n                            dom = checkboxSwitchValue(value, false, json);\r\n                        }\r\n                        if (item.itemtype == 'number') {\r\n                            let recordScale = scale || (item.scale ? item.scale : '-1');\r\n                            dom = formatDot(dom, recordScale);\r\n                            dom = formatAcuracy(dom, recordScale);\r\n                            dom = formatNumber(dom);\r\n                        }\r\n                        return (\r\n                            <span className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}>{\r\n                                dom ? (\r\n                                    <EllipsisToTooltip overlay={dom}>\r\n                                        {item.hyperlinkflag && dom ? (\r\n                                            <a\r\n                                                href=\"javascript:;\"\r\n                                                className=\"hyper-link\"\r\n                                                onClick={e => {\r\n                                                    e.stopPropagation();\r\n                                                    let moduleId = columnType === 'child' ? allBodyId : columnType === 'full' ? allFullTableId : allHeadId;\r\n                                                    linkTo(pageId, moduleId, item.attrcode, value || dom);\r\n                                                }}\r\n                                            >\r\n                                                {dom}\r\n                                            </a>\r\n                                        ) : (<span>{dom}&nbsp;</span>)}\r\n                                    </EllipsisToTooltip>\r\n                                ) : <span>{dom}&nbsp;</span>}\r\n                            </span>\r\n                        );\r\n\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return record[item.attrcode] ? (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index,\r\n                                )}\r\n                                noEllipsis\r\n                            >\r\n                                <div className={classnames(\r\n                                    'col-customer-render-unit',\r\n                                    {\r\n                                        'single-line-and-ellipsis': this.state.transferTable['allSelected']['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable['allSelected']['isEllipsis'],\r\n                                    })\r\n                                }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        ) : record[item.attrcode];\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (item.visible) {\r\n                result.push({\r\n                    ...item,\r\n                    width,\r\n                    render,\r\n                    key: item.attrcode,\r\n                    dataIndex: item.dataIndex || item.attrcode,\r\n                    title: <span\r\n                        className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : 'text-td-span-wrapper'}  ${item.className || ''}`}\r\n                        style={{ color: defaultColor.includes(item.color) ? '' : item.color }}\r\n                    > {item.label}\r\n                    </span>,\r\n                });\r\n            }\r\n        });\r\n        console.log('子表模板数据', result);\r\n        return result;\r\n    };\r\n\r\n    // 保留合计的最长小数位精度 nowVal: 当前要加的值， totalVal： 之前合计好的值\r\n    const getTheLongestPrecision = (nowVal, totalVal) => {\r\n        if (nowVal === '' || nowVal === null || nowVal === 'null') {\r\n            return totalVal;\r\n        }\r\n        let nowValArr = String(nowVal).split('.');\r\n        let totalValArr = String(totalVal).split('.');\r\n        let nowValLen = nowValArr.length >= 2 ? String(nowValArr[1]).length : 0;\r\n        let totalValLen = totalValArr.length >= 2 ? String(totalValArr[1]).length : 0;\r\n        // let addVal = Number.parseFloat(nowVal) + Number.parseFloat(totalVal);\r\n        nowVal = thounsandTransfer(nowVal, 'number');\r\n        totalVal = thounsandTransfer(totalVal, 'number');\r\n        let addVal = accAdd(Number.parseFloat(nowVal), Number.parseFloat(Number(totalVal)));\r\n        let addValArr = String(addVal).split('.');\r\n        let addValLen = addValArr.length >= 2 ? String(addValArr[1]).length : 0;\r\n        if (totalValLen >= nowValLen) {\r\n            let zeroO = '';\r\n            for (let i = 0; i < totalValLen - addValLen; i++) {\r\n                zeroO += '0';\r\n            }\r\n            let bool = String(addVal).includes('.') ? `${addVal}${zeroO}` : `${addVal}.${zeroO}`;\r\n            return Number(bool).toFixed(totalValLen);\r\n        } else {\r\n            let zeroO = '';\r\n            for (let i = 0; i < nowValLen - addValLen; i++) {\r\n                zeroO += '0';\r\n            }\r\n            let bool = String(addVal).includes('.') ? `${addVal}${zeroO}` : `${addVal}.${zeroO}`;\r\n            return Number(bool).toFixed(nowValLen);\r\n        }\r\n    };\r\n\r\n    /*子表添加复选框列和序号\r\n     *\r\n     * @param {Array} columns 渲染子表的每一列的属性数据 [{},{},...]\r\n     * @param {*} records\r\n     * @param {*} indexs\r\n     * @param {*} comType\r\n     * @param {*} json\r\n     */\r\n    const renderColumnsMultiSelectChild = (columns, records, indexs, json) => {\r\n        let indexCol = {\r\n            label: json && json['page-transferTable-0007'] || '序号-8',\r\n            itemtype: 'customer',\r\n            attrcode: 'numberindex',\r\n            dataIndex: 'numberindex',\r\n            visible: true,\r\n            width: 60,\r\n            className: 'col-customer-numberindex',\r\n            render: (text, record2, index) => {\r\n                return <span>{index + 1}</span>;\r\n            },\r\n        }; // 添加序号列\r\n\r\n        let oprColumn = {\r\n            label: <span>{json['page-transferTable-0006'] || '操作-6'}</span>,\r\n            attrcode: 'operate',\r\n            itemtype: 'customer',\r\n            dataIndex: 'operate',\r\n            width: 100,\r\n            fixed: 'right',\r\n            visible: true,\r\n            className: 'col-customer-operate',\r\n            render: (text, record, index) => {\r\n                return (\r\n                    <div\r\n                        className=\"row-remove\"\r\n                        onClick={\r\n                            clearSelectedData.bind(this, 'body', records.key, record.key, record, true)\r\n                        }\r\n                    >\r\n                        {json && json['page-transferTable-0001'] || '移除-1'}\r\n                    </div>\r\n                );\r\n            },\r\n        };\r\n\r\n        return [indexCol, ...columns, oprColumn];\r\n    };\r\n\r\n    //统计已选列表数量\r\n    const getSelectedAmount = () => {\r\n        let allSelected = this.state.transferTable.allSelected; //多来源转单全部页签\r\n        //多来源有全部时统计全部页签的勾选重量\r\n        if (allSelected) {\r\n            let bodys = 0;\r\n            Object.values(allSelected.selIds).forEach(item => {\r\n                // 有个数据没有子数据  但是应该也算一行数据\r\n                bodys += (item.length || 1);\r\n            });\r\n            let masterAmount = Object.keys(allSelected.selIds).length || (allSelected.masterCheckedId && allSelected.masterCheckedId.length);\r\n            let bodyAmount = bodys;\r\n            allSelected.masterAmount = masterAmount;\r\n            allSelected.bodyAmount = bodyAmount;\r\n            return { masterAmount, bodyAmount };\r\n        }\r\n    };\r\n\r\n    let selectedAmount = getSelectedAmount(); //已选数据数量\r\n\r\n    //选择主/子表时记录主表id key:转单id headId:主表id flag:选中/取消选中\r\n    const setMasterId = (key, headId, flag) => {\r\n        let { masterCheckedId, selectedData } = transferTable[key].selected;\r\n        if (!masterCheckedId.includes(headId) && flag) {\r\n            masterCheckedId.push(headId);\r\n        } else if (masterCheckedId.indexOf(headId) !== -1 && !selectedData.selAll) {\r\n            masterCheckedId.splice(masterCheckedId.indexOf(headId), 1);\r\n        }\r\n    };\r\n    /*\r\n    *  清除已选列表对应主/子表数据\r\n    * type： String （nest/body）判断移除的是主表还是子表或者主子拉平的参数\r\n    * headId： String 主表ID\r\n    * bodyId： String 子表ID\r\n    * record： Object 移除的当前行的数据\r\n    * isFull： Boolean 是否是主子拉平\r\n    *\r\n    * */\r\n    const clearSelectedData = (type, headId, bodyId, record, isFull) => {\r\n        let delBodyData;\r\n        for (let key of Object.keys(transferTable)) {\r\n            let selectedData =\r\n                key !== 'allSelected' ? transferTable[key].selected.selectedData : transferTable[key].selectedData;\r\n            let masterSelData = selectedData.masterSelData;\r\n            let childSelData = selectedData.childSelData;\r\n            selectedData.selAll = false;\r\n            if (type === 'head') {\r\n                if (key === 'allSelected') {\r\n                    delBodyData = childSelData[headId] && childSelData[headId]; //记录被删除的子表数据\r\n                }\r\n                delete masterSelData[headId];\r\n                delete childSelData[headId];\r\n                delete transferTable.allSelected.selIds[headId]; //删除全部已选中对应主表id\r\n                delete transferTable.allSelected.selectedData.masterSelData[headId];\r\n            } else if (type === 'body') {\r\n                if (childSelData[headId]) {\r\n                    let childSelDataKeys = Object.keys(childSelData[headId]);\r\n                    if (childSelDataKeys.length) {\r\n                        for (let val of childSelDataKeys) {\r\n                            let selHeadId = transferTable.allSelected.selIds[headId];\r\n                            if (selHeadId && val === bodyId && selHeadId.includes(val)) {\r\n                                //删除全部已选中对应子表id\r\n                                selHeadId.splice(selHeadId.indexOf(val), 1);\r\n                            }\r\n                            if (val === bodyId) {\r\n                                //删除相应页签子表id\r\n                                delete childSelData[headId][val];\r\n                            }\r\n                            // 没有子集就清理父级\r\n                            if (Object.keys(childSelData[headId] || {}).length === 0) {\r\n                                delete childSelData[headId];\r\n                                delete masterSelData[headId];\r\n                                delete transferTable.allSelected.selIds[headId];\r\n                                delete transferTable.allSelected.selectedData.masterSelData[headId];\r\n                                delete transferTable.allSelected.selectedData.childSelData[headId];\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!Object.keys(childSelData[headId] || {}).length && masterSelData[headId]) {\r\n                        // 如果没有子集  这里父子级都需要清理下\r\n                        delete childSelData[headId];\r\n                        delete masterSelData[headId];\r\n                        delete transferTable.allSelected.selIds[headId];\r\n                        delete transferTable.allSelected.selectedData.masterSelData[headId];\r\n                        delete transferTable.allSelected.selectedData.childSelData[headId];\r\n                    }\r\n                }\r\n            }\r\n            if (key !== 'allSelected') setMasterId(key, headId, false);\r\n        }\r\n\r\n        // allSelected setMasterId 同步下 避免 统计数据时出现错误\r\n        transferTable.allSelected.masterCheckedId = Object.keys(transferTable.allSelected.selIds || {});\r\n\r\n        this.setState(\r\n            { transferTable },\r\n            () => {\r\n                let bodySelData = delBodyData\r\n                    ? Object.values(delBodyData).map(item => item.data.values || item.data)\r\n                    : [];\r\n                onSelectedItemRemove && onSelectedItemRemove(record, isFull ? [] : bodySelData);\r\n            },\r\n        );\r\n    };\r\n\r\n    //清空全部选中数据\r\n    const clearAllSelectedData = () => {\r\n        transferTable.allSelected.selectedData.masterSelData = {};\r\n        transferTable.allSelected.selectedData.childSelData = {};\r\n        transferTable.allSelected.selIds = {};\r\n        transferTable.allSelected.masterAmount = 0;\r\n        transferTable.allSelected.bodyAmount = 0;\r\n        transferTable.allSelected.masterCheckedId = [];\r\n        for (let key of Object.keys(transferTable)) {\r\n            if (key !== 'allSelected') {\r\n                transferTable[key].selected.masterCheckedId = []; //清空已选主表id\r\n                transferTable[key].selected.selectedData.selAll = false; //取消全选\r\n                transferTable[key].selected.selectedData.masterSelData = {};\r\n                transferTable[key].selected.selectedData.childSelData = {};\r\n            }\r\n        }\r\n        this.setState(\r\n            { transferTable },\r\n            () => {\r\n                onClearAll && onClearAll();\r\n            },\r\n        );\r\n    };\r\n\r\n    /*\r\n    * 设置已选列表columns\r\n    * columns： Array  已选列表界面表格模板\r\n    * json： Object 多语资源\r\n    * */\r\n    const setSelectedColumns = (columns = [], json) => {\r\n        // 添加序号列\r\n        let indexCol = {\r\n            label: <span>{json['page-transferTable-0007'] || '序号-9'}</span>,\r\n            title: <span>{json['page-transferTable-0007'] || '序号-9'}</span>,\r\n            attrcode: 'numberindex',\r\n            itemtype: 'customer',\r\n            dataIndex: 'numberindex',\r\n            visible: true,\r\n            width: 80,\r\n            className: 'col-customer-selected-numberindex',\r\n            render: (text, record2, index) => {\r\n                return <span>{index + 1}</span>;\r\n            },\r\n        };\r\n        let operateColumn = {};\r\n        if (transferTable.allSelected.showFullTable) {\r\n            operateColumn = {\r\n                title: <span bbq=\"已选拉平移除\">{json['page-transferTable-0006'] || '操作-7'}</span>,\r\n                attrcode: 'operate',\r\n                itemtype: 'customer',\r\n                dataIndex: 'operate',\r\n                width: 81,\r\n                visible: true,\r\n                fixed: 'right',\r\n                className: 'col-customer-operate',\r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <div\r\n                            className=\"row-remove\"\r\n                            onClick={\r\n                                !transferTable.allSelected.showFullTable ? (\r\n                                    clearSelectedData.bind(this, 'head', record.key, '', record, false)\r\n                                ) : (\r\n                                        clearSelectedData.bind(this, 'body', record.headKey, record.key, record, true)\r\n                                    )\r\n                            }\r\n                        >\r\n                            {json && json['page-transferTable-0001'] || '移除-6'}\r\n                        </div>\r\n                    );\r\n                },\r\n            };\r\n        } else {\r\n            operateColumn = {\r\n                title: <span bbq=\"已选非拉平移除\">{json['page-transferTable-0006'] || '操作-9'}</span>,\r\n                attrcode: 'operate',\r\n                itemtype: 'customer',\r\n                dataIndex: 'operate',\r\n                // fixed: 'right',\r\n                width: 81,\r\n                visible: true,\r\n                className: 'col-customer-operate',\r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <div\r\n                            className=\"row-remove\"\r\n                            onClick={\r\n                                !transferTable.allSelected.showFullTable ? (\r\n                                    clearSelectedData.bind(this, 'head', record.key, '', record, false)\r\n                                ) : (\r\n                                        clearSelectedData.bind(this, 'body', record.headKey, record.key, record)\r\n                                    )\r\n                            }\r\n                        >\r\n                            {json && json['page-transferTable-0001'] || '移除-3'}\r\n                        </div>\r\n                    );\r\n                },\r\n            };\r\n        }\r\n        return [indexCol, ...columns, operateColumn];\r\n    };\r\n\r\n    //  处理数据\r\n    const createNewData = data => {\r\n        let datas = [];\r\n        data.map((val, index) => {\r\n            val = val.values || val;\r\n            datas.push(val);\r\n        });\r\n        return datas;\r\n    };\r\n\r\n    /*\r\n    * 将当前项arg1和之前的合计项arg2相加，并将结果进行精度千分位处理\r\n    * arg1： String/Number 当前项\r\n    * arg2： String/Number 之前的合计项\r\n    * */\r\n    const accAdd = (arg1, arg2) => {\r\n        var r1,\r\n            r2,\r\n            m;\r\n        try {\r\n            r1 = arg1.toString().split('.')[1].length;\r\n        } catch (e) {\r\n            r1 = 0;\r\n        }\r\n        try {\r\n            r2 = arg2.toString().split('.')[1].length;\r\n        } catch (e) {\r\n            r2 = 0;\r\n        }\r\n        m = Math.pow(10, Math.max(r1, r2));\r\n        return (arg1 * m + arg2 * m) / m;\r\n    };\r\n\r\n    /*\r\n  * 处理合计数据\r\n  * selected: Object 计算合计选中的数据\r\n  * tableType：String 判断主子表结构、主子拉平结构或者单表结构 （nest/full/simple）\r\n  * column：Array 合计行的模板数据\r\n  * showFullTable：Boolean 判断是表示是否为拉平显示\r\n  * */\r\n    const processingTotalData = (selected, tableType, column, showFullTable, record) => {\r\n        let { _this } = this.props;\r\n        let headkey = '';\r\n        let outerData = {};\r\n        let totalKey = [];\r\n        let totalScale = {};\r\n\r\n        for (let item of column) {\r\n            outerData[item['attrcode']] = { value: '', display: '' };\r\n            if (item.istotal && item.itemtype === 'number') {\r\n                totalKey.push(item.attrcode);\r\n                totalScale[item.attrcode] = item.scale;\r\n            }\r\n        }\r\n        if (tableType === 'body') {\r\n            headkey = record.headKey || record.key;\r\n            let bodyData = selected.childSelData[headkey];\r\n            if (bodyData) {\r\n                for (let item of Object.keys(bodyData)) {\r\n                    for (let i of totalKey) {\r\n                        if (\r\n                            bodyData[item].data.values\r\n                                ? bodyData[item].data.values.hasOwnProperty(i)\r\n                                : bodyData[item].data.hasOwnProperty(i)\r\n                        ) {\r\n                            let values = bodyData[item].data.values || bodyData[item].data;\r\n                            if (values[i] && typeof values[i] === 'object') {\r\n                                let scale = values[i].scale ? values[i].scale : totalScale[i];\r\n                                let value = values[i] ? values[i].value : 0;\r\n                                if (!outerData[i].value) {\r\n                                    outerData[i].scale = scale;\r\n                                    outerData[i].value = getScaleData(value, scale);\r\n                                } else {\r\n                                    let totalData = sum(Number.parseFloat(value), Number.parseFloat(outerData[i].value.replace(/,/g, '')));\r\n                                    outerData[i].scale = scale > outerData[i].scale ? scale : outerData[i].scale;\r\n                                    outerData[i].value = getScaleData(String(totalData), outerData[i].scale);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return [outerData];\r\n    };\r\n\r\n    /*\r\n    * 根据精度获取数据\r\n    * data：String/Number 要获取精度的具体值\r\n    * scal：String/Number 精度\r\n    * */\r\n    const getScaleData = (data, scal) => {\r\n        let value = String(data).replace(/,/g, '');\r\n        let scale = Number(scal);\r\n        if (value) {\r\n            let len = scale >= 0 ? value.split('.')[0].length + scale + 1 : value.split('.')[0].length;\r\n            if (value.indexOf('.') !== -1) {\r\n                let arr = value.split('.');\r\n                if (!Number.isNaN(scale) && scale !== -1) {\r\n                    if (scale === 0) {\r\n                        value = String(value).split('.')[0];\r\n                    } else {\r\n                        value = String(value).padEnd(len, '0');\r\n                    }\r\n                }\r\n            } else {\r\n                if (!Number.isNaN(scale) && scale !== -1) {\r\n                    if (scale === 0) {\r\n                        value = String(value);\r\n                    } else {\r\n                        let str = value + '.';\r\n                        value = str.padEnd(Number(len), '0');\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n        return commafy(value);\r\n    };\r\n\r\n    /*\r\n    * 为已选列表的模板添加操作列\r\n    * column：Array 需要处理的已选列表表格的模板\r\n    * showIndex：Object 是否要为模板添加序号列\r\n    * json：Object 多语资源\r\n    * */\r\n    const createSelectColumns = (column, showIndex, json) => {\r\n        let result = [];\r\n        result.push({\r\n            label: json['page-transferTable-0007'] || '序号-6',\r\n            attrcode: 'numberindex',\r\n            itemtype: 'customer',\r\n            dataIndex: 'numberindex',\r\n            visible: true,\r\n            width: 60, // 这里要和序号列同宽\r\n            className: 'col-customer-numberindex',\r\n            render: (text, record2, index) => {\r\n                return <span title={json['page-transferTable-0010'] || '合计-7'}>{json['page-transferTable-0010'] || '合计-7'}</span>;\r\n            },\r\n        });\r\n        column.map(item => {\r\n            let width = item.width;\r\n            if (!width) {\r\n                width = 120;\r\n            }\r\n            let render = null;\r\n            if (item.itemtype !== 'customer' && item.visible && !item.render) {\r\n                render = (text, record, index) => {\r\n                    if (record[item.attrcode]) {\r\n                        let display = record[item.attrcode].display;\r\n                        let value = record[item.attrcode].value;\r\n                        let dom = '';\r\n                        if (display || display === 0) {\r\n                            dom = display;\r\n                        } else {\r\n                            dom = value;\r\n                        }\r\n                        if (isTimeType(item.itemtype)) {\r\n                            if (item.itemtype == 'datetimepicker') {\r\n                                dom = changeTime(value, 'YYYY-MM-DD HH:mm:ss');\r\n                                dom = formatDatetime(dom, 'datetime');\r\n                            } else if (item.itemtype == 'timepicker') {\r\n                                dom = value;\r\n                                dom = formatDatetime(dom, 'time');\r\n                            } else {\r\n                                dom = changeTime(value);\r\n                                dom = formatDatetime(dom, 'date');\r\n                            }\r\n                        }\r\n\r\n                        // 多语处理\r\n                        if (item.itemtype === \"residtxt\") {\r\n                            let langCode = getLangCode();\r\n                            let loginLang = (item.languageMeta || []).filter(i => i.languageCode == langCode);\r\n                            if (loginLang.length > 0) {\r\n                                loginLang[0].index === \"1\" ? (loginLang[0].index = \"\") : \"\";\r\n                                if (\r\n                                    record[item.attrcode + loginLang[0].index] &&\r\n                                    record[item.attrcode + loginLang[0].index].value\r\n                                ) {\r\n                                    dom = record[item.attrcode + loginLang[0].index].value;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (item.itemtype === 'number') {\r\n                            dom = formatNumber(dom);\r\n                        }\r\n                        return (\r\n                            <span className={`${item.itemtype === 'number' ? 'number-td-span-wrapper' : ''}`}>{\r\n                                dom ? (\r\n                                    <EllipsisToTooltip overlay={dom}>\r\n                                        <span>{dom}</span>\r\n                                    </EllipsisToTooltip>\r\n                                ) : dom}\r\n                            </span>\r\n                        );\r\n\r\n                    }\r\n                };\r\n            } else {\r\n                if (item.itemtype === 'customer') {\r\n                    render = item.render;\r\n                } else {\r\n                    render = (text, record, index) => {\r\n                        return record[item.attrcode] ? (\r\n                            <EllipsisToTooltip\r\n                                className=\"tooltip-word-color\"\r\n                                placement={'left'}\r\n                                delay={1}\r\n                                overlay={item.render.call(\r\n                                    null,\r\n                                    text,\r\n                                    record,\r\n                                    index,\r\n                                )}\r\n                                noEllipsis\r\n                            >\r\n                                <div className={classnames(\r\n                                    'col-customer-render-unit',\r\n                                    {\r\n                                        'single-line-and-ellipsis': this.state.transferTable['allSelected']['isEllipsis'],\r\n                                        'three-line-and-ellipsis': !this.state.transferTable['allSelected']['isEllipsis'],\r\n                                    })\r\n                                }>\r\n                                    {item.render.call(null, text, record, index)}\r\n                                </div>\r\n                            </EllipsisToTooltip>\r\n                        ) : record[item.attrcode];\r\n                    };\r\n                }\r\n            }\r\n            if (item.visible && item.attrcode !== 'checkbox' && item.attrcode !== 'numberindex') {\r\n                result.push({ ...item, render, width, key: item.attrcode, title: item.label });\r\n            }\r\n        });\r\n        if (result.length) {\r\n            result[result.length - 1].render = () => {\r\n                <span />;\r\n            };\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /*\r\n    * 渲染子表表格数据\r\n    * record：Object 主表展开行所属行的数据\r\n    * index：Number 主表展开行所属行的下标\r\n    * json：Object 多语资源\r\n    * */\r\n    const expandedRowRender = (record, index, json, uniqueTagCls) => {\r\n        let activeIndex = this.state.transferTable.allSelected.activeTab;\r\n        let currentBodyId = params[activeIndex].bodyTableId;\r\n        // let bodyColumn = this.state.meta[allBodyId].items; //子表模板\r\n        if (!this.state.meta[currentBodyId] || !this.state.meta[currentBodyId].items) {\r\n            return <span />\r\n        }\r\n        let bodyColumn = this.state.meta[currentBodyId].items; //子表模板\r\n        let newColumn = bodyColumn;\r\n        let { sortType } = this.props;\r\n        if (newColumn instanceof Array && newColumn.length > 0) {\r\n            newColumn = renderColumnsMultiSelectChild.call(this, newColumn, record, index, json);\r\n\r\n            let data = null,\r\n                expandTableHeight = 0;\r\n            let expandTableBodyHeight = 0;//展开子表表体的高度\r\n            //已选列表的子表移除时需要删除行数据\r\n            data = createNewData(\r\n                Object.values(transferTable.allSelected.selectedData.childSelData[record.key] || {}).map(\r\n                    item => item.data,\r\n                ),\r\n            );\r\n            let isTotal = this.myState.status.bodyTotalStatusOfTransferTable;\r\n            let $uniqueTagCls = document && document.querySelector(`.${uniqueTagCls}`);\r\n            expandTableHeight = getExpandTableHeight(data, isTotal, $uniqueTagCls || ReactDOM.findDOMNode(this));\r\n            expandTableBodyHeight = getExpandTableHeight(data, isTotal, $uniqueTagCls || ReactDOM.findDOMNode(this), true);\r\n            // console.log(uniqueTagCls, $uniqueTagCls, expandTableHeight);\r\n\r\n            return (\r\n                <div style={{ height: `${expandTableHeight}px` }} className=\"transfertable-expand-wraper\" fieldid={getSysFieldid(`selected-list-${index}_table`)}>\r\n                    <ComplexTable\r\n                        columns={createNewCol(newColumn, json, 'child')}\r\n                        sort={sortType}\r\n                        data={data}\r\n                        lazyload={true}\r\n                        isDrag={isDrag}\r\n                        scroll={{ x: true, y: expandTableBodyHeight || 450 }}\r\n                        isTotal={isTotal}\r\n                        totalBodyHeight={30}\r\n                        totalData={processingTotalData(\r\n                            transferTable.allSelected.selectedData,\r\n                            'body',\r\n                            createNewCol(newColumn, json),\r\n                            false,\r\n                            record,\r\n                        )}\r\n                        totalColumns={createSelectColumns(createNewCol(newColumn, json), true, json)}\r\n                        updateColumnHandle={updateColumnAfterSetting.bind(this)}\r\n                        bodyStyle={{ minHeight: '30px' }}\r\n                        tableType='transfer'\r\n                        //折行回调\r\n                        foldingRowChange={isEllipsis => {\r\n                            this.state.transferTable['allSelected']['isEllipsis'] = isEllipsis\r\n                            this.setState({ transferTable: this.state.transferTable })\r\n                        }}\r\n                        bodyDisplayInRow={this.state.transferTable['allSelected']['isEllipsis']}\r\n                        cancelCustomRightMenu={cancelCustomRightMenu}\r\n                        colsSettingParam={getcolsSettingParam.call(this, this.state.meta, allBodyId)}\r\n                    />\r\n                    {/*</Col>*/}\r\n                </div>\r\n\r\n            );\r\n        } else {\r\n            return;\r\n        }\r\n    };\r\n\r\n    /*\r\n    * 提取已选列表主表数据\r\n    * data：已选的原数据\r\n    * */\r\n    const getMasterData = data => {\r\n        return Object.values(data.masterSelData).map(item => item.data);\r\n    };\r\n\r\n    /*\r\n    * 点击页签\r\n    * key：String 所点击的页签的唯一标识\r\n    * */\r\n    const handleTabClick = key => {\r\n        if (this.state.transferTable.allSelected) {\r\n            let headID = params[key].headTableId; // 当前页签的headId\r\n            linkage.call(this, headID); // 多来源联动页签已选数据的更换\r\n            // 改变当前页签下标\r\n            this.state.transferTable.allSelected.activeTab = key;\r\n        }\r\n        this.setState(\r\n            { transferTable: this.state.transferTable },\r\n            () => {\r\n                // 更新子表高度  by 这里的做法贼恶心 优秀的做法是  将计算高度放到render中\r\n                this.infoExchangeController && this.infoExchangeController.publish('heightChange', { area: params[key].headTableId });\r\n                if (typeof onTabClick === 'function') {\r\n                    onTabClick(key);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    //点击切换视图\r\n    const handleChangeView = () => {\r\n        if (typeof onChangeViewClick === 'function') {\r\n            onChangeViewClick();\r\n        }\r\n    };\r\n\r\n    /*\r\n    * 处理并获取已选列表主子拉平数据 （为已选的主子拉平数据增加headKey属性：将来点击生成按钮的时候提取pk需要用到）\r\n    * data：已选的原数据\r\n    * */\r\n    const getSelectedFullData = data => {\r\n        let { masterSelData, childSelData } = data;\r\n        let result = [];\r\n        for (let key of Object.keys(childSelData)) {\r\n            // 存在 没有子表元素的主表数据\r\n            if (hasObjProperty(childSelData[key])) {\r\n                Object.values(childSelData[key]).forEach(item => {\r\n                    // let childVal = JSON.parse(JSON.stringify(item.data.values || item.data || {}));\r\n                    // let headData = JSON.parse(JSON.stringify(masterSelData[key].data || {}));\r\n                    // 为了万行\r\n                    let childVal = Object.assign({}, item.data.values || item.data || {});\r\n                    let headData = Object.assign({}, masterSelData[key].data || {});\r\n\r\n                    childVal.headKey = headData.key || headData.headKey;\r\n                    // delete headData.headKey;\r\n                    // delete headData.key;\r\n                    let newData = Object.assign({}, childVal, headData); //合并后的主子拉平数据\r\n                    if (newData.headKey) newData.headKey = key;\r\n                    newData.key = childVal.key;\r\n\r\n                    result.push(newData);\r\n                });\r\n            } else {\r\n                // 没有就取主表数据\r\n                // let newData = JSON.parse(JSON.stringify(masterSelData[key].data));\r\n                // 为了万行\r\n                let newData = masterSelData[key].data;\r\n                newData.headKey = key;\r\n                newData.key = key;\r\n                result.push(newData);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //获取多来源转单已选数据\r\n    const getAllSelectedData = () => {\r\n        let transferTable = this.state.transferTable;\r\n        let allSelected = this.state.transferTable.allSelected;\r\n        for (let items of Object.keys(transferTable)) {\r\n            if (items !== 'allSelected') {\r\n                let selected = transferTable[items].selected;\r\n                let childS = selected.selectedData.childSelData;\r\n                let masterS = selected.selectedData.masterSelData;\r\n                for (let item of Object.keys(masterS)) {\r\n                    if (Object.keys(masterS).length) {\r\n                        if (!allSelected.selectedData.masterSelData.hasOwnProperty(item)) {\r\n                            allSelected.masterCheckedId.push(item);\r\n                            allSelected.selIds[item] = [];\r\n                            allSelected.selectedData.masterSelData[item] = masterS[item];\r\n                        }\r\n                    }\r\n                }\r\n                for (let item of Object.keys(childS)) {\r\n                    if (Object.keys(childS).length) {\r\n                        if (!allSelected.selectedData.childSelData.hasOwnProperty(item)) {\r\n                            allSelected.selectedData.childSelData[item] = childS[item];\r\n                            for (let ite of Object.keys(childS[item])) {\r\n                                allSelected.selIds[item].push(ite);\r\n                            }\r\n                        } else {\r\n                            for (let ite of Object.keys(childS[item])) {\r\n                                if (!allSelected.selectedData.childSelData[item].hasOwnProperty(ite)) {\r\n                                    allSelected.selectedData.childSelData[item][ite] = childS[item][ite];\r\n                                    allSelected.selIds[item].push(ite);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                allSelected.masterAmount = allSelected.masterCheckedId.length;\r\n                for (let item of Object.keys(allSelected.selIds)) {\r\n                    // 有个数据没有子数据  但是应该也算一行数据\r\n                    allSelected.bodyAmount += (allSelected.selIds[item].length || 1);\r\n\r\n                }\r\n            }\r\n        }\r\n        this.state.transferTable.allSelected = allSelected;\r\n    };\r\n\r\n    //点击生成按钮\r\n    const handleGenerateClick = () => {\r\n        let selIds = [];\r\n        // getAllSelectedData();\r\n        //获取已选列表主子表id\r\n        if (!headPkIds || !bodyPkIds) {\r\n            console.error('没有传主表或子表主键字段');\r\n        }\r\n        for (let ID of Object.keys(transferTable)) {\r\n            if (ID !== 'allSelected') {\r\n                let selected = transferTable[ID].selected;\r\n                let masterData = JSON.parse(JSON.stringify(selected.selectedData.masterSelData));\r\n                let childData = JSON.parse(JSON.stringify(selected.selectedData.childSelData));\r\n                let bodys = [];\r\n                for (let key of Object.keys(masterData)) {\r\n                    let hValues = masterData[key].data;\r\n                    if (hValues.saga_status && hValues.saga_status.value === '1') {\r\n                        // eslint-disable-next-line no-continue\r\n                        continue;\r\n                    }\r\n                    if (childData[key]) {\r\n                        for (let id of Object.keys(childData[key])) {\r\n                            let values = childData[key][id].data.values || childData[key][id].data;\r\n                            if (values.saga_status && values.saga_status.value === '1') {\r\n                                // eslint-disable-next-line no-continue\r\n                                continue;\r\n                            }\r\n                            bodyPkIds &&\r\n                                bodyPkIds.map(pk => {\r\n                                    let cData = childData[key][id].data.values || childData[key][id].data;\r\n                                    if (cData.hasOwnProperty(pk)) {\r\n                                        bodys.push({\r\n                                            [pk]: id,\r\n                                            ts: values.ts && values.ts.value,\r\n                                        });\r\n                                    }\r\n                                });\r\n                        }\r\n                    }\r\n\r\n                    headPkIds &&\r\n                        headPkIds.map(pk => {\r\n                            if (masterData[key].data.hasOwnProperty(pk)) {\r\n                                selIds.push({\r\n                                    head: {\r\n                                        [pk]: key,\r\n                                        ts: masterData[key].data.ts && masterData[key].data.ts.value,\r\n                                    },\r\n                                    bodys,\r\n                                });\r\n                            }\r\n                        });\r\n                    bodys = [];\r\n                }\r\n            }\r\n        }\r\n        ViewModel.setData('multiTransferIds', selIds);\r\n        //避免无效渲染导致性能所以把setState去掉\r\n        if (typeof onTransferBtnClick === 'function') {\r\n            onTransferBtnClick(selIds);\r\n        }\r\n        /*this.setState(\r\n            {\r\n                transferTable: this.state.transferTable\r\n            },\r\n            () => {\r\n                if (typeof onTransferBtnClick === 'function') {\r\n                    onTransferBtnClick(selIds);\r\n                }\r\n            }\r\n        );*/\r\n    };\r\n\r\n    if (Array.isArray(cutParams)) {\r\n        return (\r\n            <CreateMultiTransferTable\r\n                _this={this}\r\n                allHeadId={allHeadId}\r\n                headPkIds={headPkIds}\r\n                showAllList={showAllList}\r\n                onSelectedBtnClick={onSelectedBtnClick}\r\n                getAllSelectedData={getAllSelectedData}\r\n                bodyPkIds={bodyPkIds}\r\n                clearAllSelectedData={clearAllSelectedData}\r\n                componentInitFinished={componentInitFinished}\r\n                createNewCol={createNewCol}\r\n                cutParams={cutParams}\r\n                dataSource={dataSource}\r\n                expandedRowRender={expandedRowRender}\r\n                fullColumns={fullColumns}\r\n                getMasterData={getMasterData}\r\n                getScaleData={getScaleData}\r\n                getSelectedFullData={getSelectedFullData}\r\n                getTheLongestPrecision={getTheLongestPrecision}\r\n                handleChangeView={handleChangeView}\r\n                showChangeViewBtn={showChangeViewBtn}\r\n                handleGenerateClick={handleGenerateClick}\r\n                handleTabClick={handleTabClick}\r\n                isTotal={this.myState.status.totalStatusOfTransferTable}\r\n                isHeadTotal={this.myState.status.headTotalStatusOfTransferTable}\r\n                isBodyTotal={this.myState.status.bodyTotalStatusOfTransferTable}\r\n                isFullTotal={this.myState.status.fullTotalStatusOfTransferTable}\r\n                params={params}\r\n                showAll={showAll}\r\n                onTabClick={this.onTabClick}\r\n                onCheckedChange={onCheckedChange}\r\n                showSeletedBtn={showSeletedBtn}\r\n                showGenerateBtn={showGenerateBtn}\r\n                // searchArea={searchArea}\r\n                selectArea={selectArea}\r\n                selectedHeaderRender={selectedHeaderRender}\r\n                selectedAmount={selectedAmount}\r\n                isShowBodyAmount={isShowBodyAmount}\r\n                setSelectedColumns={setSelectedColumns}\r\n                transferBtnText={transferBtnText}\r\n                transferTable={transferTable}\r\n                totalKey={totalKey}\r\n                totalTitle={totalTitle}\r\n                containerSelector={containerSelector}\r\n                sortType={sortType}\r\n                onExpandedChange={onExpandedChange}\r\n                meta={this.state.meta}\r\n                allBodyId={allBodyId}\r\n                allFullTableId={allFullTableId}\r\n                autoHeight={autoHeight}\r\n            />\r\n        );\r\n    }\r\n}\r\n","/*\r\n * Created by wangshhj on 2018/1/16.\r\n */\r\nimport { createTransferTable, createTransferList } from \"./create\";\r\nimport { createMultiTransferTable } from \"./multi\";\r\nimport {\r\n    getTransferTableValue,\r\n    setTransferTableValue,\r\n    insertTransferTableValue,\r\n    setChildTransferTableData,\r\n    getTransferTableSelectedValue,\r\n    setTransferListValue,\r\n    getSelectedListDisplay,\r\n    getTransformFormDisplay,\r\n    setTransformFormStatus,\r\n    getTransformFormStatus,\r\n    changeNextTransformForm,\r\n    returnTransferTableList,\r\n    getTransformFormAmount,\r\n    setMultiTransformFormStatus,\r\n    changeViewType,\r\n    getTransferTableSelectedId,\r\n    getTransferTableAllSelectedId,\r\n    getTransferTableMultiSelectedId,\r\n    getTransformFormCompleteStatus,\r\n    setTransferListValueByIndex,\r\n    setMultiSelectedValue,\r\n    setSavedTransferTableDataPk,\r\n    clearAllSelectedData,\r\n    hasCache,\r\n    deleteCache,\r\n    setRowDataByIndex,\r\n    savePk,\r\n    getPkCache,\r\n    getTransferTableCache,\r\n    deleteItems,\r\n    getTransferListValue,\r\n    updateTransferListValue,\r\n    updateTransferList,\r\n    updateTransferTableValue,\r\n    updateTransformFormStatus,\r\n    updateActiveGrandsonData,\r\n    updateTransferListValueByIndex,\r\n    getTheTransferListDataSavedLastTime,\r\n    updateHeadRowByKey,\r\n    setTheCheckRows, // 设置选中行\r\n    cancelRowsChecked,\r\n    refreshTransferTable,\r\n    whenTransferTableUnmount,\r\n    getCurrentTransferTableStatus,\r\n    setTransferTableSelectedId,\r\n    updateDataByRefresh,\r\n} from './methods';\r\nexport default {\r\n    createTransferTable,\r\n    createTransferList,\r\n    createMultiTransferTable,\r\n    getTransferTableValue,\r\n    setTransferTableValue,\r\n    insertTransferTableValue,\r\n    setChildTransferTableData,\r\n    getTransferTableSelectedValue,\r\n    setTransferListValue,\r\n    getSelectedListDisplay,\r\n    getTransformFormDisplay,\r\n    setTransformFormStatus,\r\n    getTransformFormStatus,\r\n    changeNextTransformForm,\r\n    returnTransferTableList,\r\n    getTransformFormAmount,\r\n    setMultiTransformFormStatus,\r\n    changeViewType,\r\n    getTransferTableSelectedId,\r\n    getTransferTableAllSelectedId,\r\n    getTransferTableMultiSelectedId,\r\n    getTransformFormCompleteStatus,\r\n    setTransferListValueByIndex,\r\n    setMultiSelectedValue,\r\n    setSavedTransferTableDataPk,\r\n    clearAllSelectedData,\r\n    hasCache,\r\n    deleteCache,\r\n    setRowDataByIndex,\r\n    savePk,\r\n    getPkCache,\r\n    getTransferListValue,\r\n    updateTransferListValue,\r\n    updateTransferList,\r\n    getTransferTableCache,\r\n    deleteItems,\r\n    updateTransferTableValue,\r\n    updateTransferListValueByIndex,\r\n    updateTransformFormStatus,\r\n    updateActiveGrandsonData,\r\n    getTheTransferListDataSavedLastTime,\r\n    setTheCheckRows,\r\n    updateHeadRowByKey,\r\n    cancelRowsChecked,\r\n    refreshTransferTable,\r\n    whenTransferTableUnmount,\r\n    getCurrentTransferTableStatus,\r\n    setTransferTableSelectedId,\r\n    updateDataByRefresh,\r\n};","\r\nexport function getTableWidth(classname){\r\n  let table = document.querySelector(`.${classname} .u-table-scroll .u-table-body`);\r\n  let width =table ? table.getBoundingClientRect().width : undefined;\r\n  return width\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;"],"sourceRoot":""}